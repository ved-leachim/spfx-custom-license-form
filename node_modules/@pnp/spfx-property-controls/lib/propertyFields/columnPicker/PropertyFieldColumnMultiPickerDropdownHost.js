var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import * as React from 'react';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';
import { Async } from 'office-ui-fabric-react/lib/Utilities';
import { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';
import { SPColumnPickerService } from '../../services/SPColumnPickerService';
import FieldErrorMessage from '../errorMessage/FieldErrorMessage';
import * as telemetry from '../../common/telemetry';
import { setPropertyValue } from '../../helpers/GeneralHelper';
/**
* Renders the controls for PropertyFieldSPColumnMultiplePicker component
*/
var PropertyFieldColumnMultiPickerDropdownHost = /** @class */ (function (_super) {
    __extends(PropertyFieldColumnMultiPickerDropdownHost, _super);
    /**
    * Constructor
    */
    function PropertyFieldColumnMultiPickerDropdownHost(props) {
        var _this = _super.call(this, props) || this;
        _this.loaded = false;
        telemetry.track('PropertyFieldColumnMultiPicker', {
            disabled: props.disabled
        });
        _this.onChanged = _this.onChanged.bind(_this);
        _this.onSelectAllChanged = _this.onSelectAllChanged.bind(_this);
        _this.state = {
            loadedColumns: {
                value: []
            },
            results: [],
            selectedKeys: [],
            loaded: _this.loaded,
            errorMessage: ''
        };
        _this.async = new Async(_this);
        _this.validate = _this.validate.bind(_this);
        _this.notifyAfterValidate = _this.notifyAfterValidate.bind(_this);
        _this.delayedValidate = _this.async.debounce(_this.validate, _this.props.deferredValidationTime);
        return _this;
    }
    PropertyFieldColumnMultiPickerDropdownHost.prototype.componentDidMount = function () {
        this.loadColumns();
    };
    PropertyFieldColumnMultiPickerDropdownHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (this.props.listId !== prevProps.listId ||
            this.props.webAbsoluteUrl !== prevProps.webAbsoluteUrl) {
            this.loadColumns();
        }
    };
    PropertyFieldColumnMultiPickerDropdownHost.prototype.loadColumns = function () {
        var _this = this;
        var _a = this.props, selectedColumns = _a.selectedColumns, columnReturnProperty = _a.columnReturnProperty, displayHiddenColumns = _a.displayHiddenColumns;
        var columnService = new SPColumnPickerService(this.props, this.props.context);
        var columnsToExclude = this.props.columnsToExclude || [];
        var options = [];
        var selectedKeys = [];
        var selectedColumnsKeys = [];
        if (selectedColumns && selectedColumns.length) {
            var firstItem = selectedColumns[0];
            if (typeof firstItem === 'string') {
                selectedColumnsKeys = selectedColumns;
            }
            else {
                selectedColumnsKeys = selectedColumns.map(function (o) { return (columnReturnProperty ? o[columnReturnProperty] : o.Id); });
            }
        }
        columnService.getColumns(displayHiddenColumns).then(function (response) {
            // Start mapping the Columns that are selected
            response.value.forEach(function (column) {
                var isSelected = false;
                var indexInExisting = -1;
                var colPropsToCheck = columnReturnProperty ? column[columnReturnProperty] : column.Id;
                // Defines if the current list must be selected by default
                if (selectedColumnsKeys) {
                    indexInExisting = selectedColumnsKeys.indexOf(colPropsToCheck);
                }
                if (indexInExisting > -1) {
                    isSelected = true;
                    selectedKeys.push(colPropsToCheck);
                }
                // Make sure that the current column is NOT in the 'columnsToExclude' array
                if (columnsToExclude.indexOf(column.Title) === -1 && columnsToExclude.indexOf(column.Id) === -1) {
                    options.push({
                        key: colPropsToCheck,
                        text: column.Title,
                        selected: isSelected
                    });
                }
            });
            _this.loaded = true;
            _this.setState({
                loadedColumns: response,
                results: options,
                selectedKeys: selectedKeys,
                loaded: true
            });
        });
    };
    /**
    * Raises when a column has been selected
    */
    PropertyFieldColumnMultiPickerDropdownHost.prototype.onChanged = function (element, option, index) {
        if (element) {
            //const value: string = (element.currentTarget as any).;
            var selectedKeys = this.state.selectedKeys;
            // Check if the element is selected
            if (option.selected === false) {
                // Remove the unselected item
                selectedKeys = selectedKeys.filter(function (s) { return s !== option.key; });
            }
            else {
                // Add the selected item and filter out the doubles
                selectedKeys.push(option.key.toString());
                selectedKeys = selectedKeys.filter(function (item, pos, self) {
                    return self.indexOf(item) === pos;
                });
            }
            // Update the state and validate
            this.setState({
                selectedKeys: selectedKeys
            });
            this.delayedValidate(selectedKeys);
        }
    };
    /**
     * Raises when the select all checkbox is changed
     */
    PropertyFieldColumnMultiPickerDropdownHost.prototype.onSelectAllChanged = function (element, isChecked) {
        if (element) {
            var selectedKeys_1 = new Array();
            var results = this.state.results;
            if (isChecked === true) {
                results.forEach(function (value) {
                    selectedKeys_1.push(value.key.toString());
                });
            }
            this.setState({
                selectedKeys: selectedKeys_1
            });
            this.delayedValidate(selectedKeys_1);
        }
    };
    /**
    * Validates the new custom field value
    */
    PropertyFieldColumnMultiPickerDropdownHost.prototype.validate = function (value) {
        var _this = this;
        if (this.props.onGetErrorMessage === null || typeof this.props.onGetErrorMessage === 'undefined') {
            this.notifyAfterValidate(value);
            return;
        }
        var errResult = this.props.onGetErrorMessage(value || []);
        if (typeof errResult !== 'undefined') {
            if (typeof errResult === 'string') {
                if (errResult === '') {
                    this.notifyAfterValidate(value);
                }
                this.setState({
                    errorMessage: errResult
                });
            }
            else {
                errResult.then(function (errorMessage) {
                    if (typeof errorMessage === 'undefined' || errorMessage === '') {
                        _this.notifyAfterValidate(value);
                    }
                    _this.setState({
                        errorMessage: errorMessage
                    });
                });
            }
        }
        else {
            this.notifyAfterValidate(value);
        }
    };
    /**
    * Notifies the parent Web Part of a property value change
    */
    PropertyFieldColumnMultiPickerDropdownHost.prototype.notifyAfterValidate = function (newValue) {
        var _a = this.props, onPropertyChange = _a.onPropertyChange, onChange = _a.onChange, selectedColumn = _a.selectedColumn, targetProperty = _a.targetProperty, properties = _a.properties;
        var loadedColumns = this.state.loadedColumns;
        var propValue;
        if (!newValue || !newValue.length) {
            propValue = [];
        }
        else {
            propValue = __spreadArrays(newValue);
        }
        if (onPropertyChange && newValue !== null) {
            setPropertyValue(properties, targetProperty, propValue);
            onPropertyChange(targetProperty, selectedColumn, propValue);
            // Trigger the apply button
            if (typeof onChange !== 'undefined' && onChange !== null) {
                onChange(targetProperty, propValue);
            }
        }
    };
    /**
    * Called when the component will unmount
    */
    PropertyFieldColumnMultiPickerDropdownHost.prototype.componentWillUnmount = function () {
        this.async.dispose();
    };
    /**
    * Renders the SPColumnMultiplePicker controls with Office UI  Fabric
    */
    PropertyFieldColumnMultiPickerDropdownHost.prototype.render = function () {
        var _a = this.state, selectedKeys = _a.selectedKeys, results = _a.results, errorMessage = _a.errorMessage;
        var _b = this.props, label = _b.label, disabled = _b.disabled, targetProperty = _b.targetProperty;
        if (this.loaded === false) {
            return (React.createElement("div", null,
                React.createElement(Label, null, label),
                React.createElement(Spinner, { size: SpinnerSize.medium })));
        }
        else {
            var styleOfLabel = {
                color: disabled === true ? '#A6A6A6' : 'auto'
            };
            // Renders content
            return (React.createElement("div", null,
                React.createElement(Dropdown, { multiSelect: true, label: this.props.label, disabled: disabled, options: results, defaultSelectedKeys: selectedKeys, onChange: this.onChanged, selectedKeys: selectedKeys }),
                React.createElement(FieldErrorMessage, { errorMessage: errorMessage })));
        }
    };
    return PropertyFieldColumnMultiPickerDropdownHost;
}(React.Component));
export default PropertyFieldColumnMultiPickerDropdownHost;
//# sourceMappingURL=PropertyFieldColumnMultiPickerDropdownHost.js.map