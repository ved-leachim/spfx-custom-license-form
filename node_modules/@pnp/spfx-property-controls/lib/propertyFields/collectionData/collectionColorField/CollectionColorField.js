var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import styles from '../PropertyFieldCollectionDataHost.module.scss';
import { Callout, DirectionalHint } from 'office-ui-fabric-react/lib/Callout';
import { ColorPicker } from 'office-ui-fabric-react/lib/ColorPicker';
var CollectionColorField = /** @class */ (function (_super) {
    __extends(CollectionColorField, _super);
    function CollectionColorField(props, state) {
        var _this = _super.call(this, props, state) || this;
        _this._colorElement = React.createRef();
        _this._onCalloutDismiss = function () {
            _this.setState({
                isCalloutVisible: false
            });
        };
        _this._onCalloutToggle = function () {
            _this.setState({
                isCalloutVisible: !_this.state.isCalloutVisible
            });
        };
        var _a = _this.props, field = _a.field, item = _a.item;
        _this.state = {
            isCalloutVisible: false,
            color: item[field.id] ? item[field.id] : "#0000ff"
        };
        return _this;
    }
    CollectionColorField.prototype.render = function () {
        var _this = this;
        var field = this.props.field;
        return (React.createElement("div", { className: "PropertyFieldCollectionData__panel__color-field " + styles.colorField },
            React.createElement("div", { className: styles.colorIndicator, style: { backgroundColor: this.state.color, cursor: this.props.disableEdit ? 'default' : 'hand' }, ref: this._colorElement, onClick: function () { if (!_this.props.disableEdit)
                    _this._onCalloutToggle(); } }),
            React.createElement(Callout, { gapSpace: 0, target: this._colorElement.current, onDismiss: this._onCalloutDismiss, setInitialFocus: true, hidden: !this.state.isCalloutVisible, directionalHint: DirectionalHint.rightCenter },
                React.createElement(ColorPicker, { color: this.state.color, alphaSliderHidden: true, onChange: function (e, color) { _this.props.fOnValueChange(field.id, color.str); _this.setState({ color: color.str }); } }))));
    };
    return CollectionColorField;
}(React.Component));
export { CollectionColorField };
//# sourceMappingURL=CollectionColorField.js.map