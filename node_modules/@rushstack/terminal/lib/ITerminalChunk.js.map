{"version":3,"file":"ITerminalChunk.js","sourceRoot":"","sources":["../src/ITerminalChunk.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Specifies the kind of data represented by a {@link ITerminalChunk} object.\r\n * @public\r\n */\r\nexport const enum TerminalChunkKind {\r\n  /**\r\n   * Indicates a `ITerminalChunk` object representing `stdout` console output.\r\n   */\r\n  Stdout = 'O',\r\n\r\n  /**\r\n   * Indicates a `ITerminalChunk` object representing `stderr` console output.\r\n   */\r\n  Stderr = 'E'\r\n}\r\n\r\n/**\r\n * Represents a chunk of output that will ultimately be written to a {@link TerminalWritable}.\r\n *\r\n * @remarks\r\n * Today `ITerminalChunk` represents the `stdout` and `stderr` text streams.  In the future,\r\n * we plan to expand it to include other console UI elements such as instructions for displaying\r\n * an interactive progress bar.  We may also add other metadata, for example tracking whether\r\n * the `text` string is known to contain color codes or not.\r\n *\r\n * The `ITerminalChunk` object should be considered to be immutable once it is created.\r\n * For example, {@link SplitterTransform} may pass the same chunk to multiple destinations.\r\n *\r\n * @public\r\n */\r\nexport interface ITerminalChunk {\r\n  /**\r\n   * Indicates the kind of information stored in this chunk.\r\n   *\r\n   * @remarks\r\n   * More kinds will be introduced in the future.  Implementors of\r\n   * {@link TerminalWritable.onWriteChunk} should ignore unrecognized `TerminalChunkKind`\r\n   * values.  `TerminalTransform` implementors should pass along unrecognized chunks\r\n   * rather than discarding them.\r\n   */\r\n  kind: TerminalChunkKind;\r\n\r\n  /**\r\n   * The next chunk of text from the `stderr` or `stdout` stream.\r\n   */\r\n  text: string;\r\n}\r\n"]}