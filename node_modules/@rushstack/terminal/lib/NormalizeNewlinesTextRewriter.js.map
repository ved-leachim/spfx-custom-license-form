{"version":3,"file":"NormalizeNewlinesTextRewriter.js","sourceRoot":"","sources":["../src/NormalizeNewlinesTextRewriter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAiE;AACjE,iDAAiE;AA6BjE;;;;;GAKG;AACH,MAAa,6BAA8B,SAAQ,2BAAY;IAY7D,YAAmB,OAA8C;QAC/D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,wBAAI,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC;IACzD,CAAC;IAEM,UAAU;QACf,OAAO;YACL,iBAAiB,EAAE,EAAE;YACrB,cAAc,EAAE,KAAK;SACiB,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,YAA+B,EAAE,IAAY;QAC1D,MAAM,KAAK,GAAwC,YAAmD,CAAC;QAEvG,IAAI,MAAM,GAAW,EAAE,CAAC;QAExB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,IAAI,CAAC,GAAW,CAAC,CAAC;YAElB,GAAG;gBACD,MAAM,CAAC,GAAW,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,EAAE,CAAC,CAAC;gBAEJ,IAAI,CAAC,KAAK,KAAK,CAAC,iBAAiB,EAAE;oBACjC,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC;iBAC9B;qBAAM,IAAI,CAAC,KAAK,IAAI,EAAE;oBACrB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC;oBACvB,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC/B,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;iBAC9B;qBAAM,IAAI,CAAC,KAAK,IAAI,EAAE;oBACrB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC;oBACvB,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC/B,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;iBAC9B;qBAAM;oBACL,MAAM,IAAI,CAAC,CAAC;oBACZ,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC;oBAC7B,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;iBAC7B;aACF,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;SAC3B;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,YAA+B;QAC1C,MAAM,KAAK,GAAwC,YAAmD,CAAC;QACvG,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAE7B,IAAI,KAAK,CAAC,cAAc,EAAE;YACxB,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;CACF;AAtED,sEAsEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Text, NewlineKind } from '@rushstack/node-core-library';\r\nimport { TextRewriter, TextRewriterState } from './TextRewriter';\r\n\r\ninterface INormalizeNewlinesTextRewriterState extends TextRewriterState {\r\n  characterToIgnore: string;\r\n  incompleteLine: boolean;\r\n}\r\n\r\n/**\r\n * Constructor options for {@link NormalizeNewlinesTextRewriter}\r\n *\r\n * @public\r\n */\r\nexport interface INormalizeNewlinesTextRewriterOptions {\r\n  /**\r\n   * Specifies how newlines should be represented in the output stream.\r\n   */\r\n  newlineKind: NewlineKind;\r\n\r\n  /**\r\n   * If `true`, then `NormalizeNewlinesTextRewriter.close()` will append a newline to\r\n   * the output if it ends with an incomplete line.\r\n   *\r\n   * @remarks\r\n   * If the output is an empty string, then a newline will NOT be appended,\r\n   * because writing an empty string does not produce an incomplete line.\r\n   */\r\n  ensureNewlineAtEnd?: boolean;\r\n}\r\n\r\n/**\r\n * For use with {@link TextRewriterTransform}, this rewriter converts all newlines to\r\n * a standard format.\r\n *\r\n * @public\r\n */\r\nexport class NormalizeNewlinesTextRewriter extends TextRewriter {\r\n  /** {@inheritDoc INormalizeNewlinesTextRewriterOptions.newlineKind} */\r\n  public readonly newlineKind: NewlineKind;\r\n\r\n  /**\r\n   * The specific character sequence that will be used when appending newlines.\r\n   */\r\n  public readonly newline: string;\r\n\r\n  /** {@inheritDoc INormalizeNewlinesTextRewriterOptions.ensureNewlineAtEnd} */\r\n  public readonly ensureNewlineAtEnd: boolean;\r\n\r\n  public constructor(options: INormalizeNewlinesTextRewriterOptions) {\r\n    super();\r\n    this.newlineKind = options.newlineKind;\r\n    this.newline = Text.getNewline(options.newlineKind);\r\n    this.ensureNewlineAtEnd = !!options.ensureNewlineAtEnd;\r\n  }\r\n\r\n  public initialize(): TextRewriterState {\r\n    return {\r\n      characterToIgnore: '',\r\n      incompleteLine: false\r\n    } as INormalizeNewlinesTextRewriterState;\r\n  }\r\n\r\n  public process(unknownState: TextRewriterState, text: string): string {\r\n    const state: INormalizeNewlinesTextRewriterState = unknownState as INormalizeNewlinesTextRewriterState;\r\n\r\n    let result: string = '';\r\n\r\n    if (text.length > 0) {\r\n      let i: number = 0;\r\n\r\n      do {\r\n        const c: string = text[i];\r\n        ++i;\r\n\r\n        if (c === state.characterToIgnore) {\r\n          state.characterToIgnore = '';\r\n        } else if (c === '\\r') {\r\n          result += this.newline;\r\n          state.characterToIgnore = '\\n';\r\n          state.incompleteLine = false;\r\n        } else if (c === '\\n') {\r\n          result += this.newline;\r\n          state.characterToIgnore = '\\r';\r\n          state.incompleteLine = false;\r\n        } else {\r\n          result += c;\r\n          state.characterToIgnore = '';\r\n          state.incompleteLine = true;\r\n        }\r\n      } while (i < text.length);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public close(unknownState: TextRewriterState): string {\r\n    const state: INormalizeNewlinesTextRewriterState = unknownState as INormalizeNewlinesTextRewriterState;\r\n    state.characterToIgnore = '';\r\n\r\n    if (state.incompleteLine) {\r\n      state.incompleteLine = false;\r\n      return this.newline;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n"]}