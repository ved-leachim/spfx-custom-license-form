{"version":3,"file":"DiscardStdoutTransform.js","sourceRoot":"","sources":["../src/DiscardStdoutTransform.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,2DAAmF;AASnF,IAAK,KAIJ;AAJD,WAAK,KAAK;IACR,iCAAI,CAAA;IACJ,qDAAc,CAAA;IACd,qDAAc,CAAA;AAChB,CAAC,EAJI,KAAK,KAAL,KAAK,QAIT;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AACH,MAAa,sBAAuB,SAAQ,qCAAiB;IAG3D,YAAmB,OAAuC;QACxD,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;IAC3B,CAAC;IAES,YAAY,CAAC,KAAqB;QAC1C,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACnF;QAED,IAAI,KAAK,CAAC,IAAI,qBAA6B,EAAE;YAC3C,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,cAAc,EAAE;gBACxC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC;iBACpC;aACF;SACF;aAAM,IAAI,KAAK,CAAC,IAAI,qBAA6B,EAAE;YAClD,IAAI,aAAqB,CAAC;YAC1B,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,cAAc,EAAE;gBACxC,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;aACnC;iBAAM;gBACL,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC;aAC5B;YAED,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,IAAI,kBAA0B,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;YAErF,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,IAAI,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;oBACpD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;iBAC1B;qBAAM;oBACL,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC;iBACpC;aACF;SACF;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SACpC;IACH,CAAC;CACF;AAzCD,wDAyCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalChunk, TerminalChunkKind } from './ITerminalChunk';\r\nimport { TerminalTransform, ITerminalTransformOptions } from './TerminalTransform';\r\n\r\n/**\r\n * Constructor options for {@link DiscardStdoutTransform}\r\n *\r\n * @beta\r\n */\r\nexport interface IDiscardStdoutTransformOptions extends ITerminalTransformOptions {}\r\n\r\nenum State {\r\n  Okay,\r\n  StderrFragment,\r\n  InsertLinefeed\r\n}\r\n\r\n/**\r\n * `DiscardStdoutTransform` discards `stdout` chunks while fixing up malformed `stderr` lines.\r\n *\r\n * @remarks\r\n * Suppose that a poorly behaved process produces output like this:\r\n *\r\n * ```ts\r\n * process.stdout.write('Starting operation...\\n');\r\n * process.stderr.write('An error occurred');\r\n * process.stdout.write('\\nFinishing up\\n');\r\n * process.stderr.write('The process completed with errors\\n');\r\n * ```\r\n *\r\n * When `stdout` and `stderr` are combined on the console, the mistake in the output would not be noticeable:\r\n * ```\r\n * Starting operation...\r\n * An error occurred\r\n * Finishing up\r\n * The process completed with errors\r\n * ```\r\n *\r\n * However, if we discard `stdout`, then `stderr` is missing a newline:\r\n * ```\r\n * An error occurredThe process completed with errors\r\n * ```\r\n *\r\n * Tooling scripts can introduce these sorts of problems via edge cases that are difficult to find and fix.\r\n * `DiscardStdoutTransform` can discard the `stdout` stream and fix up `stderr`:\r\n *\r\n * ```\r\n * An error occurred\r\n * The process completed with errors\r\n * ```\r\n *\r\n * @privateRemarks\r\n * This class is experimental and marked as `@beta`.  The algorithm may need some fine-tuning, or there may\r\n * be better solutions to this problem.\r\n *\r\n * @beta\r\n */\r\nexport class DiscardStdoutTransform extends TerminalTransform {\r\n  private _state: State;\r\n\r\n  public constructor(options: IDiscardStdoutTransformOptions) {\r\n    super(options);\r\n\r\n    this._state = State.Okay;\r\n  }\r\n\r\n  protected onWriteChunk(chunk: ITerminalChunk): void {\r\n    if (chunk.text.indexOf('\\r') >= 0) {\r\n      throw new Error('DiscardStdoutTransform expects chunks with normalized newlines');\r\n    }\r\n\r\n    if (chunk.kind === TerminalChunkKind.Stdout) {\r\n      if (this._state === State.StderrFragment) {\r\n        if (chunk.text.indexOf('\\n') >= 0) {\r\n          this._state = State.InsertLinefeed;\r\n        }\r\n      }\r\n    } else if (chunk.kind === TerminalChunkKind.Stderr) {\r\n      let correctedText: string;\r\n      if (this._state === State.InsertLinefeed) {\r\n        correctedText = '\\n' + chunk.text;\r\n      } else {\r\n        correctedText = chunk.text;\r\n      }\r\n\r\n      this.destination.writeChunk({ kind: TerminalChunkKind.Stderr, text: correctedText });\r\n\r\n      if (correctedText.length > 0) {\r\n        if (correctedText[correctedText.length - 1] === '\\n') {\r\n          this._state = State.Okay;\r\n        } else {\r\n          this._state = State.StderrFragment;\r\n        }\r\n      }\r\n    } else {\r\n      this.destination.writeChunk(chunk);\r\n    }\r\n  }\r\n}\r\n"]}