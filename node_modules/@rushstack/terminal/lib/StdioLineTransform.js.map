{"version":3,"file":"StdioLineTransform.js","sourceRoot":"","sources":["../src/StdioLineTransform.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAiE;AAGjE,2DAAmF;AAanF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AACH,MAAa,mBAAoB,SAAQ,qCAAiB;IAMxD,YAAmB,OAAmC;QACpD,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAEhC,IAAI,CAAC,OAAO,GAAG,wBAAI,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,iBAAkB,CAAC,CAAC;IACxE,CAAC;IAES,YAAY,CAAC,KAAqB;QAC1C,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;SAChF;QAED,qFAAqF;QACrF,sBAAsB;QACtB,MAAM,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC;QAChC,IAAI,UAAU,GAAW,CAAC,CAAC;QAE3B,OAAO,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,KAAK,CAAC,IAAI,qBAA6B,EAAE;gBAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAChC;YAED,MAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACxD,IAAI,QAAQ,GAAG,CAAC,EAAE;gBAChB,uCAAuC;gBACvC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACpD,MAAM;aACP;YAED,6BAA6B;YAC7B,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAE9D,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAE/B,cAAc;YACd,UAAU,GAAG,QAAQ,GAAG,CAAC,CAAC;SAC3B;IACH,CAAC;IAES,OAAO;QACf,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YACpC,IAAI,CAAC,uBAAuB,EAAE,CAAC;SAChC;QACD,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,uBAAuB;QAC7B,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,OAAO,CAAC;QAEtC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC1B,IAAI,kBAA0B;gBAC9B,IAAI,EAAE,IAAI,CAAC,gBAAgB;aAC5B,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;gBAC1B,IAAI,kBAA0B;gBAC9B,IAAI,EAAE,IAAI,CAAC,gBAAgB;aAC5B,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAClC,CAAC;CACF;AAxED,kDAwEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Text, NewlineKind } from '@rushstack/node-core-library';\r\n\r\nimport { ITerminalChunk, TerminalChunkKind } from './ITerminalChunk';\r\nimport { TerminalTransform, ITerminalTransformOptions } from './TerminalTransform';\r\n\r\n/**\r\n * Constructor options for {@link StderrLineTransform}\r\n * @beta\r\n */\r\nexport interface IStdioLineTransformOptions extends ITerminalTransformOptions {\r\n  /**\r\n   * Specifies the kind of newline for the output.\r\n   */\r\n  newlineKind?: NewlineKind;\r\n}\r\n\r\n/**\r\n * `StderrLineTransform` normalizes lines that mix characters from `stdout` and `stderr`,\r\n * so that each output line is routed entirely to `stdout` or `stderr`.\r\n *\r\n * @remarks\r\n * IMPORTANT: This transform assumes that its input has been normalized to use `\"\\n\"` newlines.\r\n *\r\n * IMPORTANT: This transform does not produce realtime output, because lines are buffered\r\n * until a newline character is encountered.\r\n *\r\n * Suppose that a poorly behaved process produces output like this:\r\n *\r\n * ```ts\r\n * process.stderr.write('An error occurred, cleaning up');\r\n * process.stdout.write('.'); // (delay)\r\n * process.stdout.write('.'); // (delay)\r\n * process.stdout.write('.');\r\n * process.stdout.write('\\n');\r\n * process.stderr.write('The process completed with errors\\n');\r\n * ```\r\n *\r\n * When `stdout` and `stderr` are combined on the console, the mistake in the output would not be noticeable:\r\n * ```\r\n * An error occurred, cleaning up...\r\n * The process completed with errors\r\n * ```\r\n *\r\n * However, if we discard `stdout`, then `stderr` is malformed:\r\n * ```\r\n * An error occurred, cleaning upThe process completed with errors\r\n * ```\r\n *\r\n * Tooling scripts can introduce these sorts of problems via edge cases that are difficult to find and fix.\r\n *\r\n * `StderrLineTransform` normalizes the output so that if a combined line contains any `stderr` characters,\r\n * then the entire line is routed to `stderr`.  Later, if we discard `stdout`, then the output will\r\n * preserve the appropriate context:\r\n *\r\n * ```\r\n * An error occurred, cleaning up...\r\n * The process completed with errors\r\n * ```\r\n *\r\n * @privateRemarks\r\n * This class is experimental and marked as `@beta`.  The algorithm may need some fine-tuning, or there may\r\n * be better solutions to this problem.\r\n *\r\n * @beta\r\n */\r\nexport class StderrLineTransform extends TerminalTransform {\r\n  private _accumulatedLine: string;\r\n  private _accumulatedStderr: boolean;\r\n\r\n  public readonly newline: string;\r\n\r\n  public constructor(options: IStdioLineTransformOptions) {\r\n    super(options);\r\n\r\n    this._accumulatedLine = '';\r\n    this._accumulatedStderr = false;\r\n\r\n    this.newline = Text.getNewline(options.newlineKind || NewlineKind.Lf);\r\n  }\r\n\r\n  protected onWriteChunk(chunk: ITerminalChunk): void {\r\n    if (chunk.text.indexOf('\\r') >= 0) {\r\n      throw new Error('StderrLineTransform expects chunks with normalized newlines');\r\n    }\r\n\r\n    // After _newlineNormalizerTransform was applied, we can now assume that all newlines\r\n    // use the \"\\n\" string\r\n    const text: string = chunk.text;\r\n    let startIndex: number = 0;\r\n\r\n    while (startIndex < text.length) {\r\n      if (chunk.kind === TerminalChunkKind.Stderr) {\r\n        this._accumulatedStderr = true;\r\n      }\r\n\r\n      const endIndex: number = text.indexOf('\\n', startIndex);\r\n      if (endIndex < 0) {\r\n        // we did not find \\n, so simply append\r\n        this._accumulatedLine += text.substring(startIndex);\r\n        break;\r\n      }\r\n\r\n      // append everything up to \\n\r\n      this._accumulatedLine += text.substring(startIndex, endIndex);\r\n\r\n      this._processAccumulatedLine();\r\n\r\n      // skip the \\n\r\n      startIndex = endIndex + 1;\r\n    }\r\n  }\r\n\r\n  protected onClose(): void {\r\n    if (this._accumulatedLine.length > 0) {\r\n      this._processAccumulatedLine();\r\n    }\r\n    this.autocloseDestination();\r\n  }\r\n\r\n  private _processAccumulatedLine(): void {\r\n    this._accumulatedLine += this.newline;\r\n\r\n    if (this._accumulatedStderr) {\r\n      this.destination.writeChunk({\r\n        kind: TerminalChunkKind.Stderr,\r\n        text: this._accumulatedLine\r\n      });\r\n    } else {\r\n      this.destination.writeChunk({\r\n        kind: TerminalChunkKind.Stdout,\r\n        text: this._accumulatedLine\r\n      });\r\n    }\r\n\r\n    this._accumulatedLine = '';\r\n    this._accumulatedStderr = false;\r\n  }\r\n}\r\n"]}