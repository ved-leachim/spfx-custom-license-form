{"version":3,"file":"CallbackWritable.js","sourceRoot":"","sources":["../src/CallbackWritable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,yDAAsD;AAWtD;;;;;;;;;;;;;GAaG;AACH,MAAa,gBAAiB,SAAQ,mCAAgB;IAGpD,YAAmB,OAAiC;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC;IACxC,CAAC;IAES,YAAY,CAAC,KAAqB;QAC1C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;CACF;AAXD,4CAWC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TerminalWritable } from './TerminalWritable';\r\nimport { ITerminalChunk } from './ITerminalChunk';\r\n\r\n/**\r\n * Constructor options for {@link CallbackWritable}.\r\n * @public\r\n */\r\nexport interface ICallbackWritableOptions {\r\n  onWriteChunk: (chunk: ITerminalChunk) => void;\r\n}\r\n\r\n/**\r\n * This class enables very basic {@link TerminalWritable.onWriteChunk} operations to be implemented\r\n * as a callback function, avoiding the need to define a subclass of `TerminalWritable`.\r\n *\r\n * @remarks\r\n * `CallbackWritable` is provided as a convenience for very simple situations. For most cases,\r\n * it is generally preferable to create a proper subclass.\r\n *\r\n * @privateRemarks\r\n * We intentionally do not expose a callback for {@link TerminalWritable.onClose}; if special\r\n * close behavior is required, it is better to create a subclass.\r\n *\r\n * @public\r\n */\r\nexport class CallbackWritable extends TerminalWritable {\r\n  private readonly _callback: (chunk: ITerminalChunk) => void;\r\n\r\n  public constructor(options: ICallbackWritableOptions) {\r\n    super();\r\n    this._callback = options.onWriteChunk;\r\n  }\r\n\r\n  protected onWriteChunk(chunk: ITerminalChunk): void {\r\n    this._callback(chunk);\r\n  }\r\n}\r\n"]}