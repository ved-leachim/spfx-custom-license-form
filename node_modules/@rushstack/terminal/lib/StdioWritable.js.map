{"version":3,"file":"StdioWritable.js","sourceRoot":"","sources":["../src/StdioWritable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,iDAAmC;AAEnC,yDAAsD;AAEtD;;;;;;;;;GASG;AACH,MAAa,aAAc,SAAQ,mCAAgB;IAGvC,YAAY,CAAC,KAAqB;QAC1C,IAAI,KAAK,CAAC,IAAI,qBAA6B,EAAE;YAC3C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAClC;aAAM,IAAI,KAAK,CAAC,IAAI,qBAA6B,EAAE;YAClD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAClC;IACH,CAAC;;AATH,sCAUC;AATe,sBAAQ,GAAkB,IAAI,aAAa,EAAE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as process from 'process';\r\nimport { ITerminalChunk, TerminalChunkKind } from './ITerminalChunk';\r\nimport { TerminalWritable } from './TerminalWritable';\r\n\r\n/**\r\n * A {@link TerminalWritable} subclass that writes its output directly to the process `stdout` and `stderr`\r\n * streams.\r\n *\r\n * @remarks\r\n * This is the standard output target for a process.  You normally do not need to construct\r\n * this class; the {@link StdioWritable.\"instance\"} singleton can be used instead.\r\n *\r\n * @public\r\n */\r\nexport class StdioWritable extends TerminalWritable {\r\n  public static instance: StdioWritable = new StdioWritable();\r\n\r\n  protected onWriteChunk(chunk: ITerminalChunk): void {\r\n    if (chunk.kind === TerminalChunkKind.Stdout) {\r\n      process.stdout.write(chunk.text);\r\n    } else if (chunk.kind === TerminalChunkKind.Stderr) {\r\n      process.stderr.write(chunk.text);\r\n    }\r\n  }\r\n}\r\n"]}