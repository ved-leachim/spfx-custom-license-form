{"version":3,"file":"TerminalTransform.js","sourceRoot":"","sources":["../src/TerminalTransform.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,yDAAgF;AA2BhF;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAsB,iBAAkB,SAAQ,mCAAgB;IAO9D,YAAmB,OAAkC;QACnD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC,OAAO,CAAC,2BAA2B,CAAC;IAC3E,CAAC;IAED,gBAAgB;IACN,OAAO;QACf,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;OAWG;IACO,oBAAoB;QAC5B,IAAI,CAAC,IAAI,CAAC,2BAA2B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE;YAC3E,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;IACH,CAAC;CACF;AAnCD,8CAmCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TerminalWritable, ITerminalWritableOptions } from './TerminalWritable';\r\n\r\n/**\r\n * Constructor options for {@link TerminalTransform}.\r\n *\r\n * @public\r\n */\r\nexport interface ITerminalTransformOptions extends ITerminalWritableOptions {\r\n  /**\r\n   * The target `TerminalWritable` that the `TerminalTransform` will write its\r\n   * output to.\r\n   */\r\n  destination: TerminalWritable;\r\n\r\n  /**\r\n   * Prevents the {@link TerminalTransform.destination} object from being\r\n   * closed automatically when the transform is closed.\r\n   *\r\n   * @remarks\r\n   * When a transform is closed, normally it will automatically close its destination\r\n   * `TerminalWritable` object.  There are two ways to prevent that: either by setting\r\n   * `preventDestinationAutoclose` to `true` for the transform, or by setting\r\n   * {@link TerminalWritable.preventAutoclose} to `true` for the `destination` object.\r\n   */\r\n  preventDestinationAutoclose?: boolean;\r\n}\r\n\r\n/**\r\n * The abstract base class for {@link TerminalWritable} objects that receive an input,\r\n * transform it somehow, and then write the output to another `TerminalWritable`.\r\n *\r\n * @remarks\r\n *\r\n * The `TerminalTransform` and {@link SplitterTransform} base classes formalize the idea\r\n * of modeling data flow as a directed acyclic graph of reusable transforms, whose\r\n * final outputs are `TerminalWritable` objects.\r\n *\r\n * The design is based loosely on the `WritableStream` and `TransformStream` classes from\r\n * the system {@link https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Concepts\r\n * | Streams API}, except that instead of asynchronous byte streams, the `TerminalWritable`\r\n * system synchronously transmits human readable messages intended to be rendered on a\r\n * text console or log file.\r\n *\r\n * The main feature of the `TerminalTransform` class is its {@link TerminalTransform.destination}\r\n * property, which tracks the next link in the graph.\r\n *\r\n * @public\r\n */\r\nexport abstract class TerminalTransform extends TerminalWritable {\r\n  /** {@inheritDoc ITerminalTransformOptions.destination} */\r\n  public readonly destination: TerminalWritable;\r\n\r\n  /** {@inheritDoc ITerminalTransformOptions.preventDestinationAutoclose} */\r\n  public readonly preventDestinationAutoclose: boolean;\r\n\r\n  public constructor(options: ITerminalTransformOptions) {\r\n    super();\r\n    this.destination = options.destination;\r\n    this.preventDestinationAutoclose = !!options.preventDestinationAutoclose;\r\n  }\r\n\r\n  /** @override */\r\n  protected onClose(): void {\r\n    this.autocloseDestination();\r\n  }\r\n\r\n  /**\r\n   * The default implementation of {@link TerminalTransform.onClose} calls this\r\n   * method, which closes the {@link TerminalTransform.destination} if appropriate.\r\n   *\r\n   * @remarks\r\n   * The destination will not be closed if its {@link TerminalWritable.preventAutoclose}\r\n   * property is `true`.  The destination will not be closed if\r\n   * {@link ITerminalTransformOptions.preventDestinationAutoclose}\r\n   * is `true`.\r\n   *\r\n   * @sealed\r\n   */\r\n  protected autocloseDestination(): void {\r\n    if (!this.preventDestinationAutoclose && !this.destination.preventAutoclose) {\r\n      this.destination.close();\r\n    }\r\n  }\r\n}\r\n"]}