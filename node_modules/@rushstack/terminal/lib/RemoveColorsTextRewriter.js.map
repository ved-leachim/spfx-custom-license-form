{"version":3,"file":"RemoveColorsTextRewriter.js","sourceRoot":"","sources":["../src/RemoveColorsTextRewriter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { AnsiEscape } from '@rushstack/node-core-library';\r\nimport { TextRewriter, TextRewriterState } from './TextRewriter';\r\n\r\nenum State {\r\n  // Buffer is empty, and we're looking for the ESC character\r\n  Start,\r\n  // We're looking for the '[' character\r\n  AwaitingBracket,\r\n  // We're reading the codes after the '[' character\r\n  ReadingCodes\r\n}\r\n\r\ninterface IRemoveColorsTextRewriterState extends TextRewriterState {\r\n  buffer: string;\r\n  parseState: State;\r\n}\r\n\r\n/**\r\n * For use with {@link TextRewriterTransform}, this rewriter removes ANSI escape codes\r\n * including colored text.\r\n *\r\n * @remarks\r\n * The implementation also removes other ANSI escape codes such as cursor positioning.\r\n * The specific set of affected codes may be adjusted in the future.\r\n *\r\n * @public\r\n */\r\nexport class RemoveColorsTextRewriter extends TextRewriter {\r\n  public initialize(): TextRewriterState {\r\n    return { buffer: '', parseState: State.Start } as IRemoveColorsTextRewriterState;\r\n  }\r\n\r\n  public process(unknownState: TextRewriterState, text: string): string {\r\n    const state: IRemoveColorsTextRewriterState = unknownState as IRemoveColorsTextRewriterState;\r\n\r\n    // We will be matching AnsiEscape._csiRegExp:\r\n    //\r\n    //  /\\x1b\\[([\\x30-\\x3f]*[\\x20-\\x2f]*[\\x40-\\x7e])/gu\r\n    //\r\n    const ESC: string = '\\x1b';\r\n\r\n    let result: string = '';\r\n    let index: number = 0;\r\n\r\n    while (index < text.length) {\r\n      if (state.parseState === State.Start) {\r\n        // The buffer is empty, which means we haven't found anything yet\r\n\r\n        const csiIndex: number = text.indexOf(ESC, index);\r\n        if (csiIndex < 0) {\r\n          // We reached the end of \"text\" without finding another CSI prefix\r\n          result += text.substring(index);\r\n          break;\r\n        }\r\n\r\n        // Append everything up to the CSI prefix\r\n        result += text.substring(index, csiIndex);\r\n\r\n        // Save the partial match in the buffer\r\n        state.buffer = ESC;\r\n        index = csiIndex + 1;\r\n        state.parseState = State.AwaitingBracket;\r\n      } else {\r\n        // The buffer has characters, which means we started matching a partial sequence\r\n\r\n        // Read another character into the buffer\r\n        const c: string = text[index];\r\n        ++index;\r\n        state.buffer += c;\r\n\r\n        if (state.parseState === State.AwaitingBracket) {\r\n          if (c === '[') {\r\n            state.parseState = State.ReadingCodes;\r\n          } else {\r\n            // Failed to match, so append the buffer and start over\r\n            result += state.buffer;\r\n            state.buffer = '';\r\n            state.parseState = State.Start;\r\n          }\r\n        } else {\r\n          // state.state === State.ReadingCodes\r\n\r\n          // Stop when we reach any character that is not [\\x30-\\x3f] or [\\x20-\\x2f]\r\n          const code: number = c.charCodeAt(0);\r\n          if (code < 0x20 || code > 0x3f) {\r\n            result += AnsiEscape.removeCodes(state.buffer);\r\n            state.buffer = '';\r\n            state.parseState = State.Start;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public close(unknownState: TextRewriterState): string {\r\n    const state: IRemoveColorsTextRewriterState = unknownState as IRemoveColorsTextRewriterState;\r\n\r\n    const result: string = state.buffer;\r\n    state.buffer = '';\r\n    return result;\r\n  }\r\n}\r\n"]}