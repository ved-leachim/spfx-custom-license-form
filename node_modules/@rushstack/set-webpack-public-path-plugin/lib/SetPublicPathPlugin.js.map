{"version":3,"file":"SetPublicPathPlugin.js","sourceRoot":"","sources":["../src/SetPublicPathPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\nimport { cloneDeep, escapeRegExp } from 'lodash';\r\nimport * as Webpack from 'webpack';\r\nimport * as Tapable from 'tapable';\r\n\r\nimport { IInternalOptions, getSetPublicPathCode } from './codeGenerator';\r\n\r\n/**\r\n * The base options for setting the webpack public path at runtime.\r\n *\r\n * @public\r\n */\r\nexport interface ISetWebpackPublicPathOptions {\r\n  /**\r\n   * Use the System.baseURL property if it is defined.\r\n   */\r\n  systemJs?: boolean;\r\n\r\n  /**\r\n   * Use the specified string as a URL prefix after the SystemJS path or the publicPath option.\r\n   * If neither systemJs nor publicPath is defined, this option will not apply and an exception will be thrown.\r\n   */\r\n  urlPrefix?: string;\r\n\r\n  /**\r\n   * Use the specified path as the base public path.\r\n   */\r\n  publicPath?: string;\r\n\r\n  /**\r\n   * Check for a variable with this name on the page and use its value as a regular expression against script paths to\r\n   *  the bundle's script. If a value foo is passed into regexVariable, the produced bundle will look for a variable\r\n   *  called foo during initialization, and if a foo variable is found, use its value as a regular expression to detect\r\n   *  the bundle's script.\r\n   *\r\n   * See the README for more information.\r\n   */\r\n  regexVariable?: string;\r\n\r\n  /**\r\n   * A function that returns a snippet of code that manipulates the variable with the name that's specified in the\r\n   *  parameter. If this parameter isn't provided, no post-processing code is included. The variable must be modified\r\n   *  in-place - the processed value should not be returned.\r\n   *\r\n   * See the README for more information.\r\n   */\r\n  getPostProcessScript?: (varName: string) => string;\r\n\r\n  /**\r\n   * If true, find the last script matching the regexVariable (if it is set). If false, find the first matching script.\r\n   * This can be useful if there are multiple scripts loaded in the DOM that match the regexVariable.\r\n   */\r\n  preferLastFoundScript?: boolean;\r\n\r\n  /**\r\n   * If true, always include the public path-setting code. Don't try to detect if any chunks or assets are present.\r\n   */\r\n  skipDetection?: boolean;\r\n}\r\n\r\n/**\r\n * Options for the set-webpack-public-path plugin.\r\n *\r\n * @public\r\n */\r\nexport interface ISetWebpackPublicPathPluginOptions extends ISetWebpackPublicPathOptions {\r\n  /**\r\n   * An object that describes how the public path should be discovered.\r\n   */\r\n  scriptName?: {\r\n    /**\r\n     * If set to true, use the webpack generated asset's name. This option is not compatible with\r\n     * andy other scriptName options.\r\n     */\r\n    useAssetName?: boolean;\r\n\r\n    /**\r\n     * A regular expression expressed as a string to be applied to all script paths on the page.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * If true, the name property is tokenized.\r\n     *\r\n     * See the README for more information.\r\n     */\r\n    isTokenized?: boolean;\r\n  };\r\n}\r\n\r\ninterface IAsset {\r\n  size(): number;\r\n  source(): string;\r\n}\r\n\r\ninterface IExtendedMainTemplate {\r\n  hooks: {\r\n    jsonpScript?: Tapable.SyncWaterfallHook<string, Webpack.compilation.Chunk, string>;\r\n    requireExtensions: Tapable.SyncWaterfallHook<string, Webpack.compilation.Chunk, string>;\r\n    startup: Tapable.SyncHook<string, Webpack.compilation.Chunk, string>;\r\n  };\r\n  requireFn: string;\r\n}\r\n\r\nconst SHOULD_REPLACE_ASSET_NAME_TOKEN: unique symbol = Symbol(\r\n  'set-public-path-plugin-should-replace-asset-name'\r\n);\r\n\r\ninterface IExtendedChunk extends Webpack.compilation.Chunk {\r\n  [SHOULD_REPLACE_ASSET_NAME_TOKEN]: boolean;\r\n  forEachModule(callback: (module: Webpack.compilation.Module) => void): void;\r\n}\r\n\r\ninterface IStartupCodeOptions {\r\n  source: string;\r\n  chunk: IExtendedChunk;\r\n  hash: string;\r\n  requireFn: string;\r\n}\r\n\r\nconst PLUGIN_NAME: string = 'set-webpack-public-path';\r\n\r\nconst ASSET_NAME_TOKEN: string = '-ASSET-NAME-c0ef4f86-b570-44d3-b210-4428c5b7825c';\r\n\r\nconst ASSET_NAME_TOKEN_REGEX: RegExp = new RegExp(ASSET_NAME_TOKEN);\r\n\r\n/**\r\n * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,\r\n *  optionally appended to the SystemJs baseURL property.\r\n *\r\n * @public\r\n */\r\nexport class SetPublicPathPlugin implements Webpack.Plugin {\r\n  public options: ISetWebpackPublicPathPluginOptions;\r\n\r\n  public constructor(options: ISetWebpackPublicPathPluginOptions) {\r\n    this.options = options;\r\n\r\n    if (options.scriptName) {\r\n      if (options.scriptName.useAssetName && options.scriptName.name) {\r\n        throw new Error('scriptName.userAssetName and scriptName.name must not be used together');\r\n      } else if (options.scriptName.isTokenized && !options.scriptName.name) {\r\n        throw new Error('scriptName.isTokenized is only valid if scriptName.name is set');\r\n      }\r\n    }\r\n  }\r\n\r\n  public apply(compiler: Webpack.Compiler): void {\r\n    const isWebpack4: boolean = !!compiler.hooks;\r\n\r\n    if (!isWebpack4) {\r\n      throw new Error(`The ${SetPublicPathPlugin.name} plugin requires Webpack 4`);\r\n    }\r\n\r\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation: Webpack.compilation.Compilation) => {\r\n      const mainTemplate: IExtendedMainTemplate = (compilation.mainTemplate as unknown) as IExtendedMainTemplate;\r\n      mainTemplate.hooks.startup.tap(\r\n        PLUGIN_NAME,\r\n        (source: string, chunk: Webpack.compilation.Chunk, hash: string) => {\r\n          const extendedChunk: IExtendedChunk = chunk as IExtendedChunk;\r\n          const assetOrChunkFound: boolean =\r\n            !!this.options.skipDetection || this._detectAssetsOrChunks(extendedChunk);\r\n          if (assetOrChunkFound) {\r\n            return this._getStartupCode({\r\n              source,\r\n              chunk: extendedChunk,\r\n              hash,\r\n              requireFn: mainTemplate.requireFn\r\n            });\r\n          } else {\r\n            return source;\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n    compiler.hooks.emit.tap(PLUGIN_NAME, (compilation: Webpack.compilation.Compilation) => {\r\n      for (const chunkGroup of compilation.chunkGroups) {\r\n        for (const chunk of chunkGroup.chunks) {\r\n          if (chunk[SHOULD_REPLACE_ASSET_NAME_TOKEN]) {\r\n            for (const assetFilename of chunk.files) {\r\n              let escapedAssetFilename: string;\r\n              if (assetFilename.match(/\\.map$/)) {\r\n                escapedAssetFilename = assetFilename.substr(0, assetFilename.length - 4 /* '.map'.length */); // Trim the \".map\" extension\r\n                escapedAssetFilename = escapeRegExp(escapedAssetFilename);\r\n                escapedAssetFilename = JSON.stringify(escapedAssetFilename); // source in sourcemaps is JSON-encoded\r\n                escapedAssetFilename = escapedAssetFilename.substring(1, escapedAssetFilename.length - 1); // Trim the quotes from the JSON encoding\r\n              } else {\r\n                escapedAssetFilename = escapeRegExp(assetFilename);\r\n              }\r\n\r\n              const asset: IAsset = compilation.assets[assetFilename];\r\n              const originalAssetSource: string = asset.source();\r\n              const originalAssetSize: number = asset.size();\r\n\r\n              const newAssetSource: string = originalAssetSource.replace(\r\n                ASSET_NAME_TOKEN_REGEX,\r\n                escapedAssetFilename\r\n              );\r\n              const sizeDifference: number = assetFilename.length - ASSET_NAME_TOKEN.length;\r\n              asset.source = () => newAssetSource;\r\n              asset.size = () => originalAssetSize + sizeDifference;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _detectAssetsOrChunks(chunk: IExtendedChunk): boolean {\r\n    for (const chunkGroup of chunk.groupsIterable) {\r\n      if (chunkGroup.childrenIterable.size > 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    for (const innerModule of chunk.modulesIterable) {\r\n      if (innerModule.buildInfo.assets && Object.keys(innerModule.buildInfo.assets).length > 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private _getStartupCode(options: IStartupCodeOptions): string {\r\n    const moduleOptions: IInternalOptions = cloneDeep(this.options);\r\n\r\n    // If this module has ownership over any chunks or assets, inject the public path code\r\n    moduleOptions.webpackPublicPathVariable = `${options.requireFn}.p`;\r\n    moduleOptions.linePrefix = '  ';\r\n\r\n    if (this.options.scriptName) {\r\n      if (this.options.scriptName.name) {\r\n        moduleOptions.regexName = this.options.scriptName.name;\r\n        if (this.options.scriptName.isTokenized) {\r\n          moduleOptions.regexName = moduleOptions.regexName\r\n            .replace(/\\[name\\]/g, escapeRegExp(options.chunk.name))\r\n            .replace(/\\[hash\\]/g, options.chunk.renderedHash || '');\r\n        }\r\n      } else if (this.options.scriptName.useAssetName) {\r\n        options.chunk[SHOULD_REPLACE_ASSET_NAME_TOKEN] = true;\r\n\r\n        moduleOptions.regexName = ASSET_NAME_TOKEN;\r\n      }\r\n    }\r\n\r\n    return [\r\n      '// Set the webpack public path',\r\n      '(function () {',\r\n      getSetPublicPathCode(moduleOptions, console.error),\r\n      '})();',\r\n      '',\r\n      options.source\r\n    ].join(EOL);\r\n  }\r\n}\r\n"]}