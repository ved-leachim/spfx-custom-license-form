{"version":3,"file":"LoaderFactory.js","sourceRoot":"","sources":["../../src/loaders/LoaderFactory.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAG3D,0DAA4C;AAW5C,SAAgB,aAAa,CAC3B,WAAuF;IAEvF,OAAO,UAAsC,OAAwB;QACnE,MAAM,OAAO,GAAa,WAAW,CAAC,UAAU,CAAC,IAAI,CAAa,CAAC;QACnE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;SAC9B;QAED,MAAM,YAAY,GAAkB,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAChG,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC,CAAC;AACJ,CAAC;AAZD,sCAYC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { loader } from 'webpack';\r\nimport * as loaderUtils from 'loader-utils';\r\nimport { NewlineKind } from '@rushstack/node-core-library';\r\n\r\nexport interface IBaseLoaderOptions {\r\n  resxNewlineNormalization: NewlineKind | undefined;\r\n}\r\n\r\nexport interface ILoaderResult {\r\n  [stringName: string]: string;\r\n}\r\n\r\nexport function loaderFactory<TOptions extends IBaseLoaderOptions>(\r\n  innerLoader: (locFilePath: string, content: string, options: TOptions) => ILoaderResult\r\n): loader.Loader {\r\n  return function (this: loader.LoaderContext, content: string | Buffer): string {\r\n    const options: TOptions = loaderUtils.getOptions(this) as TOptions;\r\n    if (typeof content !== 'string') {\r\n      content = content.toString();\r\n    }\r\n\r\n    const resultObject: ILoaderResult = innerLoader.call(this, this.resourcePath, content, options);\r\n    return JSON.stringify(resultObject);\r\n  };\r\n}\r\n"]}