{"version":3,"file":"LocalizationPlugin.js","sourceRoot":"","sources":["../src/LocalizationPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { JsonFile, FileSystem, Terminal, NewlineKind } from '@rushstack/node-core-library';\r\nimport * as Webpack from 'webpack';\r\nimport * as path from 'path';\r\nimport * as Tapable from 'tapable';\r\n\r\nimport { Constants } from './utilities/Constants';\r\nimport {\r\n  IWebpackConfigurationUpdaterOptions,\r\n  WebpackConfigurationUpdater\r\n} from './WebpackConfigurationUpdater';\r\nimport {\r\n  ILocalizationPluginOptions,\r\n  ILocalizationStats,\r\n  ILocaleFileData,\r\n  ILocalizationFile,\r\n  ILocaleElementMap,\r\n  ILocalizedStrings,\r\n  IResolvedMissingTranslations\r\n} from './interfaces';\r\nimport { ILocalizedWebpackChunk } from './webpackInterfaces';\r\nimport { LocFileTypingsGenerator } from './LocFileTypingsGenerator';\r\nimport { Pseudolocalization } from './Pseudolocalization';\r\nimport { EntityMarker } from './utilities/EntityMarker';\r\nimport { IAsset, IProcessAssetResult, AssetProcessor, PLACEHOLDER_REGEX } from './AssetProcessor';\r\nimport { LocFileParser } from './utilities/LocFileParser';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IStringPlaceholder {\r\n  value: string;\r\n  suffix: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IAddDefaultLocFileResult {\r\n  /**\r\n   * A list of paths to translation files that were loaded\r\n   */\r\n  additionalLoadedFilePaths: string[];\r\n\r\n  errors: Error[];\r\n}\r\n\r\ninterface IExtendedMainTemplate {\r\n  hooks: {\r\n    assetPath: Tapable.SyncHook<string, IAssetPathOptions>;\r\n  };\r\n}\r\n\r\ninterface IExtendedConfiguration extends Webpack.compilation.Compilation {\r\n  options: Webpack.Configuration;\r\n}\r\n\r\ninterface IExtendedChunkGroup extends Webpack.compilation.ChunkGroup {\r\n  getChildren(): Webpack.compilation.Chunk[];\r\n}\r\n\r\ninterface IExtendedChunk extends Webpack.compilation.Chunk {\r\n  filenameTemplate: string;\r\n}\r\n\r\ninterface IAssetPathOptions {\r\n  chunk: Webpack.compilation.Chunk;\r\n  contentHashType: string;\r\n  filename: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IStringSerialNumberData {\r\n  values: ILocaleElementMap;\r\n  locFilePath: string;\r\n  stringName: string;\r\n}\r\n\r\nconst PLUGIN_NAME: string = 'localization';\r\n\r\n/**\r\n * This plugin facilitates localization in webpack.\r\n *\r\n * @public\r\n */\r\nexport class LocalizationPlugin implements Webpack.Plugin {\r\n  /**\r\n   * @internal\r\n   */\r\n  public stringKeys: Map<string, IStringPlaceholder> = new Map<string, IStringPlaceholder>();\r\n\r\n  private _options: ILocalizationPluginOptions;\r\n  private _resolvedTranslatedStringsFromOptions!: ILocalizedStrings;\r\n  private _filesToIgnore: Set<string> = new Set<string>();\r\n  private _stringPlaceholderCounter: number = 0;\r\n  private _stringPlaceholderMap: Map<string, IStringSerialNumberData> = new Map<\r\n    string,\r\n    IStringSerialNumberData\r\n  >();\r\n  private _locales: Set<string> = new Set<string>();\r\n  private _passthroughLocaleName!: string;\r\n  private _defaultLocale!: string;\r\n  private _noStringsLocaleName!: string;\r\n  private _fillMissingTranslationStrings!: boolean;\r\n  private _pseudolocalizers: Map<string, (str: string) => string> = new Map<\r\n    string,\r\n    (str: string) => string\r\n  >();\r\n  private _resxNewlineNormalization: NewlineKind | undefined;\r\n\r\n  /**\r\n   * The outermost map's keys are the locale names.\r\n   * The middle map's keys are the resolved, file names.\r\n   * The innermost map's keys are the string identifiers and its values are the string values.\r\n   */\r\n  private _resolvedLocalizedStrings: Map<string, Map<string, Map<string, string>>> = new Map<\r\n    string,\r\n    Map<string, Map<string, string>>\r\n  >();\r\n\r\n  public constructor(options: ILocalizationPluginOptions) {\r\n    this._options = options;\r\n  }\r\n\r\n  public apply(compiler: Webpack.Compiler): void {\r\n    const isWebpack4: boolean = !!compiler.hooks;\r\n\r\n    if (!isWebpack4) {\r\n      throw new Error(`The ${LocalizationPlugin.name} plugin requires Webpack 4`);\r\n    }\r\n\r\n    if (this._options.typingsOptions && compiler.context) {\r\n      if (\r\n        this._options.typingsOptions.generatedTsFolder &&\r\n        !path.isAbsolute(this._options.typingsOptions.generatedTsFolder)\r\n      ) {\r\n        this._options.typingsOptions.generatedTsFolder = path.resolve(\r\n          compiler.context,\r\n          this._options.typingsOptions.generatedTsFolder\r\n        );\r\n      }\r\n\r\n      if (\r\n        this._options.typingsOptions.sourceRoot &&\r\n        !path.isAbsolute(this._options.typingsOptions.sourceRoot)\r\n      ) {\r\n        this._options.typingsOptions.sourceRoot = path.resolve(\r\n          compiler.context,\r\n          this._options.typingsOptions.sourceRoot\r\n        );\r\n      }\r\n    }\r\n\r\n    // https://github.com/webpack/webpack-dev-server/pull/1929/files#diff-15fb51940da53816af13330d8ce69b4eR66\r\n    const isWebpackDevServer: boolean = process.env.WEBPACK_DEV_SERVER === 'true';\r\n\r\n    const { errors, warnings } = this._initializeAndValidateOptions(compiler.options, isWebpackDevServer);\r\n\r\n    let typingsPreprocessor: LocFileTypingsGenerator | undefined;\r\n    if (this._options.typingsOptions) {\r\n      typingsPreprocessor = new LocFileTypingsGenerator({\r\n        srcFolder: this._options.typingsOptions.sourceRoot || compiler.context,\r\n        generatedTsFolder: this._options.typingsOptions.generatedTsFolder,\r\n        exportAsDefault: this._options.typingsOptions.exportAsDefault,\r\n        filesToIgnore: this._options.filesToIgnore\r\n      });\r\n    } else {\r\n      typingsPreprocessor = undefined;\r\n    }\r\n\r\n    const webpackConfigurationUpdaterOptions: IWebpackConfigurationUpdaterOptions = {\r\n      pluginInstance: this,\r\n      configuration: compiler.options,\r\n      filesToIgnore: this._filesToIgnore,\r\n      localeNameOrPlaceholder: Constants.LOCALE_NAME_PLACEHOLDER,\r\n      resxNewlineNormalization: this._resxNewlineNormalization\r\n    };\r\n\r\n    if (errors.length > 0 || warnings.length > 0) {\r\n      compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation: Webpack.compilation.Compilation) => {\r\n        compilation.errors.push(...errors);\r\n        compilation.warnings.push(...warnings);\r\n      });\r\n\r\n      if (errors.length > 0) {\r\n        // If there are any errors, just pass through the resources in source and don't do any\r\n        // additional configuration\r\n        WebpackConfigurationUpdater.amendWebpackConfigurationForInPlaceLocFiles(\r\n          webpackConfigurationUpdaterOptions\r\n        );\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (isWebpackDevServer) {\r\n      if (typingsPreprocessor) {\r\n        compiler.hooks.afterEnvironment.tap(PLUGIN_NAME, () => typingsPreprocessor!.runWatcherAsync());\r\n\r\n        if (!compiler.options.plugins) {\r\n          compiler.options.plugins = [];\r\n        }\r\n\r\n        compiler.options.plugins.push(\r\n          new Webpack.WatchIgnorePlugin([this._options.typingsOptions!.generatedTsFolder])\r\n        );\r\n      }\r\n\r\n      WebpackConfigurationUpdater.amendWebpackConfigurationForInPlaceLocFiles(\r\n        webpackConfigurationUpdaterOptions\r\n      );\r\n    } else {\r\n      if (typingsPreprocessor) {\r\n        compiler.hooks.beforeRun.tapPromise(\r\n          PLUGIN_NAME,\r\n          async () => await typingsPreprocessor!.generateTypingsAsync()\r\n        );\r\n      }\r\n\r\n      WebpackConfigurationUpdater.amendWebpackConfigurationForMultiLocale(webpackConfigurationUpdaterOptions);\r\n\r\n      if (errors.length === 0) {\r\n        compiler.hooks.thisCompilation.tap(\r\n          PLUGIN_NAME,\r\n          (untypedCompilation: Webpack.compilation.Compilation) => {\r\n            const compilation: IExtendedConfiguration = untypedCompilation as IExtendedConfiguration;\r\n            ((compilation.mainTemplate as unknown) as IExtendedMainTemplate).hooks.assetPath.tap(\r\n              PLUGIN_NAME,\r\n              (assetPath: string, options: IAssetPathOptions) => {\r\n                if (\r\n                  options.contentHashType === 'javascript' &&\r\n                  assetPath.match(Constants.LOCALE_FILENAME_TOKEN_REGEX)\r\n                ) {\r\n                  // Does this look like an async chunk URL generator?\r\n                  if (typeof options.chunk.id === 'string' && (options.chunk.id as string).match(/^\\\" \\+/)) {\r\n                    return assetPath.replace(\r\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\r\n                      `\" + ${Constants.JSONP_PLACEHOLDER} + \"`\r\n                    );\r\n                  } else {\r\n                    return assetPath.replace(\r\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\r\n                      Constants.LOCALE_NAME_PLACEHOLDER\r\n                    );\r\n                  }\r\n                } else if (assetPath.match(Constants.NO_LOCALE_SOURCE_MAP_FILENAME_TOKEN_REGEX)) {\r\n                  // Replace the placeholder with the [locale] token for sourcemaps\r\n                  const deLocalizedFilename: string = options.filename.replace(\r\n                    PLACEHOLDER_REGEX,\r\n                    Constants.LOCALE_FILENAME_TOKEN\r\n                  );\r\n                  return assetPath.replace(\r\n                    Constants.NO_LOCALE_SOURCE_MAP_FILENAME_TOKEN_REGEX,\r\n                    deLocalizedFilename\r\n                  );\r\n                } else {\r\n                  return assetPath;\r\n                }\r\n              }\r\n            );\r\n\r\n            compilation.hooks.optimizeChunks.tap(\r\n              PLUGIN_NAME,\r\n              (\r\n                untypedChunks: Webpack.compilation.Chunk[],\r\n                untypedChunkGroups: Webpack.compilation.ChunkGroup[]\r\n              ) => {\r\n                const chunks: IExtendedChunk[] = untypedChunks as IExtendedChunk[];\r\n                const chunkGroups: IExtendedChunkGroup[] = untypedChunkGroups as IExtendedChunkGroup[];\r\n\r\n                let chunksHaveAnyChildren: boolean = false;\r\n                for (const chunkGroup of chunkGroups) {\r\n                  const children: Webpack.compilation.Chunk[] = chunkGroup.getChildren();\r\n                  if (children.length > 0) {\r\n                    chunksHaveAnyChildren = true;\r\n                    break;\r\n                  }\r\n                }\r\n\r\n                if (\r\n                  chunksHaveAnyChildren &&\r\n                  (!compilation.options.output ||\r\n                    !compilation.options.output.chunkFilename ||\r\n                    compilation.options.output.chunkFilename.indexOf(Constants.LOCALE_FILENAME_TOKEN) === -1)\r\n                ) {\r\n                  compilation.errors.push(\r\n                    new Error(\r\n                      'The configuration.output.chunkFilename property must be provided and must include ' +\r\n                        `the ${Constants.LOCALE_FILENAME_TOKEN} placeholder`\r\n                    )\r\n                  );\r\n\r\n                  return;\r\n                }\r\n\r\n                for (const chunk of chunks) {\r\n                  // See if the chunk contains any localized modules or loads any localized chunks\r\n                  const localizedChunk: boolean = this._chunkHasLocalizedModules(chunk);\r\n\r\n                  // Change the chunk's name to include either the locale name or the locale name for chunks without strings\r\n                  const replacementValue: string = localizedChunk\r\n                    ? Constants.LOCALE_NAME_PLACEHOLDER\r\n                    : this._noStringsLocaleName;\r\n                  if (chunk.hasRuntime()) {\r\n                    chunk.filenameTemplate = (compilation.options.output!.filename as string).replace(\r\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\r\n                      replacementValue\r\n                    );\r\n                  } else {\r\n                    chunk.filenameTemplate = compilation.options.output!.chunkFilename!.replace(\r\n                      Constants.LOCALE_FILENAME_TOKEN_REGEX,\r\n                      replacementValue\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n\r\n        compiler.hooks.emit.tap(PLUGIN_NAME, (compilation: Webpack.compilation.Compilation) => {\r\n          const localizationStats: ILocalizationStats = {\r\n            entrypoints: {},\r\n            namedChunkGroups: {}\r\n          };\r\n\r\n          const alreadyProcessedAssets: Set<string> = new Set<string>();\r\n          const hotUpdateRegex: RegExp = /\\.hot-update\\.js$/;\r\n\r\n          for (const untypedChunk of compilation.chunks) {\r\n            const chunk: ILocalizedWebpackChunk = untypedChunk;\r\n            const chunkFilesSet: Set<string> = new Set(chunk.files);\r\n            function processChunkJsFile(callback: (chunkFilename: string) => void): void {\r\n              let alreadyProcessedAFileInThisChunk: boolean = false;\r\n              for (const chunkFilename of chunk.files) {\r\n                if (\r\n                  chunkFilename.endsWith('.js') && // Ensure this is a JS file\r\n                  !hotUpdateRegex.test(chunkFilename) && // Ensure this is not a webpack hot update\r\n                  !alreadyProcessedAssets.has(chunkFilename) // Ensure this isn't a vendor chunk we've already processed\r\n                ) {\r\n                  if (alreadyProcessedAFileInThisChunk) {\r\n                    throw new Error(\r\n                      `Found more than one JS file in chunk \"${chunk.name}\". This is not expected.`\r\n                    );\r\n                  }\r\n\r\n                  alreadyProcessedAFileInThisChunk = true;\r\n                  alreadyProcessedAssets.add(chunkFilename);\r\n                  callback(chunkFilename);\r\n                }\r\n              }\r\n            }\r\n\r\n            if (this._chunkHasLocalizedModules(chunk)) {\r\n              processChunkJsFile((chunkFilename) => {\r\n                if (chunkFilename.indexOf(Constants.LOCALE_NAME_PLACEHOLDER) === -1) {\r\n                  throw new Error(\r\n                    `Asset ${chunkFilename} is expected to be localized, but is missing a locale placeholder`\r\n                  );\r\n                }\r\n\r\n                const asset: IAsset = compilation.assets[chunkFilename];\r\n\r\n                const resultingAssets: Map<\r\n                  string,\r\n                  IProcessAssetResult\r\n                > = AssetProcessor.processLocalizedAsset({\r\n                  plugin: this,\r\n                  compilation,\r\n                  assetName: chunkFilename,\r\n                  asset,\r\n                  chunk,\r\n                  chunkHasLocalizedModules: this._chunkHasLocalizedModules.bind(this),\r\n                  locales: this._locales,\r\n                  noStringsLocaleName: this._noStringsLocaleName,\r\n                  fillMissingTranslationStrings: this._fillMissingTranslationStrings,\r\n                  defaultLocale: this._defaultLocale\r\n                });\r\n\r\n                // Delete the existing asset because it's been renamed\r\n                delete compilation.assets[chunkFilename];\r\n                chunkFilesSet.delete(chunkFilename);\r\n\r\n                const localizedChunkAssets: ILocaleElementMap = {};\r\n                for (const [locale, newAsset] of resultingAssets) {\r\n                  compilation.assets[newAsset.filename] = newAsset.asset;\r\n                  localizedChunkAssets[locale] = newAsset.filename;\r\n                  chunkFilesSet.add(newAsset.filename);\r\n                }\r\n\r\n                if (chunk.hasRuntime()) {\r\n                  // This is an entrypoint\r\n                  localizationStats.entrypoints[chunk.name] = {\r\n                    localizedAssets: localizedChunkAssets\r\n                  };\r\n                } else {\r\n                  // This is a secondary chunk\r\n                  if (chunk.name) {\r\n                    localizationStats.namedChunkGroups[chunk.name] = {\r\n                      localizedAssets: localizedChunkAssets\r\n                    };\r\n                  }\r\n                }\r\n\r\n                chunk.localizedFiles = localizedChunkAssets;\r\n              });\r\n            } else {\r\n              processChunkJsFile((chunkFilename) => {\r\n                const asset: IAsset = compilation.assets[chunkFilename];\r\n\r\n                const resultingAsset: IProcessAssetResult = AssetProcessor.processNonLocalizedAsset({\r\n                  plugin: this,\r\n                  compilation,\r\n                  assetName: chunkFilename,\r\n                  asset,\r\n                  chunk,\r\n                  noStringsLocaleName: this._noStringsLocaleName,\r\n                  chunkHasLocalizedModules: this._chunkHasLocalizedModules.bind(this)\r\n                });\r\n\r\n                // Delete the existing asset because it's been renamed\r\n                delete compilation.assets[chunkFilename];\r\n                chunkFilesSet.delete(chunkFilename);\r\n\r\n                compilation.assets[resultingAsset.filename] = resultingAsset.asset;\r\n                chunkFilesSet.add(resultingAsset.filename);\r\n              });\r\n            }\r\n\r\n            chunk.files = Array.from(chunkFilesSet);\r\n          }\r\n\r\n          if (this._options.localizationStats) {\r\n            if (this._options.localizationStats.dropPath) {\r\n              const resolvedLocalizationStatsDropPath: string = path.resolve(\r\n                compiler.outputPath,\r\n                this._options.localizationStats.dropPath\r\n              );\r\n              JsonFile.save(localizationStats, resolvedLocalizationStatsDropPath, {\r\n                ensureFolderExists: true\r\n              });\r\n            }\r\n\r\n            if (this._options.localizationStats.callback) {\r\n              try {\r\n                this._options.localizationStats.callback(localizationStats);\r\n              } catch (e) {\r\n                /* swallow errors from the callback */\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * @returns\r\n   */\r\n  public addDefaultLocFile(\r\n    terminal: Terminal,\r\n    localizedResourcePath: string,\r\n    localizedResourceData: ILocalizationFile\r\n  ): IAddDefaultLocFileResult {\r\n    const additionalLoadedFilePaths: string[] = [];\r\n    const errors: Error[] = [];\r\n\r\n    const locFileData: ILocaleFileData = this._convertLocalizationFileToLocData(localizedResourceData);\r\n    this._addLocFile(this._defaultLocale, localizedResourcePath, locFileData);\r\n\r\n    const normalizeLocalizedData: (localizedData: ILocaleFileData | string) => ILocaleFileData = (\r\n      localizedData\r\n    ) => {\r\n      if (typeof localizedData === 'string') {\r\n        additionalLoadedFilePaths.push(localizedData);\r\n        const localizationFile: ILocalizationFile = LocFileParser.parseLocFile({\r\n          filePath: localizedData,\r\n          content: FileSystem.readFile(localizedData),\r\n          terminal: terminal,\r\n          resxNewlineNormalization: this._resxNewlineNormalization\r\n        });\r\n\r\n        return this._convertLocalizationFileToLocData(localizationFile);\r\n      } else {\r\n        return localizedData;\r\n      }\r\n    };\r\n\r\n    const missingLocales: string[] = [];\r\n    for (const [translatedLocaleName, translatedStrings] of Object.entries(\r\n      this._resolvedTranslatedStringsFromOptions\r\n    )) {\r\n      const translatedLocFileFromOptions: ILocaleFileData | string | undefined =\r\n        translatedStrings[localizedResourcePath];\r\n      if (!translatedLocFileFromOptions) {\r\n        missingLocales.push(translatedLocaleName);\r\n      } else {\r\n        const translatedLocFileData: ILocaleFileData = normalizeLocalizedData(translatedLocFileFromOptions);\r\n        this._addLocFile(translatedLocaleName, localizedResourcePath, translatedLocFileData);\r\n      }\r\n    }\r\n\r\n    if (missingLocales.length > 0 && this._options.localizedData.resolveMissingTranslatedStrings) {\r\n      let resolvedTranslatedData: IResolvedMissingTranslations | undefined = undefined;\r\n      try {\r\n        resolvedTranslatedData = this._options.localizedData.resolveMissingTranslatedStrings(\r\n          missingLocales,\r\n          localizedResourcePath\r\n        );\r\n      } catch (e) {\r\n        errors.push(e);\r\n      }\r\n\r\n      if (resolvedTranslatedData) {\r\n        for (const [resolvedLocaleName, resolvedLocaleData] of Object.entries(resolvedTranslatedData)) {\r\n          if (resolvedLocaleData) {\r\n            const translatedLocFileData: ILocaleFileData = normalizeLocalizedData(resolvedLocaleData);\r\n            this._addLocFile(resolvedLocaleName, localizedResourcePath, translatedLocFileData);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this._pseudolocalizers.forEach((pseudolocalizer: (str: string) => string, pseudolocaleName: string) => {\r\n      const pseudolocFileData: ILocaleFileData = {};\r\n\r\n      for (const [stringName, stringValue] of Object.entries(locFileData)) {\r\n        pseudolocFileData[stringName] = pseudolocalizer(stringValue);\r\n      }\r\n\r\n      this._addLocFile(pseudolocaleName, localizedResourcePath, pseudolocFileData);\r\n    });\r\n\r\n    return { additionalLoadedFilePaths, errors };\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public getDataForSerialNumber(serialNumber: string): IStringSerialNumberData | undefined {\r\n    return this._stringPlaceholderMap.get(serialNumber);\r\n  }\r\n\r\n  private _addLocFile(\r\n    localeName: string,\r\n    localizedFilePath: string,\r\n    localizedFileData: ILocaleFileData\r\n  ): void {\r\n    const filesMap: Map<string, Map<string, string>> = this._resolvedLocalizedStrings.get(localeName)!;\r\n\r\n    const stringsMap: Map<string, string> = new Map<string, string>();\r\n    filesMap.set(localizedFilePath, stringsMap);\r\n\r\n    for (const [stringName, stringValue] of Object.entries(localizedFileData)) {\r\n      const stringKey: string = `${localizedFilePath}?${stringName}`;\r\n      if (!this.stringKeys.has(stringKey)) {\r\n        const placeholder: IStringPlaceholder = this._getPlaceholderString();\r\n        this.stringKeys.set(stringKey, placeholder);\r\n      }\r\n\r\n      const placeholder: IStringPlaceholder = this.stringKeys.get(stringKey)!;\r\n      if (!this._stringPlaceholderMap.has(placeholder.suffix)) {\r\n        this._stringPlaceholderMap.set(placeholder.suffix, {\r\n          values: {\r\n            [this._passthroughLocaleName]: stringName\r\n          },\r\n          locFilePath: localizedFilePath,\r\n          stringName: stringName\r\n        });\r\n      }\r\n\r\n      this._stringPlaceholderMap.get(placeholder.suffix)!.values[localeName] = stringValue;\r\n\r\n      stringsMap.set(stringName, stringValue);\r\n    }\r\n  }\r\n\r\n  private _initializeAndValidateOptions(\r\n    configuration: Webpack.Configuration,\r\n    isWebpackDevServer: boolean\r\n  ): { errors: Error[]; warnings: Error[] } {\r\n    const errors: Error[] = [];\r\n    const warnings: Error[] = [];\r\n\r\n    function ensureValidLocaleName(localeName: string): boolean {\r\n      const LOCALE_NAME_REGEX: RegExp = /[a-z-]/i;\r\n      if (!localeName.match(LOCALE_NAME_REGEX)) {\r\n        errors.push(\r\n          new Error(`Invalid locale name: ${localeName}. Locale names may only contain letters and hyphens.`)\r\n        );\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // START configuration\r\n    if (\r\n      !configuration.output ||\r\n      !configuration.output.filename ||\r\n      typeof configuration.output.filename !== 'string' ||\r\n      configuration.output.filename.indexOf(Constants.LOCALE_FILENAME_TOKEN) === -1\r\n    ) {\r\n      errors.push(\r\n        new Error(\r\n          'The configuration.output.filename property must be provided, must be a string, and must include ' +\r\n            `the ${Constants.LOCALE_FILENAME_TOKEN} placeholder`\r\n        )\r\n      );\r\n    }\r\n    // END configuration\r\n\r\n    // START options.filesToIgnore\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n      for (const filePath of this._options.filesToIgnore || []) {\r\n        const normalizedFilePath: string = path.resolve(configuration.context!, filePath);\r\n        this._filesToIgnore.add(normalizedFilePath);\r\n      }\r\n    }\r\n    // END options.filesToIgnore\r\n\r\n    // START options.localizedData\r\n    if (this._options.localizedData) {\r\n      // START options.localizedData.passthroughLocale\r\n      if (this._options.localizedData.passthroughLocale) {\r\n        const {\r\n          usePassthroughLocale,\r\n          passthroughLocaleName = 'passthrough'\r\n        } = this._options.localizedData.passthroughLocale;\r\n        if (usePassthroughLocale) {\r\n          this._passthroughLocaleName = passthroughLocaleName;\r\n          this._locales.add(passthroughLocaleName);\r\n        }\r\n      }\r\n      // END options.localizedData.passthroughLocale\r\n\r\n      // START options.localizedData.translatedStrings\r\n      const { translatedStrings } = this._options.localizedData;\r\n      this._resolvedTranslatedStringsFromOptions = {};\r\n      if (translatedStrings) {\r\n        for (const [localeName, locale] of Object.entries(translatedStrings)) {\r\n          if (this._locales.has(localeName)) {\r\n            errors.push(\r\n              Error(\r\n                `The locale \"${localeName}\" appears multiple times. ` +\r\n                  'There may be multiple instances with different casing.'\r\n              )\r\n            );\r\n            return { errors, warnings };\r\n          }\r\n\r\n          if (!ensureValidLocaleName(localeName)) {\r\n            return { errors, warnings };\r\n          }\r\n\r\n          this._locales.add(localeName);\r\n          this._resolvedLocalizedStrings.set(localeName, new Map<string, Map<string, string>>());\r\n          this._resolvedTranslatedStringsFromOptions[localeName] = {};\r\n\r\n          const locFilePathsInLocale: Set<string> = new Set<string>();\r\n\r\n          for (const [locFilePath, locFileDataFromOptions] of Object.entries(locale)) {\r\n            if (locale.hasOwnProperty(locFilePath)) {\r\n              const normalizedLocFilePath: string = path.resolve(configuration.context!, locFilePath);\r\n\r\n              if (locFilePathsInLocale.has(normalizedLocFilePath)) {\r\n                errors.push(\r\n                  new Error(\r\n                    `The localization file path \"${locFilePath}\" appears multiple times in locale ${localeName}. ` +\r\n                      'There may be multiple instances with different casing.'\r\n                  )\r\n                );\r\n                return { errors, warnings };\r\n              }\r\n\r\n              locFilePathsInLocale.add(normalizedLocFilePath);\r\n\r\n              const normalizedLocFileDataFromOptions: string | ILocaleFileData =\r\n                typeof locFileDataFromOptions === 'string'\r\n                  ? path.resolve(configuration.context!, locFileDataFromOptions)\r\n                  : locFileDataFromOptions;\r\n\r\n              this._resolvedTranslatedStringsFromOptions[localeName][\r\n                normalizedLocFilePath\r\n              ] = normalizedLocFileDataFromOptions;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // END options.localizedData.translatedStrings\r\n\r\n      // START options.localizedData.defaultLocale\r\n      if (this._options.localizedData.defaultLocale) {\r\n        const { localeName, fillMissingTranslationStrings } = this._options.localizedData.defaultLocale;\r\n        if (this._options.localizedData.defaultLocale.localeName) {\r\n          if (this._locales.has(localeName)) {\r\n            errors.push(new Error('The default locale is also specified in the translated strings.'));\r\n            return { errors, warnings };\r\n          } else if (!ensureValidLocaleName(localeName)) {\r\n            return { errors, warnings };\r\n          }\r\n\r\n          this._locales.add(localeName);\r\n          this._resolvedLocalizedStrings.set(localeName, new Map<string, Map<string, string>>());\r\n          this._defaultLocale = localeName;\r\n          this._fillMissingTranslationStrings = !!fillMissingTranslationStrings;\r\n        } else {\r\n          errors.push(new Error('Missing default locale name'));\r\n          return { errors, warnings };\r\n        }\r\n      } else {\r\n        errors.push(new Error('Missing default locale options.'));\r\n        return { errors, warnings };\r\n      }\r\n      // END options.localizedData.defaultLocale\r\n\r\n      // START options.localizedData.pseudoLocales\r\n      if (this._options.localizedData.pseudolocales) {\r\n        for (const [pseudolocaleName, pseudoLocaleOpts] of Object.entries(\r\n          this._options.localizedData.pseudolocales\r\n        )) {\r\n          if (this._defaultLocale === pseudolocaleName) {\r\n            errors.push(\r\n              new Error(`A pseudolocale (${pseudolocaleName}) name is also the default locale name.`)\r\n            );\r\n            return { errors, warnings };\r\n          }\r\n\r\n          if (this._locales.has(pseudolocaleName)) {\r\n            errors.push(\r\n              new Error(\r\n                `A pseudolocale (${pseudolocaleName}) name is also specified in the translated strings.`\r\n              )\r\n            );\r\n            return { errors, warnings };\r\n          }\r\n\r\n          this._pseudolocalizers.set(\r\n            pseudolocaleName,\r\n            Pseudolocalization.getPseudolocalizer(pseudoLocaleOpts)\r\n          );\r\n          this._locales.add(pseudolocaleName);\r\n          this._resolvedLocalizedStrings.set(pseudolocaleName, new Map<string, Map<string, string>>());\r\n        }\r\n      }\r\n      // END options.localizedData.pseudoLocales\r\n\r\n      // START options.localizedData.normalizeResxNewlines\r\n      if (this._options.localizedData.normalizeResxNewlines) {\r\n        switch (this._options.localizedData.normalizeResxNewlines) {\r\n          case 'crlf': {\r\n            this._resxNewlineNormalization = NewlineKind.CrLf;\r\n            break;\r\n          }\r\n\r\n          case 'lf': {\r\n            this._resxNewlineNormalization = NewlineKind.Lf;\r\n            break;\r\n          }\r\n\r\n          default: {\r\n            errors.push(\r\n              new Error(\r\n                `Unexpected value \"${this._options.localizedData.normalizeResxNewlines}\" for option ` +\r\n                  '\"localizedData.normalizeResxNewlines\"'\r\n              )\r\n            );\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      // END options.localizedData.normalizeResxNewlines\r\n    } else if (!isWebpackDevServer) {\r\n      throw new Error('Localized data must be provided unless webpack dev server is running.');\r\n    }\r\n    // END options.localizedData\r\n\r\n    // START options.noStringsLocaleName\r\n    if (\r\n      this._options.noStringsLocaleName === undefined ||\r\n      this._options.noStringsLocaleName === null ||\r\n      !ensureValidLocaleName(this._options.noStringsLocaleName)\r\n    ) {\r\n      this._noStringsLocaleName = 'none';\r\n    } else {\r\n      this._noStringsLocaleName = this._options.noStringsLocaleName;\r\n    }\r\n    // END options.noStringsLocaleName\r\n\r\n    return { errors, warnings };\r\n  }\r\n\r\n  private _getPlaceholderString(): IStringPlaceholder {\r\n    const suffix: string = (this._stringPlaceholderCounter++).toString();\r\n    return {\r\n      value: `${Constants.STRING_PLACEHOLDER_PREFIX}_\\\\_${Constants.STRING_PLACEHOLDER_LABEL}_${suffix}`,\r\n      suffix: suffix\r\n    };\r\n  }\r\n\r\n  private _chunkHasLocalizedModules(chunk: Webpack.compilation.Chunk): boolean {\r\n    let chunkHasAnyLocModules: boolean | undefined = EntityMarker.getMark(chunk);\r\n    if (chunkHasAnyLocModules === undefined) {\r\n      chunkHasAnyLocModules = false;\r\n      for (const module of chunk.getModules()) {\r\n        if (EntityMarker.getMark(module)) {\r\n          chunkHasAnyLocModules = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If this chunk doesn't directly contain any localized resources, it still\r\n      // needs to be localized if it's an entrypoint chunk (i.e. - it has a runtime)\r\n      // and it loads localized async chunks.\r\n      // In that case, the generated chunk URL generation code needs to contain\r\n      // the locale name.\r\n      if (!chunkHasAnyLocModules && chunk.hasRuntime()) {\r\n        for (const asyncChunk of chunk.getAllAsyncChunks()) {\r\n          if (this._chunkHasLocalizedModules(asyncChunk)) {\r\n            chunkHasAnyLocModules = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      EntityMarker.markEntity(chunk, chunkHasAnyLocModules);\r\n    }\r\n\r\n    return chunkHasAnyLocModules;\r\n  }\r\n\r\n  private _convertLocalizationFileToLocData(locFile: ILocalizationFile): ILocaleFileData {\r\n    const locFileData: ILocaleFileData = {};\r\n    for (const [stringName, locFileEntry] of Object.entries(locFile)) {\r\n      locFileData[stringName] = locFileEntry.value;\r\n    }\r\n\r\n    return locFileData;\r\n  }\r\n}\r\n"]}