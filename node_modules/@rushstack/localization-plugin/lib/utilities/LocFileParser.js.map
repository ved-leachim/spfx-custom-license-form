{"version":3,"file":"LocFileParser.js","sourceRoot":"","sources":["../../src/utilities/LocFileParser.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA+E;AAG/E,6CAA0C;AAC1C,2CAAwC;AAiBxC,MAAM,UAAU,GAAkC,IAAI,GAAG,EAA4B,CAAC;AAEtF;;GAEG;AACH,MAAa,aAAa;IACjB,MAAM,CAAC,YAAY,CAAC,OAA6B;QACtD,MAAM,YAAY,GAAW,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,wBAAwB,IAAI,MAAM,EAAE,CAAC;QACjG,IAAI,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YAChC,MAAM,KAAK,GAAqB,UAAU,CAAC,GAAG,CAAC,YAAY,CAAE,CAAC;YAC9D,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE;gBACrC,OAAO,KAAK,CAAC,UAAU,CAAC;aACzB;SACF;QAED,IAAI,UAA6B,CAAC;QAClC,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACrC,UAAU,GAAG,uBAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,EAAE;gBACzD,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,YAAY,EAAE,OAAO,CAAC,QAAQ;gBAC9B,oBAAoB,EAAE,OAAO,CAAC,wBAAwB;aACvD,CAAC,CAAC;SACJ;aAAM;YACL,UAAU,GAAG,4BAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI;gBACF,qBAAS,CAAC,eAAe,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;aACxE;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,mCAAmC,CAAC,EAAE,CAAC,CAAC;aACrE;SACF;QAED,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;QACvE,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AA7BD,sCA6BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Terminal, NewlineKind, JsonFile } from '@rushstack/node-core-library';\r\n\r\nimport { ILocalizationFile } from '../interfaces';\r\nimport { ResxReader } from './ResxReader';\r\nimport { Constants } from './Constants';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IParseLocFileOptions {\r\n  terminal: Terminal;\r\n  filePath: string;\r\n  content: string;\r\n  resxNewlineNormalization: NewlineKind | undefined;\r\n}\r\n\r\ninterface IParseCacheEntry {\r\n  content: string;\r\n  parsedFile: ILocalizationFile;\r\n}\r\n\r\nconst parseCache: Map<string, IParseCacheEntry> = new Map<string, IParseCacheEntry>();\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class LocFileParser {\r\n  public static parseLocFile(options: IParseLocFileOptions): ILocalizationFile {\r\n    const fileCacheKey: string = `${options.filePath}?${options.resxNewlineNormalization || 'none'}`;\r\n    if (parseCache.has(fileCacheKey)) {\r\n      const entry: IParseCacheEntry = parseCache.get(fileCacheKey)!;\r\n      if (entry.content === options.content) {\r\n        return entry.parsedFile;\r\n      }\r\n    }\r\n\r\n    let parsedFile: ILocalizationFile;\r\n    if (/\\.resx$/i.test(options.filePath)) {\r\n      parsedFile = ResxReader.readResxAsLocFile(options.content, {\r\n        terminal: options.terminal,\r\n        resxFilePath: options.filePath,\r\n        newlineNormalization: options.resxNewlineNormalization\r\n      });\r\n    } else {\r\n      parsedFile = JsonFile.parseString(options.content);\r\n      try {\r\n        Constants.LOC_JSON_SCHEMA.validateObject(parsedFile, options.filePath);\r\n      } catch (e) {\r\n        options.terminal.writeError(`The loc file is invalid. Error: ${e}`);\r\n      }\r\n    }\r\n\r\n    parseCache.set(fileCacheKey, { content: options.content, parsedFile });\r\n    return parsedFile;\r\n  }\r\n}\r\n"]}