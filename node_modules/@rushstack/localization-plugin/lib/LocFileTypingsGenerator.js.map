{"version":3,"file":"LocFileTypingsGenerator.js","sourceRoot":"","sources":["../src/LocFileTypingsGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAgG;AAIhG,6DAA0D;AAc1D;;;;GAIG;AACH,MAAa,uBAAwB,SAAQ,gDAA4B;IACvE,YAAmB,OAAiC;QAClD,KAAK,iCACA,OAAO,KACV,cAAc,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,EACtC,uBAAuB,EAAE,CAAC,YAAoB,EAAE,QAAgB,EAAE,EAAE;gBAClE,MAAM,WAAW,GAAsB,6BAAa,CAAC,YAAY,CAAC;oBAChE,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,YAAY;oBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAS;oBACjC,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;iBAC3D,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAyB,EAAE,CAAC;gBAEzC,wCAAwC;gBACxC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;oBACpC,OAAO,CAAC,IAAI,CAAC;wBACX,UAAU,EAAE,UAAU;wBACtB,OAAO,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO;qBACzC,CAAC,CAAC;iBACJ;gBAED,OAAO,EAAE,OAAO,EAAE,CAAC;YACrB,CAAC,IACD,CAAC;IACL,CAAC;CACF;AA3BD,0DA2BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { StringValuesTypingsGenerator, IStringValueTyping } from '@rushstack/typings-generator';\r\nimport { Terminal, NewlineKind } from '@rushstack/node-core-library';\r\n\r\nimport { ILocalizationFile } from './interfaces';\r\nimport { LocFileParser } from './utilities/LocFileParser';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITypingsGeneratorOptions {\r\n  srcFolder: string;\r\n  generatedTsFolder: string;\r\n  terminal?: Terminal;\r\n  exportAsDefault?: boolean;\r\n  filesToIgnore?: string[];\r\n  resxNewlineNormalization?: NewlineKind | undefined;\r\n}\r\n\r\n/**\r\n * This is a simple tool that generates .d.ts files for .loc.json and .resx files.\r\n *\r\n * @public\r\n */\r\nexport class LocFileTypingsGenerator extends StringValuesTypingsGenerator {\r\n  public constructor(options: ITypingsGeneratorOptions) {\r\n    super({\r\n      ...options,\r\n      fileExtensions: ['.resx', '.loc.json'],\r\n      parseAndGenerateTypings: (fileContents: string, filePath: string) => {\r\n        const locFileData: ILocalizationFile = LocFileParser.parseLocFile({\r\n          filePath: filePath,\r\n          content: fileContents,\r\n          terminal: this._options.terminal!,\r\n          resxNewlineNormalization: options.resxNewlineNormalization\r\n        });\r\n\r\n        const typings: IStringValueTyping[] = [];\r\n\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const stringName in locFileData) {\r\n          typings.push({\r\n            exportName: stringName,\r\n            comment: locFileData[stringName].comment\r\n          });\r\n        }\r\n\r\n        return { typings };\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}