{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Options for the passthrough locale.\r\n *\r\n * @public\r\n */\r\nexport interface IPassthroughLocaleOptions {\r\n  /**\r\n   * If this is set to `true`, a passthrough locale will be included in the output\r\n   */\r\n  usePassthroughLocale?: boolean;\r\n\r\n  /**\r\n   * If {@link IPassthroughLocaleOptions.usePassthroughLocale} is set, use this name for the passthrough locale.\r\n   * Defaults to \"passthrough\"\r\n   */\r\n  passthroughLocaleName?: string;\r\n}\r\n\r\n/**\r\n * Options for typing generation.\r\n *\r\n * @public\r\n */\r\nexport interface ITypingsGenerationOptions {\r\n  /**\r\n   * This property specifies the folder in which `.d.ts` files for loc files should be dropped.\r\n   */\r\n  generatedTsFolder: string;\r\n\r\n  /**\r\n   * This optional property overrides the compiler context for discovery of localization files\r\n   * for which typings should be generated.\r\n   */\r\n  sourceRoot?: string;\r\n\r\n  /**\r\n   * If this option is set to `true`, loc modules typings will be exported wrapped in a `default` property.\r\n   */\r\n  exportAsDefault?: boolean;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IDefaultLocaleOptions {\r\n  /**\r\n   * This required property specifies the name of the locale used in the\r\n   * `.resx` and `.loc.json` files in the source\r\n   */\r\n  localeName: string;\r\n\r\n  /**\r\n   * If this option is set to `true`, strings that are missing from\r\n   * `localizedData.translatedStrings` will be provided by the default locale\r\n   */\r\n  fillMissingTranslationStrings?: boolean;\r\n}\r\n\r\n/**\r\n * Options for the pseudolocale library.\r\n *\r\n * @internalRemarks\r\n * Eventually this should be replaced with DefinitelyTyped types.\r\n *\r\n * @public\r\n */\r\nexport interface IPseudolocaleOptions {\r\n  prepend?: string;\r\n  append?: string;\r\n  delimiter?: string;\r\n  startDelimiter?: string;\r\n  endDelimiter?: string;\r\n  extend?: number;\r\n  override?: string;\r\n}\r\n\r\n/**\r\n * Options for generated pseudolocales.\r\n *\r\n * @public\r\n */\r\nexport interface IPseudolocalesOptions {\r\n  [pseudoLocaleName: string]: IPseudolocaleOptions;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocalizedData {\r\n  /**\r\n   * Options for the locale used in the source localized data files.\r\n   */\r\n  defaultLocale: IDefaultLocaleOptions;\r\n\r\n  /**\r\n   * Use this parameter to specify the translated data.\r\n   */\r\n  translatedStrings: ILocalizedStrings;\r\n\r\n  /**\r\n   * Use this paramter to specify a function used to load translations missing from\r\n   * the {@link ILocalizedData.translatedStrings} parameter.\r\n   */\r\n  resolveMissingTranslatedStrings?: (locales: string[], filePath: string) => IResolvedMissingTranslations;\r\n\r\n  /**\r\n   * Options around including a passthrough locale.\r\n   */\r\n  passthroughLocale?: IPassthroughLocaleOptions;\r\n\r\n  /**\r\n   * Options for pseudo-localization.\r\n   */\r\n  pseudolocales?: IPseudolocalesOptions;\r\n\r\n  /**\r\n   * Normalize newlines in RESX files to either CRLF (Windows-style) or LF ('nix style)\r\n   */\r\n  normalizeResxNewlines?: 'lf' | 'crlf';\r\n}\r\n\r\n/**\r\n * Options for how localization stats data should be produced.\r\n *\r\n * @public\r\n */\r\nexport interface ILocalizationStatsOptions {\r\n  /**\r\n   * This option is used to designate a path at which a JSON file describing the localized\r\n   * assets produced should be written.\r\n   */\r\n  dropPath?: string;\r\n\r\n  /**\r\n   * This option is used to specify a callback to be called with the stats data that would be\r\n   * dropped at `localizationStats.dropPath` after compilation completes.\r\n   */\r\n  callback?: (stats: ILocalizationStats) => void;\r\n}\r\n\r\n/**\r\n * The options for localization.\r\n *\r\n * @public\r\n */\r\nexport interface ILocalizationPluginOptions {\r\n  /**\r\n   * Localization data.\r\n   */\r\n  localizedData: ILocalizedData;\r\n\r\n  /**\r\n   * This option is used to specify `.resx` and `.loc.json` files that should not be processed by this plugin.\r\n   */\r\n  filesToIgnore?: string[];\r\n\r\n  /**\r\n   * The value to replace the [locale] token with for chunks without localized strings. Defaults to \"none\"\r\n   */\r\n  noStringsLocaleName?: string;\r\n\r\n  /**\r\n   * Options for how localization stats data should be produced.\r\n   */\r\n  localizationStats?: ILocalizationStatsOptions;\r\n\r\n  /**\r\n   * This option is used to specify how and if TypeScript typings should be generated for loc files.\r\n   */\r\n  typingsOptions?: ITypingsGenerationOptions;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ILocalizationFile {\r\n  [stringName: string]: ILocalizedString;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ILocalizedString {\r\n  value: string;\r\n  comment?: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocaleFileData {\r\n  [stringName: string]: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IResolvedMissingTranslations {\r\n  [localeName: string]: string | ILocaleFileData;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocaleData {\r\n  [locFilePath: string]: string | ILocaleFileData;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocalizedStrings {\r\n  [locale: string]: ILocaleData;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocaleElementMap {\r\n  [locale: string]: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocalizationStatsEntrypoint {\r\n  localizedAssets: ILocaleElementMap;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocalizationStatsChunkGroup {\r\n  localizedAssets: ILocaleElementMap;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ILocalizationStats {\r\n  entrypoints: { [name: string]: ILocalizationStatsEntrypoint };\r\n  namedChunkGroups: { [name: string]: ILocalizationStatsChunkGroup };\r\n}\r\n"]}