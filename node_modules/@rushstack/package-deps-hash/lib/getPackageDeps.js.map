{"version":3,"file":"getPackageDeps.js","sourceRoot":"","sources":["../src/getPackageDeps.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as path from 'path';\r\nimport { Executable } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Parses a quoted filename sourced from the output of the \"git status\" command.\r\n *\r\n * Paths with non-standard characters will be enclosed with double-quotes, and non-standard\r\n * characters will be backslash escaped (ex. double-quotes, non-ASCII characters). The\r\n * escaped chars can be included in one of two ways:\r\n * - backslash-escaped chars (ex. \\\")\r\n * - octal encoded chars (ex. \\347)\r\n *\r\n * See documentation: https://git-scm.com/docs/git-status\r\n */\r\nexport function parseGitFilename(filename: string): string {\r\n  // If there are no double-quotes around the string, then there are no escaped characters\r\n  // to decode, so just return\r\n  if (!filename.match(/^\".+\"$/)) {\r\n    return filename;\r\n  }\r\n\r\n  // Need to hex encode '%' since we will be decoding the converted octal values from hex\r\n  filename = filename.replace(/%/g, '%25');\r\n  // Replace all instances of octal literals with percent-encoded hex (ex. '\\347\\275\\221' -> '%E7%BD%91').\r\n  // This is done because the octal literals represent UTF-8 bytes, and by converting them to percent-encoded\r\n  // hex, we can use decodeURIComponent to get the Unicode chars.\r\n  filename = filename.replace(/(?:\\\\(\\d{1,3}))/g, (match, ...[octalValue, index, source]) => {\r\n    // We need to make sure that the backslash is intended to escape the octal value. To do this, walk\r\n    // backwards from the match to ensure that it's already escaped.\r\n    const trailingBackslashes: RegExpMatchArray | null = (source as string)\r\n      .slice(0, index as number)\r\n      .match(/\\\\*$/);\r\n    return trailingBackslashes && trailingBackslashes.length > 0 && trailingBackslashes[0].length % 2 === 0\r\n      ? `%${parseInt(octalValue, 8).toString(16)}`\r\n      : match;\r\n  });\r\n\r\n  // Finally, decode the filename and unescape the escaped UTF-8 chars\r\n  return JSON.parse(decodeURIComponent(filename));\r\n}\r\n\r\n/**\r\n * Parses the output of the \"git ls-tree\" command\r\n */\r\nexport function parseGitLsTree(output: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  if (output) {\r\n    // A line is expected to look like:\r\n    // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts\r\n    // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  rushstack\r\n    const gitRegex: RegExp = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;\r\n\r\n    // Note: The output of git ls-tree uses \\n newlines regardless of OS.\r\n    const outputLines: string[] = output.trim().split('\\n');\r\n    for (const line of outputLines) {\r\n      if (line) {\r\n        // Take everything after the \"100644 blob\", which is just the hash and filename\r\n        const matches: RegExpMatchArray | null = line.match(gitRegex);\r\n        if (matches && matches[3] && matches[4]) {\r\n          const hash: string = matches[3];\r\n          const filename: string = parseGitFilename(matches[4]);\r\n\r\n          changes.set(filename, hash);\r\n        } else {\r\n          throw new Error(`Cannot parse git ls-tree input: \"${line}\"`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Parses the output of the \"git status\" command\r\n */\r\nexport function parseGitStatus(output: string, packagePath: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  /*\r\n   * Typically, output will look something like:\r\n   * M temp_modules/rush-package-deps-hash/package.json\r\n   * D package-deps-hash/src/index.ts\r\n   */\r\n\r\n  // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]\r\n  // will be empty or undefined\r\n  if (!output) {\r\n    return changes;\r\n  }\r\n\r\n  // Note: The output of git hash-object uses \\n newlines regardless of OS.\r\n  const outputLines: string[] = output.trim().split('\\n');\r\n  for (const line of outputLines) {\r\n    /*\r\n     * changeType is in the format of \"XY\" where \"X\" is the status of the file in the index and \"Y\" is the status of\r\n     * the file in the working tree. Some example statuses:\r\n     *   - 'D' == deletion\r\n     *   - 'M' == modification\r\n     *   - 'A' == addition\r\n     *   - '??' == untracked\r\n     *   - 'R' == rename\r\n     *   - 'RM' == rename with modifications\r\n     *   - '[MARC]D' == deleted in work tree\r\n     * Full list of examples: https://git-scm.com/docs/git-status#_short_format\r\n     */\r\n    const match: RegExpMatchArray | null = line.match(/(\"(\\\\\"|[^\"])+\")|(\\S+\\s*)/g);\r\n\r\n    if (match && match.length > 1) {\r\n      const [changeType, ...filenameMatches] = match;\r\n\r\n      // We always care about the last filename in the filenames array. In the case of non-rename changes,\r\n      // the filenames array only contains one file, so we can join all segments that were split on spaces.\r\n      // In the case of rename changes, the last item in the array is the path to the file in the working tree,\r\n      // which is the only one that we care about. It is also surrounded by double-quotes if spaces are\r\n      // included, so no need to worry about joining different segments\r\n      let lastFilename: string = changeType.startsWith('R')\r\n        ? filenameMatches[filenameMatches.length - 1]\r\n        : filenameMatches.join('');\r\n      lastFilename = parseGitFilename(lastFilename);\r\n\r\n      changes.set(lastFilename, changeType.trimRight());\r\n    }\r\n  }\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Takes a list of files and returns the current git hashes for them\r\n *\r\n * @public\r\n */\r\nexport function getGitHashForFiles(\r\n  filesToHash: string[],\r\n  packagePath: string,\r\n  gitPath?: string\r\n): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  if (filesToHash.length) {\r\n    // Use --stdin-paths arg to pass the list of files to git in order to avoid issues with\r\n    // command length\r\n    const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n      gitPath || 'git',\r\n      ['hash-object', '--stdin-paths'],\r\n      { input: filesToHash.map((x) => path.resolve(packagePath, x)).join('\\n') }\r\n    );\r\n\r\n    if (result.status !== 0) {\r\n      throw new Error(`git hash-object exited with status ${result.status}: ${result.stderr}`);\r\n    }\r\n\r\n    const hashStdout: string = result.stdout.trim();\r\n\r\n    // The result of \"git hash-object\" will be a list of file hashes delimited by newlines\r\n    const hashes: string[] = hashStdout.split('\\n');\r\n\r\n    if (hashes.length !== filesToHash.length) {\r\n      throw new Error(\r\n        `Passed ${filesToHash.length} file paths to Git to hash, but received ${hashes.length} hashes.`\r\n      );\r\n    }\r\n\r\n    for (let i: number = 0; i < hashes.length; i++) {\r\n      const hash: string = hashes[i];\r\n      const filePath: string = filesToHash[i];\r\n      changes.set(filePath, hash);\r\n    }\r\n  }\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Executes \"git ls-tree\" in a folder\r\n */\r\nexport function gitLsTree(path: string, gitPath?: string): string {\r\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n    gitPath || 'git',\r\n    ['ls-tree', 'HEAD', '-r'],\r\n    {\r\n      currentWorkingDirectory: path\r\n    }\r\n  );\r\n\r\n  if (result.status !== 0) {\r\n    throw new Error(`git ls-tree exited with status ${result.status}: ${result.stderr}`);\r\n  }\r\n\r\n  return result.stdout;\r\n}\r\n\r\n/**\r\n * Executes \"git status\" in a folder\r\n */\r\nexport function gitStatus(path: string, gitPath?: string): string {\r\n  /**\r\n   * -s - Short format. Will be printed as 'XY PATH' or 'XY ORIG_PATH -> PATH'. Paths with non-standard\r\n   *      characters will be escaped using double-quotes, and non-standard characters will be backslash\r\n   *      escaped (ex. spaces, tabs, double-quotes)\r\n   * -u - Untracked files are included\r\n   *\r\n   * See documentation here: https://git-scm.com/docs/git-status\r\n   */\r\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n    gitPath || 'git',\r\n    ['status', '-s', '-u', '.'],\r\n    {\r\n      currentWorkingDirectory: path\r\n    }\r\n  );\r\n\r\n  if (result.status !== 0) {\r\n    throw new Error(`git status exited with status ${result.status}: ${result.stderr}`);\r\n  }\r\n\r\n  return result.stdout;\r\n}\r\n\r\n/**\r\n * Builds an object containing hashes for the files under the specified `packagePath` folder.\r\n * @param packagePath - The folder path to derive the package dependencies from. This is typically the folder\r\n *                      containing package.json.  If omitted, the default value is the current working directory.\r\n * @param excludedPaths - An optional array of file path exclusions. If a file should be omitted from the list\r\n *                         of dependencies, use this to exclude it.\r\n * @returns the package-deps.json file content\r\n *\r\n * @public\r\n */\r\nexport function getPackageDeps(\r\n  packagePath: string = process.cwd(),\r\n  excludedPaths?: string[],\r\n  gitPath?: string\r\n): Map<string, string> {\r\n  const gitLsOutput: string = gitLsTree(packagePath, gitPath);\r\n\r\n  // Add all the checked in hashes\r\n  const result: Map<string, string> = parseGitLsTree(gitLsOutput);\r\n\r\n  // Remove excluded paths\r\n  if (excludedPaths) {\r\n    for (const excludedPath of excludedPaths) {\r\n      result.delete(excludedPath);\r\n    }\r\n  }\r\n\r\n  // Update the checked in hashes with the current repo status\r\n  const gitStatusOutput: string = gitStatus(packagePath, gitPath);\r\n  const currentlyChangedFiles: Map<string, string> = parseGitStatus(gitStatusOutput, packagePath);\r\n  const filesToHash: string[] = [];\r\n  const excludedPathSet: Set<string> = new Set<string>(excludedPaths);\r\n  for (const [filename, changeType] of currentlyChangedFiles) {\r\n    // See comments inside parseGitStatus() for more information\r\n    if (changeType === 'D' || (changeType.length === 2 && changeType.charAt(1) === 'D')) {\r\n      result.delete(filename);\r\n    } else {\r\n      if (!excludedPathSet.has(filename)) {\r\n        filesToHash.push(filename);\r\n      }\r\n    }\r\n  }\r\n\r\n  const currentlyChangedFileHashes: Map<string, string> = getGitHashForFiles(\r\n    filesToHash,\r\n    packagePath,\r\n    gitPath\r\n  );\r\n  for (const [filename, hash] of currentlyChangedFileHashes) {\r\n    result.set(filename, hash);\r\n  }\r\n\r\n  return result;\r\n}\r\n"]}