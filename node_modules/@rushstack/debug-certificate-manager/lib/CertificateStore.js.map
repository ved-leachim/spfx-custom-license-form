{"version":3,"file":"CertificateStore.js","sourceRoot":"","sources":["../src/CertificateStore.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,2BAA6B;AAE7B,oEAA0D;AAE1D;;;GAGG;AACH,MAAa,gBAAgB;IAS3B;QACE,MAAM,oBAAoB,GAAW,YAAO,EAAE,CAAC;QAC/C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC3D,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAC7C,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;SAC1E;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;QACrE,8BAAU,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,IAAW,eAAe;QACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAW,eAAe;QACxB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;gBAC5C,IAAI,CAAC,gBAAgB,GAAG,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACpE;iBAAM;gBACL,OAAO,SAAS,CAAC;aAClB;SACF;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,IAAW,eAAe,CAAC,WAA+B;QACxD,IAAI,WAAW,EAAE;YACf,8BAAU,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;SAC1D;aAAM,IAAI,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YACnD,8BAAU,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC9C;QAED,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,IAAW,OAAO;QAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACpC,IAAI,CAAC,QAAQ,GAAG,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACpD;iBAAM;gBACL,OAAO,SAAS,CAAC;aAClB;SACF;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAW,OAAO,CAAC,GAAuB;QACxC,IAAI,GAAG,EAAE;YACP,8BAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;SAC1C;aAAM,IAAI,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC3C,8BAAU,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACtB,CAAC;CACF;AA/ED,4CA+EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { homedir } from 'os';\r\n\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Store to retrieve and save debug certificate data.\r\n * @public\r\n */\r\nexport class CertificateStore {\r\n  private _userProfilePath: string;\r\n  private _serveDataPath: string;\r\n  private _certificatePath: string;\r\n  private _keyPath: string;\r\n\r\n  private _certificateData: string | undefined;\r\n  private _keyData: string | undefined;\r\n\r\n  public constructor() {\r\n    const unresolvedUserFolder: string = homedir();\r\n    this._userProfilePath = path.resolve(unresolvedUserFolder);\r\n    if (!FileSystem.exists(this._userProfilePath)) {\r\n      throw new Error(\"Unable to determine the current user's home directory\");\r\n    }\r\n\r\n    this._serveDataPath = path.join(this._userProfilePath, '.rushstack');\r\n    FileSystem.ensureFolder(this._serveDataPath);\r\n\r\n    this._certificatePath = path.join(this._serveDataPath, 'rushstack-serve.pem');\r\n    this._keyPath = path.join(this._serveDataPath, 'rushstack-serve.key');\r\n  }\r\n\r\n  /**\r\n   * Path to the saved debug certificate\r\n   */\r\n  public get certificatePath(): string {\r\n    return this._certificatePath;\r\n  }\r\n\r\n  /**\r\n   * Debug certificate pem file contents.\r\n   */\r\n  public get certificateData(): string | undefined {\r\n    if (!this._certificateData) {\r\n      if (FileSystem.exists(this._certificatePath)) {\r\n        this._certificateData = FileSystem.readFile(this._certificatePath);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return this._certificateData;\r\n  }\r\n\r\n  public set certificateData(certificate: string | undefined) {\r\n    if (certificate) {\r\n      FileSystem.writeFile(this._certificatePath, certificate);\r\n    } else if (FileSystem.exists(this._certificatePath)) {\r\n      FileSystem.deleteFile(this._certificatePath);\r\n    }\r\n\r\n    this._certificateData = certificate;\r\n  }\r\n\r\n  /**\r\n   * Key used to sign the debug pem certificate.\r\n   */\r\n  public get keyData(): string | undefined {\r\n    if (!this._keyData) {\r\n      if (FileSystem.exists(this._keyPath)) {\r\n        this._keyData = FileSystem.readFile(this._keyPath);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return this._keyData;\r\n  }\r\n\r\n  public set keyData(key: string | undefined) {\r\n    if (key) {\r\n      FileSystem.writeFile(this._keyPath, key);\r\n    } else if (FileSystem.exists(this._keyPath)) {\r\n      FileSystem.deleteFile(this._keyPath);\r\n    }\r\n\r\n    this._keyData = key;\r\n  }\r\n}\r\n"]}