{"version":3,"file":"ConfigurationFile.js","sourceRoot":"","sources":["../src/ConfigurationFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as nodeJsPath from 'path';\r\nimport { JSONPath } from 'jsonpath-plus';\r\nimport {\r\n  JsonSchema,\r\n  JsonFile,\r\n  PackageJsonLookup,\r\n  Import,\r\n  FileSystem,\r\n  Terminal\r\n} from '@rushstack/node-core-library';\r\nimport { RigConfig } from '@rushstack/rig-package';\r\n\r\ninterface IConfigurationJson {\r\n  extends?: string;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport enum InheritanceType {\r\n  /**\r\n   * Append additional elements after elements from the parent file's property\r\n   */\r\n  append = 'append',\r\n\r\n  /**\r\n   * Discard elements from the parent file's property\r\n   */\r\n  replace = 'replace',\r\n\r\n  /**\r\n   * Custom inheritance functionality\r\n   */\r\n  custom = 'custom'\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport enum PathResolutionMethod {\r\n  /**\r\n   * Resolve a path relative to the configuration file\r\n   */\r\n  resolvePathRelativeToConfigurationFile,\r\n\r\n  /**\r\n   * Resolve a path relative to the root of the project containing the configuration file\r\n   */\r\n  resolvePathRelativeToProjectRoot,\r\n\r\n  /**\r\n   * Treat the property as a NodeJS-style require/import reference and resolve using standard\r\n   * NodeJS filesystem resolution\r\n   */\r\n  NodeResolve\r\n}\r\n\r\nconst CONFIGURATION_FILE_FIELD_ANNOTATION: unique symbol = Symbol('configuration-file-field-annotation');\r\n\r\ninterface IAnnotatedField<TField> {\r\n  [CONFIGURATION_FILE_FIELD_ANNOTATION]: IConfigurationFileFieldAnnotation<TField>;\r\n}\r\n\r\ninterface IConfigurationFileFieldAnnotation<TField> {\r\n  configurationFilePath: string | undefined;\r\n  originalValues: { [propertyName in keyof TField]: unknown };\r\n}\r\n\r\ninterface IConfigurationFileCacheEntry<TConfigurationFile> {\r\n  configurationFile?: TConfigurationFile;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Used to specify how node(s) in a JSON object should be processed after being loaded.\r\n *\r\n * @beta\r\n */\r\nexport interface IJsonPathMetadata {\r\n  /**\r\n   * If this property describes a filesystem path, use this property to describe\r\n   * how the path should be resolved.\r\n   */\r\n  pathResolutionMethod?: PathResolutionMethod;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport type PropertyInheritanceCustomFunction<TObject> = (\r\n  currentObject: TObject,\r\n  parentObject: TObject\r\n) => TObject;\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IPropertyInheritance<TInheritanceType extends InheritanceType> {\r\n  inheritanceType: TInheritanceType;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface ICustomPropertyInheritance<TObject> extends IPropertyInheritance<InheritanceType.custom> {\r\n  /**\r\n   * Provides a custom inheritance function. This function takes two arguments: the first is the\r\n   * child file's object, and the second is the parent file's object. The function should return\r\n   * the resulting combined object.\r\n   */\r\n  inheritanceFunction: PropertyInheritanceCustomFunction<TObject>;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport type IPropertiesInheritance<TConfigurationFile> = {\r\n  [propertyName in keyof TConfigurationFile]?:\r\n    | IPropertyInheritance<InheritanceType.append | InheritanceType.replace>\r\n    | ICustomPropertyInheritance<TConfigurationFile[propertyName]>;\r\n};\r\n\r\n/**\r\n * Keys in this object are JSONPaths {@link https://jsonpath.com/}, and values are objects\r\n * that describe how node(s) selected by the JSONPath are processed after loading.\r\n *\r\n * @beta\r\n */\r\nexport interface IJsonPathsMetadata {\r\n  [jsonPath: string]: IJsonPathMetadata;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IConfigurationFileOptions<TConfigurationFile> {\r\n  /**\r\n   * A project root-relative path to the configuration file that should be loaded.\r\n   */\r\n  projectRelativeFilePath: string;\r\n\r\n  /**\r\n   * The path to the schema for the configuration file.\r\n   */\r\n  jsonSchemaPath: string;\r\n\r\n  /**\r\n   * Use this property to specify how JSON nodes are postprocessed.\r\n   */\r\n  jsonPathMetadata?: IJsonPathsMetadata;\r\n\r\n  /**\r\n   * Use this property to control how root-level properties are handled between parent and child\r\n   * configuration files.\r\n   */\r\n  propertyInheritance?: IPropertiesInheritance<TConfigurationFile>;\r\n}\r\n\r\ninterface IJsonPathCallbackObject {\r\n  path: string;\r\n  parent: object;\r\n  parentProperty: string;\r\n  value: string;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IOriginalValueOptions<TParentProperty> {\r\n  parentObject: TParentProperty;\r\n  propertyName: keyof TParentProperty;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class ConfigurationFile<TConfigurationFile> {\r\n  private readonly _schemaPath: string;\r\n  private readonly _projectRelativeFilePath: string;\r\n  private readonly _jsonPathMetadata: IJsonPathsMetadata;\r\n  private readonly _propertyInheritanceTypes: IPropertiesInheritance<TConfigurationFile>;\r\n  private __schema: JsonSchema | undefined;\r\n  private get _schema(): JsonSchema {\r\n    if (!this.__schema) {\r\n      this.__schema = JsonSchema.fromFile(this._schemaPath);\r\n    }\r\n\r\n    return this.__schema;\r\n  }\r\n\r\n  private readonly _configurationFileCache: Map<\r\n    string,\r\n    IConfigurationFileCacheEntry<TConfigurationFile>\r\n  > = new Map<string, IConfigurationFileCacheEntry<TConfigurationFile>>();\r\n  private readonly _fileExistsCache: Map<string, boolean> = new Map<string, boolean>();\r\n  private readonly _packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n\r\n  public constructor(options: IConfigurationFileOptions<TConfigurationFile>) {\r\n    this._projectRelativeFilePath = options.projectRelativeFilePath;\r\n    this._schemaPath = options.jsonSchemaPath;\r\n    this._jsonPathMetadata = options.jsonPathMetadata || {};\r\n    this._propertyInheritanceTypes = options.propertyInheritance || {};\r\n  }\r\n\r\n  public async loadConfigurationFileForProjectAsync(\r\n    terminal: Terminal,\r\n    projectPath: string,\r\n    rigConfig?: RigConfig\r\n  ): Promise<TConfigurationFile> {\r\n    const projectConfigurationFilePath: string = this._getConfigurationFilePathForProject(projectPath);\r\n    return await this._loadConfigurationFileInnerWithCacheAsync(\r\n      terminal,\r\n      projectConfigurationFilePath,\r\n      new Set<string>(),\r\n      rigConfig\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This function is identical to {@link ConfigurationFile.loadConfigurationFileForProjectAsync}, except\r\n   * that a preliminary file existence check is performed and this function returns `undefined` if the\r\n   * configuration file doesn't exist.\r\n   */\r\n  public async tryLoadConfigurationFileForProjectAsync(\r\n    terminal: Terminal,\r\n    projectPath: string,\r\n    rigConfig?: RigConfig\r\n  ): Promise<TConfigurationFile | undefined> {\r\n    const projectConfigurationFilePath: string = this._getConfigurationFilePathForProject(projectPath);\r\n    const projectConfigurationFilePathForLogging: string = ConfigurationFile._formatPathForLogging(\r\n      projectConfigurationFilePath\r\n    );\r\n    let exists: boolean | undefined = this._fileExistsCache.get(projectConfigurationFilePath);\r\n    if (exists === undefined) {\r\n      exists = await FileSystem.existsAsync(projectConfigurationFilePath);\r\n      this._fileExistsCache.set(projectConfigurationFilePath, exists);\r\n    }\r\n\r\n    if (!exists) {\r\n      if (rigConfig) {\r\n        terminal.writeVerboseLine(\r\n          `Config file \"${projectConfigurationFilePathForLogging}\" does not exist. Attempting to load via rig.`\r\n        );\r\n        return await this._tryLoadConfigurationFileInRigAsync(terminal, rigConfig, new Set<string>());\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      return await this._loadConfigurationFileInnerWithCacheAsync(\r\n        terminal,\r\n        projectConfigurationFilePath,\r\n        new Set<string>(),\r\n        undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public static _formatPathForLogging: (path: string) => string = (path: string) => path;\r\n\r\n  /**\r\n   * Get the path to the source file that the referenced property was originally\r\n   * loaded from.\r\n   */\r\n  public getObjectSourceFilePath<TObject extends object>(obj: TObject): string | undefined {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const annotation: IConfigurationFileFieldAnnotation<TObject> | undefined = (obj as any)[\r\n      CONFIGURATION_FILE_FIELD_ANNOTATION\r\n    ];\r\n    if (annotation) {\r\n      return annotation.configurationFilePath;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the value of the specified property on the specified object that was originally\r\n   * loaded from a configuration file.\r\n   */\r\n  public getPropertyOriginalValue<TParentProperty extends object, TValue>(\r\n    options: IOriginalValueOptions<TParentProperty>\r\n  ): TValue | undefined {\r\n    const annotation: IConfigurationFileFieldAnnotation<TParentProperty> | undefined =\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (options.parentObject as any)[CONFIGURATION_FILE_FIELD_ANNOTATION];\r\n    if (annotation && annotation.originalValues.hasOwnProperty(options.propertyName)) {\r\n      return annotation.originalValues[options.propertyName] as TValue;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private async _loadConfigurationFileInnerWithCacheAsync(\r\n    terminal: Terminal,\r\n    resolvedConfigurationFilePath: string,\r\n    visitedConfigurationFilePaths: Set<string>,\r\n    rigConfig: RigConfig | undefined\r\n  ): Promise<TConfigurationFile> {\r\n    let cacheEntry:\r\n      | IConfigurationFileCacheEntry<TConfigurationFile>\r\n      | undefined = this._configurationFileCache.get(resolvedConfigurationFilePath);\r\n    if (!cacheEntry) {\r\n      try {\r\n        cacheEntry = {\r\n          configurationFile: await this._loadConfigurationFileInnerAsync(\r\n            terminal,\r\n            resolvedConfigurationFilePath,\r\n            visitedConfigurationFilePaths,\r\n            rigConfig\r\n          )\r\n        };\r\n      } catch (e) {\r\n        cacheEntry = { error: e };\r\n      }\r\n    } else {\r\n      terminal.writeVerboseLine(\r\n        `Found \"${ConfigurationFile._formatPathForLogging(\r\n          resolvedConfigurationFilePath\r\n        )}\" in ConfigurationFile path.`\r\n      );\r\n    }\r\n\r\n    if (cacheEntry.error) {\r\n      throw cacheEntry.error;\r\n    } else {\r\n      return cacheEntry.configurationFile! as TConfigurationFile;\r\n    }\r\n  }\r\n\r\n  private async _loadConfigurationFileInnerAsync(\r\n    terminal: Terminal,\r\n    resolvedConfigurationFilePath: string,\r\n    visitedConfigurationFilePaths: Set<string>,\r\n    rigConfig: RigConfig | undefined\r\n  ): Promise<TConfigurationFile> {\r\n    const resolvedConfigurationFilePathForLogging: string = ConfigurationFile._formatPathForLogging(\r\n      resolvedConfigurationFilePath\r\n    );\r\n\r\n    if (visitedConfigurationFilePaths.has(resolvedConfigurationFilePath)) {\r\n      throw new Error(\r\n        'A loop has been detected in the \"extends\" properties of configuration file at ' +\r\n          `\"${resolvedConfigurationFilePathForLogging}\".`\r\n      );\r\n    }\r\n\r\n    visitedConfigurationFilePaths.add(resolvedConfigurationFilePath);\r\n\r\n    let fileText: string;\r\n    try {\r\n      fileText = await FileSystem.readFileAsync(resolvedConfigurationFilePath);\r\n    } catch (e) {\r\n      if (FileSystem.isNotExistError(e)) {\r\n        terminal.writeVerboseLine(\r\n          `Configuration file \"${resolvedConfigurationFilePathForLogging}\" not found.`\r\n        );\r\n        if (rigConfig) {\r\n          const rigResult: TConfigurationFile | undefined = await this._tryLoadConfigurationFileInRigAsync(\r\n            terminal,\r\n            rigConfig,\r\n            visitedConfigurationFilePaths\r\n          );\r\n          if (rigResult) {\r\n            return rigResult;\r\n          }\r\n        }\r\n\r\n        e.message = `File does not exist: ${resolvedConfigurationFilePathForLogging}`;\r\n      }\r\n\r\n      throw e;\r\n    }\r\n\r\n    let configurationJson: IConfigurationJson & TConfigurationFile;\r\n    try {\r\n      configurationJson = await JsonFile.parseString(fileText);\r\n    } catch (e) {\r\n      throw new Error(`In config file \"${resolvedConfigurationFilePathForLogging}\": ${e}`);\r\n    }\r\n\r\n    this._schema.validateObject(configurationJson, resolvedConfigurationFilePathForLogging);\r\n\r\n    this._annotateProperties(resolvedConfigurationFilePath, configurationJson);\r\n\r\n    for (const [jsonPath, metadata] of Object.entries(this._jsonPathMetadata)) {\r\n      JSONPath({\r\n        path: jsonPath,\r\n        json: configurationJson,\r\n        callback: (payload: unknown, payloadType: string, fullPayload: IJsonPathCallbackObject) => {\r\n          if (metadata.pathResolutionMethod !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (fullPayload.parent as any)[fullPayload.parentProperty] = this._resolvePathProperty(\r\n              resolvedConfigurationFilePath,\r\n              fullPayload.value,\r\n              metadata.pathResolutionMethod\r\n            );\r\n          }\r\n        },\r\n        otherTypeCallback: () => {\r\n          throw new Error('@other() tags are not supported');\r\n        }\r\n      });\r\n    }\r\n\r\n    let parentConfiguration: Partial<TConfigurationFile> = {};\r\n    if (configurationJson.extends) {\r\n      try {\r\n        const resolvedParentConfigPath: string = Import.resolveModule({\r\n          modulePath: configurationJson.extends,\r\n          baseFolderPath: nodeJsPath.dirname(resolvedConfigurationFilePath)\r\n        });\r\n        parentConfiguration = await this._loadConfigurationFileInnerWithCacheAsync(\r\n          terminal,\r\n          resolvedParentConfigPath,\r\n          visitedConfigurationFilePaths,\r\n          undefined\r\n        );\r\n      } catch (e) {\r\n        if (FileSystem.isNotExistError(e)) {\r\n          throw new Error(\r\n            `In file \"${resolvedConfigurationFilePathForLogging}\", file referenced in \"extends\" property ` +\r\n              `(\"${configurationJson.extends}\") cannot be resolved.`\r\n          );\r\n        } else {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    const propertyNames: Set<string> = new Set<string>([\r\n      ...Object.keys(parentConfiguration),\r\n      ...Object.keys(configurationJson)\r\n    ]);\r\n\r\n    const resultAnnotation: IConfigurationFileFieldAnnotation<TConfigurationFile> = {\r\n      configurationFilePath: resolvedConfigurationFilePath,\r\n      originalValues: {} as TConfigurationFile\r\n    };\r\n    const result: TConfigurationFile = ({\r\n      [CONFIGURATION_FILE_FIELD_ANNOTATION]: resultAnnotation\r\n    } as unknown) as TConfigurationFile;\r\n    for (const propertyName of propertyNames) {\r\n      if (propertyName === '$schema' || propertyName === 'extends') {\r\n        continue;\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const propertyValue: unknown | undefined = (configurationJson as any)[propertyName];\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const parentPropertyValue: unknown | undefined = (parentConfiguration as any)[propertyName];\r\n\r\n      const bothAreArrays: boolean = Array.isArray(propertyValue) && Array.isArray(parentPropertyValue);\r\n      const defaultInheritanceType: IPropertyInheritance<InheritanceType> = bothAreArrays\r\n        ? { inheritanceType: InheritanceType.append }\r\n        : { inheritanceType: InheritanceType.replace };\r\n      const propertyInheritance: IPropertyInheritance<InheritanceType> =\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (this._propertyInheritanceTypes as any)[propertyName] !== undefined\r\n          ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            (this._propertyInheritanceTypes as any)[propertyName]\r\n          : defaultInheritanceType;\r\n\r\n      let newValue: unknown;\r\n      const usePropertyValue: () => void = () => {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (resultAnnotation.originalValues as any)[propertyName] = this.getPropertyOriginalValue<any, any>({\r\n          parentObject: configurationJson,\r\n          propertyName: propertyName\r\n        });\r\n        newValue = propertyValue;\r\n      };\r\n      const useParentPropertyValue: () => void = () => {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (resultAnnotation.originalValues as any)[propertyName] = this.getPropertyOriginalValue<any, any>({\r\n          parentObject: parentConfiguration,\r\n          propertyName: propertyName\r\n        });\r\n        newValue = parentPropertyValue;\r\n      };\r\n\r\n      if (propertyValue && !parentPropertyValue) {\r\n        usePropertyValue();\r\n      } else if (parentPropertyValue && !propertyValue) {\r\n        useParentPropertyValue();\r\n      } else {\r\n        switch (propertyInheritance.inheritanceType) {\r\n          case InheritanceType.replace: {\r\n            if (propertyValue !== undefined) {\r\n              usePropertyValue();\r\n            } else {\r\n              useParentPropertyValue();\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n          case InheritanceType.append: {\r\n            if (propertyValue !== undefined && parentPropertyValue === undefined) {\r\n              usePropertyValue();\r\n            } else if (propertyValue === undefined && parentPropertyValue !== undefined) {\r\n              useParentPropertyValue();\r\n            } else {\r\n              if (!Array.isArray(propertyValue) || !Array.isArray(parentPropertyValue)) {\r\n                throw new Error(\r\n                  `Issue in processing configuration file property \"${propertyName}\". ` +\r\n                    `Property is not an array, but the inheritance type is set as \"${InheritanceType.append}\"`\r\n                );\r\n              }\r\n\r\n              newValue = [...parentPropertyValue, ...propertyValue];\r\n              ((newValue as unknown) as IAnnotatedField<unknown[]>)[CONFIGURATION_FILE_FIELD_ANNOTATION] = {\r\n                configurationFilePath: undefined,\r\n                originalValues: {\r\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                  ...(parentPropertyValue as any)[CONFIGURATION_FILE_FIELD_ANNOTATION].originalValues,\r\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                  ...(propertyValue as any)[CONFIGURATION_FILE_FIELD_ANNOTATION].originalValues\r\n                }\r\n              };\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n          case InheritanceType.custom: {\r\n            const customInheritance: ICustomPropertyInheritance<unknown> = propertyInheritance as ICustomPropertyInheritance<\r\n              unknown\r\n            >;\r\n            if (\r\n              !customInheritance.inheritanceFunction ||\r\n              typeof customInheritance.inheritanceFunction !== 'function'\r\n            ) {\r\n              throw new Error(\r\n                'For property inheritance type \"InheritanceType.custom\", an inheritanceFunction must be provided.'\r\n              );\r\n            }\r\n\r\n            newValue = customInheritance.inheritanceFunction(propertyValue, parentPropertyValue);\r\n\r\n            break;\r\n          }\r\n\r\n          default: {\r\n            throw new Error(`Unknown inheritance type \"${propertyInheritance}\"`);\r\n          }\r\n        }\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (result as any)[propertyName] = newValue;\r\n    }\r\n\r\n    try {\r\n      this._schema.validateObject(result, resolvedConfigurationFilePathForLogging);\r\n    } catch (e) {\r\n      throw new Error(`Resolved configuration object does not match schema: ${e}`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private async _tryLoadConfigurationFileInRigAsync(\r\n    terminal: Terminal,\r\n    rigConfig: RigConfig,\r\n    visitedConfigurationFilePaths: Set<string>\r\n  ): Promise<TConfigurationFile | undefined> {\r\n    if (rigConfig.rigFound) {\r\n      const rigProfileFolder: string = await rigConfig.getResolvedProfileFolderAsync();\r\n      try {\r\n        return await this._loadConfigurationFileInnerWithCacheAsync(\r\n          terminal,\r\n          nodeJsPath.resolve(rigProfileFolder, this._projectRelativeFilePath),\r\n          visitedConfigurationFilePaths,\r\n          undefined\r\n        );\r\n      } catch (e) {\r\n        // Ignore cases where a configuration file doesn't exist in a rig\r\n        if (!FileSystem.isNotExistError(e)) {\r\n          throw e;\r\n        } else {\r\n          terminal.writeVerboseLine(\r\n            `Configuration file \"${\r\n              this._projectRelativeFilePath\r\n            }\" not found in rig (\"${ConfigurationFile._formatPathForLogging(rigProfileFolder)}\")`\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      terminal.writeVerboseLine(\r\n        `No rig found for \"${ConfigurationFile._formatPathForLogging(rigConfig.projectFolderPath)}\"`\r\n      );\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private _annotateProperties<TObject>(resolvedConfigurationFilePath: string, obj: TObject): void {\r\n    if (!obj) {\r\n      return;\r\n    }\r\n\r\n    if (typeof obj === 'object') {\r\n      this._annotateProperty(resolvedConfigurationFilePath, obj);\r\n\r\n      for (const objValue of Object.values(obj)) {\r\n        this._annotateProperties(resolvedConfigurationFilePath, objValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _annotateProperty<TObject>(resolvedConfigurationFilePath: string, obj: TObject): void {\r\n    if (!obj) {\r\n      return;\r\n    }\r\n\r\n    if (typeof obj === 'object') {\r\n      ((obj as unknown) as IAnnotatedField<TObject>)[CONFIGURATION_FILE_FIELD_ANNOTATION] = {\r\n        configurationFilePath: resolvedConfigurationFilePath,\r\n        originalValues: { ...obj }\r\n      };\r\n    }\r\n  }\r\n\r\n  private _resolvePathProperty(\r\n    configurationFilePath: string,\r\n    propertyValue: string,\r\n    resolutionMethod: PathResolutionMethod | undefined\r\n  ): string {\r\n    switch (resolutionMethod) {\r\n      case PathResolutionMethod.resolvePathRelativeToConfigurationFile: {\r\n        return nodeJsPath.resolve(nodeJsPath.dirname(configurationFilePath), propertyValue);\r\n      }\r\n\r\n      case PathResolutionMethod.resolvePathRelativeToProjectRoot: {\r\n        const packageRoot: string | undefined = this._packageJsonLookup.tryGetPackageFolderFor(\r\n          configurationFilePath\r\n        );\r\n        if (!packageRoot) {\r\n          throw new Error(\r\n            `Could not find a package root for path \"${ConfigurationFile._formatPathForLogging(\r\n              configurationFilePath\r\n            )}\"`\r\n          );\r\n        }\r\n\r\n        return nodeJsPath.resolve(packageRoot, propertyValue);\r\n      }\r\n\r\n      case PathResolutionMethod.NodeResolve: {\r\n        return Import.resolveModule({\r\n          modulePath: propertyValue,\r\n          baseFolderPath: nodeJsPath.dirname(configurationFilePath)\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return propertyValue;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _getConfigurationFilePathForProject(projectPath: string): string {\r\n    return nodeJsPath.resolve(projectPath, this._projectRelativeFilePath);\r\n  }\r\n}\r\n"]}