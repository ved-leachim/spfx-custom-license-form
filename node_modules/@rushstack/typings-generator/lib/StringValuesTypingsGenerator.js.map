{"version":3,"file":"StringValuesTypingsGenerator.js","sourceRoot":"","sources":["../src/StringValuesTypingsGenerator.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2BAAyB;AAEzB,yDAAgF;AAkChF,MAAM,gCAAgC,GAAW,SAAS,CAAC;AAE3D;;;;;GAKG;AACH,MAAa,4BAA6B,SAAQ,mCAAgB;IAChE,YAAmB,OAA6C;QAC9D,KAAK,iCACA,OAAO,KACV,uBAAuB,EAAE,KAAK,EAAE,YAAoB,EAAE,QAAgB,EAAE,EAAE;gBACxE,MAAM,kBAAkB,GAAoC,MAAM,OAAO,CAAC,uBAAuB,CAC/F,YAAY,EACZ,QAAQ,CACT,CAAC;gBAEF,IAAI,kBAAkB,KAAK,SAAS,EAAE;oBACpC,OAAO;iBACR;gBAED,MAAM,WAAW,GAAa,EAAE,CAAC;gBACjC,MAAM,aAAa,GAAW,OAAO,CAAC,4BAA4B;oBAChE,CAAC,CAAC,OAAO,CAAC,4BAA4B;oBACtC,CAAC,CAAC,gCAAgC,CAAC;gBACrC,IAAI,MAAM,GAAW,EAAE,CAAC;gBACxB,IAAI,OAAO,CAAC,eAAe,EAAE;oBAC3B,WAAW,CAAC,IAAI,CAAC,oBAAoB,aAAa,IAAI,CAAC,CAAC;oBACxD,MAAM,GAAG,IAAI,CAAC;iBACf;gBAED,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,CAAC,OAAO,EAAE;oBAC1D,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,iBAAiB,CAAC;oBAElD,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;wBACpC,WAAW,CAAC,IAAI,CACd,GAAG,MAAM,KAAK,EACd,GAAG,MAAM,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,EACjD,GAAG,MAAM,KAAK,CACf,CAAC;qBACH;oBAED,IAAI,OAAO,CAAC,eAAe,EAAE;wBAC3B,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,UAAU,YAAY,EAAE,EAAE,CAAC,CAAC;qBAC3D;yBAAM;wBACL,WAAW,CAAC,IAAI,CAAC,wBAAwB,UAAU,WAAW,EAAE,EAAE,CAAC,CAAC;qBACrE;iBACF;gBAED,IAAI,OAAO,CAAC,eAAe,EAAE;oBAC3B,WAAW,CAAC,IAAI,CACd,GAAG,EACH,EAAE,EACF,0BAA0B,aAAa,GAAG,EAC1C,EAAE,EACF,yBAAyB,CAC1B,CAAC;iBACH;gBAED,OAAO,WAAW,CAAC,IAAI,CAAC,QAAG,CAAC,CAAC;YAC/B,CAAC,IACD,CAAC;IACL,CAAC;CACF;AAxDD,oEAwDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\n\r\nimport { ITypingsGeneratorOptions, TypingsGenerator } from './TypingsGenerator';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IStringValueTyping {\r\n  exportName: string;\r\n  comment?: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IStringValueTypings {\r\n  typings: IStringValueTyping[];\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IStringValuesTypingsGeneratorOptions\r\n  extends ITypingsGeneratorOptions<IStringValueTypings | undefined> {\r\n  /**\r\n   * Setting this option wraps the typings export in a default property.\r\n   */\r\n  exportAsDefault?: boolean;\r\n\r\n  /**\r\n   * When `exportAsDefault` is true, this optional setting determines the interface name\r\n   * for the default wrapped export. Ignored when `exportAsDefault` is false.\r\n   */\r\n  exportAsDefaultInterfaceName?: string;\r\n}\r\n\r\nconst EXPORT_AS_DEFAULT_INTERFACE_NAME: string = 'IExport';\r\n\r\n/**\r\n * This is a simple tool that generates .d.ts files for non-TS files that can be represented as\r\n * a simple set of named string exports.\r\n *\r\n * @public\r\n */\r\nexport class StringValuesTypingsGenerator extends TypingsGenerator {\r\n  public constructor(options: IStringValuesTypingsGeneratorOptions) {\r\n    super({\r\n      ...options,\r\n      parseAndGenerateTypings: async (fileContents: string, filePath: string) => {\r\n        const stringValueTypings: IStringValueTypings | undefined = await options.parseAndGenerateTypings(\r\n          fileContents,\r\n          filePath\r\n        );\r\n\r\n        if (stringValueTypings === undefined) {\r\n          return;\r\n        }\r\n\r\n        const outputLines: string[] = [];\r\n        const interfaceName: string = options.exportAsDefaultInterfaceName\r\n          ? options.exportAsDefaultInterfaceName\r\n          : EXPORT_AS_DEFAULT_INTERFACE_NAME;\r\n        let indent: string = '';\r\n        if (options.exportAsDefault) {\r\n          outputLines.push(`export interface ${interfaceName} {`);\r\n          indent = '  ';\r\n        }\r\n\r\n        for (const stringValueTyping of stringValueTypings.typings) {\r\n          const { exportName, comment } = stringValueTyping;\r\n\r\n          if (comment && comment.trim() !== '') {\r\n            outputLines.push(\r\n              `${indent}/**`,\r\n              `${indent} * ${comment.replace(/\\*\\//g, '*\\\\/')}`,\r\n              `${indent} */`\r\n            );\r\n          }\r\n\r\n          if (options.exportAsDefault) {\r\n            outputLines.push(`${indent}'${exportName}': string;`, '');\r\n          } else {\r\n            outputLines.push(`export declare const ${exportName}: string;`, '');\r\n          }\r\n        }\r\n\r\n        if (options.exportAsDefault) {\r\n          outputLines.push(\r\n            '}',\r\n            '',\r\n            `declare const strings: ${interfaceName};`,\r\n            '',\r\n            'export default strings;'\r\n          );\r\n        }\r\n\r\n        return outputLines.join(EOL);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}