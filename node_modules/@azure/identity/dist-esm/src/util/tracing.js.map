{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../../src/util/tracing.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,SAAS,EAA2B,MAAM,qBAAqB,CAAC;AACzE,OAAO,EAAQ,QAAQ,EAAgC,MAAM,oBAAoB,CAAC;AAElF;;;;GAIG;AACH,MAAM,UAAU,UAAU,CACxB,aAAqB,EACrB,UAA2B,EAAE;IAE7B,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAE3B,MAAM,cAAc,mBAClB,WAAW,EAAE,EAAE,IACZ,OAAO,CAAC,cAAc,CAC1B,CAAC;IAEF,MAAM,WAAW,mCACZ,cAAc,CAAC,WAAW,KAC7B,IAAI,EAAE,QAAQ,CAAC,QAAQ,GACxB,CAAC;IAEF,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,kBAAkB,aAAa,EAAE,EAAE,WAAW,CAAC,CAAC;IAC9E,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;IAEnD,IAAI,UAAU,GAAG,OAAO,CAAC;IACzB,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;QACtB,UAAU,mCACL,OAAO,KACV,cAAc,kCACT,cAAc,KACjB,WAAW,kCACN,cAAc,CAAC,WAAW,KAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EACtB,UAAU,kCACL,WAAW,CAAC,UAAU,KACzB,cAAc,EAAE,eAAe,YAItC,CAAC;KACH;IAED,OAAO;QACL,IAAI;QACJ,OAAO,EAAE,UAAU;KACpB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-http\";\nimport { getTracer, OperationTracingOptions } from \"@azure/core-tracing\";\nimport { Span, SpanKind, SpanOptions as OTSpanOptions } from \"@opentelemetry/api\";\n\n/**\n * Creates a span using the global tracer.\n * @param name - The name of the operation being performed.\n * @param options - The options for the underlying http request.\n */\nexport function createSpan(\n  operationName: string,\n  options: GetTokenOptions = {}\n): { span: Span; options: GetTokenOptions } {\n  const tracer = getTracer();\n\n  const tracingOptions: OperationTracingOptions = {\n    spanOptions: {},\n    ...options.tracingOptions\n  };\n\n  const spanOptions: OTSpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(`Azure.Identity.${operationName}`, spanOptions);\n  span.setAttribute(\"az.namespace\", \"Microsoft.AAD\");\n\n  let newOptions = options;\n  if (span.isRecording()) {\n    newOptions = {\n      ...options,\n      tracingOptions: {\n        ...tracingOptions,\n        spanOptions: {\n          ...tracingOptions.spanOptions,\n          parent: span.context(),\n          attributes: {\n            ...spanOptions.attributes,\n            \"az.namespace\": \"Microsoft.AAD\"\n          }\n        }\n      }\n    };\n  }\n\n  return {\n    span,\n    options: newOptions\n  };\n}\n"]}