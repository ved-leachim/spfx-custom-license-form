import { Validate, _BrowserDetection, _BrowserUtilities } from '@microsoft/sp-core-library';
import { Flights } from '../common/Flights';
import SPThemeProvider from './SPThemeProvider';
import DialogManagerConfiguration from '../extensibility/DialogManagerConfiguration';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { setupSkipToContentButton } from '@ms/odsp-shared-react/lib/components/SkipToContentButton';
import { PageContext } from '@microsoft/sp-page-context';
import { shouldLoadAppBar } from '@ms/odsp-datasources/lib/interfaces/ISpPageContext';
import styles from './SPPageChrome.module.scss';
import { Killswitches } from '../common/Killswitches';
var SPPageChrome = /** @class */ (function () {
    function SPPageChrome(serviceScope, parentChrome, currentAppId) {
        this._isDisposed = false;
        this.spAppBarDisabledApps = new Set([
            /* tenant-admin */ '6e1c1298-7b8e-4a08-a24f-769aafae45c5',
            /* content center app */ 'fca88529-7990-4631-aa5c-748ffe04799b'
        ]);
        this._masterChrome = parentChrome;
        var pageContext = !Killswitches.ShouldLoadAppBarKillSwitchActivated() && serviceScope.consume(PageContext.serviceKey);
        this._createPageChrome(currentAppId, pageContext && pageContext.legacyPageContext);
        // The default configuration for dialog manager. This may be changed by the application later.
        // Note: This will not run if the application does not own the page chrome and hence must be called
        // by the application if they choose to use the dialog manager.
        DialogManagerConfiguration.instance.initialize(this.dialogContainerDiv);
        this._spThemeProvider = new SPThemeProvider(serviceScope);
    }
    SPPageChrome.prototype.changeSuiteNavHeight = function (pixels) {
        var top = parseInt(pixels, 10) + 'px';
        this.suiteNavDiv.style.height = top;
    };
    Object.defineProperty(SPPageChrome.prototype, "themeProvider", {
        get: function () {
            return this._spThemeProvider;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Shows the page chrome in the current document.
     */
    SPPageChrome.prototype.show = function () {
        if (!this._isDisposed) {
            if (Flights.isHydrationEnabled) {
                var chromeDiv = document.getElementById('chromeDiv');
                if (chromeDiv && chromeDiv.firstChild) {
                    // move snapshot into proper div
                    this.appDiv.append(chromeDiv.firstChild);
                    chromeDiv.remove();
                }
            }
            this._masterChrome.show();
        }
    };
    /**
     * Disposes the Chrome
     */
    SPPageChrome.prototype.dispose = function () {
        if (!this._isDisposed) {
            // tslint:disable:no-any
            delete this.appDiv;
            delete this.propertyPaneContainerDiv;
            if (this.appAndPropertyPaneDiv) {
                delete this.appAndPropertyPaneDiv;
            }
            delete this.dialogContainerDiv;
        }
        // tslint:enable:no-any
        this._isDisposed = true;
    };
    Object.defineProperty(SPPageChrome.prototype, "isDisposed", {
        /**
         * Returns true if the object has already been disposed, otherwise false.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns true if there is an app id and the app bar is NOT supposed to be shown on the app
     */
    SPPageChrome.prototype.isAppBarDisabledForApp = function (currentAppId) {
        return this.spAppBarDisabledApps.has(currentAppId);
    };
    /**
     * Creates div elements that are used to render the Standard Page Chrome for
     * client-side applications. The structure of the Page Chrome is:
     *
     * SPPageChrome - Parent div for client-side applications
     * -SuiteNav - O365 SuiteNav
     * --App - Div Element where the application will be rendered.
     */
    SPPageChrome.prototype._createPageChrome = function (currentAppId, pageContext) {
        _PerformanceLogger.devMark('SPPageChrome.createPageChrome');
        setupSkipToContentButton();
        Validate.isNotNullOrUndefined(this._masterChrome, 'masterChrome');
        Validate.isNotDisposed(this._masterChrome, 'masterChrome');
        Validate.isNotNullOrUndefined(this._masterChrome.chromeDiv, 'chromeDiv');
        Validate.isNotNullOrUndefined(this._masterChrome.suiteNavDiv, 'suiteNavDiv');
        this.suiteNavDiv = this._masterChrome.suiteNavDiv;
        var isMobileBrowser = _BrowserDetection.getBrowserInformation().isMobile;
        var enableMobileAppBar = isMobileBrowser && !Killswitches.AddSPAppBarMobileKillSwitchActivated();
        var isAppBarPlatformEnabled = !isMobileBrowser || enableMobileAppBar;
        var useMobileBreakpointKSActivated = Killswitches.UseMobileBreakpointAppBarKillSwitchActivated();
        if (Flights.serviceWorker || Flights.isHydrationEnabled) {
            this.appDiv = document.getElementById('spPageChromeAppDiv');
        }
        if (this.appDiv) {
            this.appAndPropertyPaneDiv = this.appDiv.parentElement;
        }
        else {
            // Application div
            this.appDiv = document.createElement('div');
            this.appDiv.setAttribute('class', "SPPageChrome-app");
            this.appDiv.setAttribute('id', 'spPageChromeAppDiv');
            this.appDiv.setAttribute('data-sp-feature-tag', 'Page Chrome');
            this.appDiv.setAttribute('data-sp-feature-instance-id', '_Page Chrome');
            this.appDiv.setAttribute('data-sp-a11y-navigatebyhierarchy', 'true');
            // Application and PropertyPane container div
            this.appAndPropertyPaneDiv = document.createElement('div');
            var appBarParentMobileClass = 'sp-appBar-parent-mobile';
            this.appAndPropertyPaneDiv.setAttribute('class', 'spAppAndPropertyPanelContainer');
            if (useMobileBreakpointKSActivated && enableMobileAppBar) {
                this.appAndPropertyPaneDiv.classList.add(appBarParentMobileClass, styles.spAppBarParentMobile);
            }
            this.appAndPropertyPaneDiv.appendChild(this.appDiv);
        }
        // PropertyPaneContainer div
        this.propertyPaneContainerDiv = document.createElement('div');
        this.propertyPaneContainerDiv.setAttribute('class', "spPropertyPaneContainer " + styles.spPageContentTransition);
        this.propertyPaneContainerDiv.setAttribute('id', 'spPropertyPaneContainer');
        this.appAndPropertyPaneDiv.appendChild(this.propertyPaneContainerDiv);
        // Placeholder div to reserve space for rendering the SPAppBar
        if (!Killswitches.isAddSPAppBarToPageChromKillSwitchActivated() &&
            Flights.isSPAppBarEnabled &&
            !this.isAppBarDisabledForApp(currentAppId) &&
            (Killswitches.ShouldLoadAppBarKillSwitchActivated() ||
                (pageContext && shouldLoadAppBar(pageContext))) &&
            (Killswitches.isDisableSPAppBarEmbeddedKillSwitchActivated() || !_BrowserUtilities.isEmbedded()) &&
            isAppBarPlatformEnabled) {
            var appBarDiv = document.getElementById('sp-appBar');
            if (!appBarDiv) {
                appBarDiv = document.createElement('div');
                appBarDiv.setAttribute('id', 'sp-appBar');
                appBarDiv.setAttribute('class', "sp-appBar" + (useMobileBreakpointKSActivated && enableMobileAppBar ? ' sp-appBar-mobile' : ''));
            }
            this.appAndPropertyPaneDiv.insertBefore(appBarDiv, this.appAndPropertyPaneDiv.firstChild);
        }
        // Dialog Container Div
        this.dialogContainerDiv = document.createElement('div');
        this.dialogContainerDiv.setAttribute('id', 'spDialogContainerDiv');
        // Compose the page chrome
        this._masterChrome.chromeDiv.appendChild(this.appAndPropertyPaneDiv);
        this._masterChrome.chromeDiv.appendChild(this.dialogContainerDiv);
    };
    return SPPageChrome;
}());
export default SPPageChrome;
//# sourceMappingURL=SPPageChrome.js.map