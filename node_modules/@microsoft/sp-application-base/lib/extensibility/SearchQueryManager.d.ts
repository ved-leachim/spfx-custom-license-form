import { ServiceKey, ServiceScope } from '@microsoft/sp-core-library';
import { _IPreloadedData } from '@microsoft/sp-loader';
/**
 * Search query manager is used to get the search query in SPFx.
 * It supports Search query modifier extensions that can enrich the search query, and supports cases where the user
 * comes from classic pages to modern.
 *
 * @internal
 */
export default class SearchQueryManager {
    static readonly serviceKey: ServiceKey<SearchQueryManager>;
    private _preloadedData;
    private _extensionManagerPromise;
    private _serviceScope;
    private _isInitialized;
    private _areExtensionsLoaded;
    constructor(serviceScope: ServiceScope);
    initialize(preloadedData: _IPreloadedData): Promise<void>;
    /**
     * Update SearchQueryManager from location
     * @param location - next location Data
     */
    updateFromLocation(location: Location): Promise<void>;
    isInitialized(): boolean;
    /**
     * Get the search query from the current URL.
     */
    getSearchQuery(): Promise<string | undefined>;
    private _getUrlSearchQuery;
    /**
     * Returns true if there is any SearchQueryModifier extension.
     * When using query params, it just checks if there is any custom action regardless of type.
     * This is exclusively a debug scenario and it's faster and smaller code, considering this runs in a core scenario.
     */
    private _hasExtensions;
    private _getExtensionManager;
    private _initializeExtensions;
    /**
     * Updates the search box text.
     * If there is no search query it doesn't do anything to preserve what the user originally typed.
     */
    private _updateSearchBoxText;
}
//# sourceMappingURL=SearchQueryManager.d.ts.map