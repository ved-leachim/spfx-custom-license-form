import { __extends } from "tslib";
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { SPEvent } from '@microsoft/sp-core-library';
import BaseApplication from './BaseApplication';
/**
 * Context object for a client-side applications.
 *
 * @alpha
 */
var BaseApplicationContext = /** @class */ (function (_super) {
    __extends(BaseApplicationContext, _super);
    /** @internal */
    function BaseApplicationContext(parameters) {
        var _this = _super.call(this, parameters) || this;
        _this._disposed = false;
        _this._preloadedData = parameters.navigator.preloadedData;
        _this._navigator = parameters.navigator;
        _this._chrome = parameters.chrome;
        _this._loadType = parameters.loadType;
        _this._prefetchedDataEvent = new SPEvent(BaseApplication._prefetchedDataEventName);
        return _this;
    }
    /**
     * Diposes the application context
     */
    BaseApplicationContext.prototype.dispose = function () {
        if (this._disposed) {
            return;
        }
        if (this._navigator) {
            this._navigator = undefined;
        }
        _super.prototype.dispose.call(this);
        this._disposed = true;
    };
    /**
     * Sets the SuiteNav manager in the application context.
     */
    BaseApplicationContext.prototype.initializeSuiteNavManager = function (suiteNavManager) {
        this._suiteNavManager = suiteNavManager;
    };
    Object.defineProperty(BaseApplicationContext.prototype, "preloadedData", {
        /**
         * The preloaded data used by SPFx
         */
        get: function () {
            return this._preloadedData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseApplicationContext.prototype, "navigator", {
        /**
         * The application navigator
         */
        get: function () {
            return this._navigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseApplicationContext.prototype, "chrome", {
        /**
         * The application page chrome
         */
        get: function () {
            return this._chrome;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseApplicationContext.prototype, "loadType", {
        /**
         * The application load type
         */
        get: function () {
            return this._loadType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseApplicationContext.prototype, "prefetchedDataEvent", {
        /**
         * An event that gets fired when the application prefetched data is available.
         */
        get: function () {
            return this._prefetchedDataEvent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseApplicationContext.prototype, "suiteNavManager", {
        /**
         * The SuiteNav manager
         *
         * @remarks
         * The SuiteNav manager is defined only after the application starts rendering.
         * Chromeless application do not have a SuiteNav manager.
         * Applications that disable the suiteNav do not have a SuiteNav manager.
         */
        get: function () {
            return this._suiteNavManager;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * DO NOT call this from outside the framework. SPFx calls this during second flush
     * to update contextual state.
     *
     * @internal
     */
    // @ts-ignore This gets called by the framework, hiding from the public interface see IPrivateBaseApplicationContext
    BaseApplicationContext.prototype._updateSecondFlushData = function (data) {
        var _a;
        this._preloadedData = data;
        (_a = this._navigator) === null || _a === void 0 ? void 0 : _a._setPreloadedData(data);
    };
    return BaseApplicationContext;
}(BaseComponentContext));
export default BaseApplicationContext;
//# sourceMappingURL=BaseApplicationContext.js.map