import { __extends } from "tslib";
import { BaseExtension } from '@microsoft/sp-extension-base';
/**
 * Scenario for the search query modifier.
 *
 * @beta
 */
export var SearchQueryScenario;
(function (SearchQueryScenario) {
    /**
     * Search results scenario.
     */
    SearchQueryScenario[SearchQueryScenario["SearchResults"] = 1] = "SearchResults";
    /**
     * Search suggestions scenario.
     */
    SearchQueryScenario[SearchQueryScenario["SearchSuggestions"] = 2] = "SearchSuggestions";
})(SearchQueryScenario || (SearchQueryScenario = {}));
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that can modify the search query.
 *
 * In the component manifest, the "extensionType" should be set to "SearchQueryModifier".
 *
 * @beta
 */
var BaseSearchQueryModifier = /** @class */ (function (_super) {
    __extends(BaseSearchQueryModifier, _super);
    function BaseSearchQueryModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BaseSearchQueryModifier.prototype, "timeout", {
        /**
         * Timeout for the search query modifier in milliseconds.
         * If the execution takes longer than the timeout, the original query will be used instead of the modified one.
         *
         * @virtual
         */
        get: function () {
            return 10000;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a modified search query.
     *
     * @param query - Query to modify.
     * @param scenario - Search scenario.
     * @returns - Modified query.
     *
     * @virtual
     */
    BaseSearchQueryModifier.prototype.modifySearchQuery = function (query, scenario) {
        return Promise.resolve(query);
    };
    return BaseSearchQueryModifier;
}(BaseExtension));
export default BaseSearchQueryModifier;
//# sourceMappingURL=BaseSearchQueryModifier.js.map