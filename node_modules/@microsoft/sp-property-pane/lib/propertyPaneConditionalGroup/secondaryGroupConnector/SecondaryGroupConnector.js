import { __decorate, __extends } from "tslib";
import * as React from 'react';
import { autobind, css, BaseComponent, Callout, DefaultButton, DirectionalHint } from '@microsoft/office-ui-fabric-react-bundle';
import { _BrowserDetection, _OS } from '@microsoft/sp-core-library';
import styles from '../PropertyPaneConditionalGroup.module.scss';
import * as Strings from '../../loc/Strings.resx';
var SecondaryGroupConnector = /** @class */ (function (_super) {
    __extends(SecondaryGroupConnector, _super);
    function SecondaryGroupConnector(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isCalloutVisible: false
        };
        return _this;
    }
    SecondaryGroupConnector.prototype.render = function () {
        var isCalloutVisible = this.state.isCalloutVisible;
        var onConnectToSourceClick = this.props.onConnectToSourceClick;
        var secondaryConnectorClassName = css(styles.alternateFieldsConnector, _BrowserDetection.getBrowserInformation().os === _OS.Mac ? styles.mac_only : '');
        return (React.createElement("div", { className: secondaryConnectorClassName, role: 'button', onClick: this._handleConnectorClick },
            React.createElement("div", { ref: this._resolveRef('_ellipsisElement'), title: this.props.tooltip },
                React.createElement("span", null, Strings.DynamicDataSecondaryGroupButtonLabel)),
            isCalloutVisible && (React.createElement("div", { className: styles.callout },
                React.createElement(Callout, { role: 'alertdialog', isBeakVisible: false, setInitialFocus: true, directionalHint: DirectionalHint.bottomCenter, onDismiss: this._handleCalloutDismiss, target: this._ellipsisElement },
                    React.createElement(DefaultButton, { "data-automation-id": 'connectToSource', onClick: onConnectToSourceClick, iconProps: { iconName: 'Plug' }, ariaDescription: Strings.ConnectToDynamicDataSourceDescription, text: Strings.ConnectToDynamicDataSource }))))));
    };
    SecondaryGroupConnector.prototype._handleConnectorClick = function () {
        this.setState({
            isCalloutVisible: !this.state.isCalloutVisible
        });
    };
    SecondaryGroupConnector.prototype._handleCalloutDismiss = function () {
        this.setState({
            isCalloutVisible: false
        });
    };
    __decorate([
        autobind
    ], SecondaryGroupConnector.prototype, "_handleConnectorClick", null);
    __decorate([
        autobind
    ], SecondaryGroupConnector.prototype, "_handleCalloutDismiss", null);
    return SecondaryGroupConnector;
}(BaseComponent));
export default SecondaryGroupConnector;
//# sourceMappingURL=SecondaryGroupConnector.js.map