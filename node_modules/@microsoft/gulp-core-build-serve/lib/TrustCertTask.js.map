{"version":3,"file":"TrustCertTask.js","sourceRoot":"","sources":["../src/TrustCertTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,gEAA2E;AAE3E,oFAAwF;AACxF,oEAAwD;AAExD;;;;;;GAMG;AACH,MAAa,aAAc,SAAQ,0BAAc;IAI/C;QACE,KAAK,CAAC,YAAY,CAAC,CAAC;QACpB,IAAI,CAAC,iBAAiB,GAAG,IAAI,qCAAmB,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,4BAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACxD,CAAC;IAEM,WAAW,CAAC,IAAiB,EAAE,gBAA0C;QAC9E,MAAM,kBAAkB,GAAuB,IAAI,8CAAkB,EAAE,CAAC;QACxE,MAAM,WAAW,GAAiB,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE7F,IAAI,WAAW,CAAC,cAAc,IAAI,WAAW,CAAC,MAAM,EAAE;YACpD,gBAAgB,EAAE,CAAC;SACpB;aAAM;YACL,gBAAgB,CAAC,yCAAyC,CAAC,CAAC;SAC7D;IACH,CAAC;CACF;AApBD,sCAoBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { GulpTask, GCBTerminalProvider } from '@microsoft/gulp-core-build';\r\nimport * as Gulp from 'gulp';\r\nimport { ICertificate, CertificateManager } from '@rushstack/debug-certificate-manager';\r\nimport { Terminal } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * This task generates and trusts a development certificate. The certificate is self-signed\r\n *  and stored, along with its private key, in the user's home directory. On Windows, it's\r\n *  trusted as a root certification authority in the user certificate store. On macOS, it's\r\n *  trusted as a root cert in the keychain. On other platforms, the certificate is generated\r\n *  and signed, but the user must trust it manually.\r\n */\r\nexport class TrustCertTask extends GulpTask<void> {\r\n  private _terminalProvider: GCBTerminalProvider;\r\n  private _terminal: Terminal;\r\n\r\n  public constructor() {\r\n    super('trust-cert');\r\n    this._terminalProvider = new GCBTerminalProvider(this);\r\n    this._terminal = new Terminal(this._terminalProvider);\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): void {\r\n    const certificateManager: CertificateManager = new CertificateManager();\r\n    const certificate: ICertificate = certificateManager.ensureCertificate(true, this._terminal);\r\n\r\n    if (certificate.pemCertificate && certificate.pemKey) {\r\n      completeCallback();\r\n    } else {\r\n      completeCallback('Error trusting development certificate.');\r\n    }\r\n  }\r\n}\r\n"]}