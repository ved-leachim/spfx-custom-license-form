{"version":3,"file":"EslintRunner.js","sourceRoot":"","sources":["../../src/shared/EslintRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAG7B,2CAAwC;AACxC,2CAAwC;AAExC,mEAGiC;AAiBjC,IAAK,cAIJ;AAJD,WAAK,cAAc;IACjB,iDAAO,CAAA;IACP,mDAAQ,CAAA;IACR,qDAAS,CAAA;AACX,CAAC,EAJI,cAAc,KAAd,cAAc,QAIlB;AA0BD,MAAa,YAAa,SAAQ,6CAAwC;IAGxE,YAAmB,WAA8B,EAAE,QAAgB,EAAE,gBAAmC;QACtG,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,CAC7B,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,SAAS,EACd;YACE,WAAW,EAAE,qBAAS,CAAC,iBAAiB;YACxC,WAAW,EAAE,qBAAS,CAAC,iBAAiB;YACxC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC;SAC9C,CACF,CAAC;IACJ,CAAC;IAEM,MAAM;QACX,MAAM,IAAI,GAAa;YACrB,UAAU,EAAE,MAAM;YAClB,mBAAmB;SACpB,CAAC;QAEF,MAAM,YAAY,GAAa,EAAE,CAAC;QAElC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YAC5B,IAAI,EAAE,IAAI;YACV,qCAAqC;YACrC,OAAO,EAAE,CAAC,IAAY,EAAE,EAAE;gBACxB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,yCAAyC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC5F,CAAC;YACD,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;gBACvB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrC,CAAC;YACD,OAAO,EAAE,CAAC,IAAY,EAAE,SAAkB,EAAE,OAAmB,EAAE,MAA8B,EAAE,EAAE;gBACjG,MAAM,OAAO,GAAW,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAE9C,IAAI;oBACF,MAAM,iBAAiB,GAAwB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAEnE,MAAM,gBAAgB,GAA2B,IAAI,CAAC,YAAY,CAAC,cAAc;wBAC/E,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS;wBAC7B,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;oBAClC,KAAK,MAAM,gBAAgB,IAAI,iBAAiB,EAAE;wBAChD,MAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EACrF,gBAAgB,CAAC,QAAQ,CAAC,CAAC;wBAC7B,KAAK,MAAM,OAAO,IAAI,gBAAgB,CAAC,QAAQ,EAAE;4BAC/C,gBAAgB,CACd,YAAY,EACZ,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,OAAO,CAChB,CAAC;yBACH;qBACF;iBACF;gBAAC,OAAO,CAAC,EAAE;oBACV,iGAAiG;oBACjG,+FAA+F;oBAC/F,uBAAuB;oBACvB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBACxC;gBAED,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,SAAS,CAAC,EAAE;oBACjE,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC/C;qBAAM;oBACL,OAAO,EAAE,CAAC;iBACX;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAtED,oCAsEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { ITerminalProvider } from '@microsoft/node-core-library';\r\n\r\nimport { CmdRunner } from './CmdRunner';\r\nimport { ToolPaths } from './ToolPaths';\r\nimport { ILintRunnerConfig } from './ILintRunnerConfig';\r\nimport {\r\n  RushStackCompilerBase,\r\n  WriteFileIssueFunction\r\n} from './RushStackCompilerBase';\r\n\r\ninterface IEslintFileResult {\r\n  // Example: \"/full/path/to/File.ts\"\r\n  filePath: string;\r\n\r\n  // Full content of the source file\r\n  source: string;\r\n\r\n  messages: IEslintMessage[];\r\n\r\n  errorCount: number;\r\n  warningCount: number;\r\n  fixableErrorCount: number;\r\n  fixableWarningCount: number;\r\n}\r\n\r\nenum EslintSeverity {\r\n  Off = 0,\r\n  Warn = 1,\r\n  Error = 2\r\n}\r\n\r\ninterface IEslintMessage {\r\n  // The line number starts at 1\r\n  line: number;\r\n  endLine: number;\r\n\r\n  // The column number starts at 1\r\n  column: number;\r\n  endColumn: number;\r\n\r\n  // Example: \"no-bitwise\"\r\n  ruleId: string;\r\n\r\n  // Example: \"unexpected\"\r\n  messageId: string;\r\n\r\n  // Example: \"Unexpected use of '&'.\"\r\n  message: string;\r\n\r\n  severity: EslintSeverity;\r\n\r\n  // Example: \"BinaryExpression\"\r\n  nodeType: string | null;\r\n}\r\n\r\nexport class EslintRunner extends RushStackCompilerBase<ILintRunnerConfig> {\r\n  private _cmdRunner: CmdRunner;\r\n\r\n  public constructor(taskOptions: ILintRunnerConfig, rootPath: string, terminalProvider: ITerminalProvider) {\r\n    super(taskOptions, rootPath, terminalProvider);\r\n    this._cmdRunner = new CmdRunner(\r\n      this._standardBuildFolders,\r\n      this._terminal,\r\n      {\r\n        packagePath: ToolPaths.eslintPackagePath,\r\n        packageJson: ToolPaths.eslintPackageJson,\r\n        packageBinPath: path.join('bin', 'eslint.js')\r\n      }\r\n    );\r\n  }\r\n\r\n  public invoke(): Promise<void> {\r\n    const args: string[] = [\r\n      '--format', 'json',\r\n      'src/**/*.{ts,tsx}'\r\n    ];\r\n\r\n    const stdoutBuffer: string[] = [];\r\n\r\n    return this._cmdRunner.runCmd({\r\n      args: args,\r\n      // ESLint errors are logged to stdout\r\n      onError: (data: Buffer) => {\r\n        this._terminal.writeErrorLine(`Unexpected STDERR output from ESLint: ${data.toString()}`);\r\n      },\r\n      onData: (data: Buffer) => {\r\n        stdoutBuffer.push(data.toString());\r\n      },\r\n      onClose: (code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void) => {\r\n        const dataStr: string = stdoutBuffer.join('');\r\n\r\n        try {\r\n          const eslintFileResults: IEslintFileResult[] = JSON.parse(dataStr);\r\n\r\n          const eslintErrorLogFn: WriteFileIssueFunction = this._taskOptions.displayAsError\r\n            ? this._taskOptions.fileError\r\n            : this._taskOptions.fileWarning;\r\n          for (const eslintFileResult of eslintFileResults) {\r\n            const pathFromRoot: string = path.relative(this._standardBuildFolders.projectFolderPath,\r\n              eslintFileResult.filePath);\r\n            for (const message of eslintFileResult.messages) {\r\n              eslintErrorLogFn(\r\n                pathFromRoot,\r\n                message.line,\r\n                message.column,\r\n                message.ruleId,\r\n                message.message\r\n              );\r\n            }\r\n          }\r\n        } catch (e) {\r\n          // If we fail to parse the JSON, it's likely ESLint encountered an error parsing the config file,\r\n          // or it experienced an inner error. In this case, log the output as an error regardless of the\r\n          // displayAsError value\r\n          this._terminal.writeErrorLine(dataStr);\r\n        }\r\n\r\n        if (this._taskOptions.displayAsError && (code !== 0 || hasErrors)) {\r\n          reject(new Error(`exited with code ${code}`));\r\n        } else {\r\n          resolve();\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}