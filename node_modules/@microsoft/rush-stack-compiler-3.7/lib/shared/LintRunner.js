"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const TslintRunner_1 = require("./TslintRunner");
const EslintRunner_1 = require("./EslintRunner");
const RushStackCompilerBase_1 = require("./RushStackCompilerBase");
/**
 * @beta
 */
class LintRunner extends RushStackCompilerBase_1.RushStackCompilerBase {
    constructor(taskOptions, rootPath, terminalProvider) {
        super(taskOptions, rootPath, terminalProvider);
        this._eslintRunner = new EslintRunner_1.EslintRunner(taskOptions, rootPath, terminalProvider);
        this._tslintRunner = new TslintRunner_1.TslintRunner(taskOptions, rootPath, terminalProvider);
    }
    invoke() {
        return __awaiter(this, void 0, void 0, function* () {
            const tslintFilePath = path.join(this._standardBuildFolders.projectFolderPath, 'tslint.json');
            if (node_core_library_1.FileSystem.exists(tslintFilePath)) {
                yield this._tslintRunner.invoke();
            }
            // ESLint supports too many different filenames and formats for its config file.  To avoid
            // needless inconsistency, we only support JSON and JavaScript.  They are the most conventional formats,
            // and have useful tradeoffs:  JSON is deterministic, whereas JavaScript enables certain workarounds
            // for limitations of the format.
            const eslintFilePath1 = path.join(this._standardBuildFolders.projectFolderPath, '.eslintrc.js');
            const eslintFilePath2 = path.join(this._standardBuildFolders.projectFolderPath, '.eslintrc.json');
            if (node_core_library_1.FileSystem.exists(eslintFilePath1) || node_core_library_1.FileSystem.exists(eslintFilePath2)) {
                yield this._eslintRunner.invoke();
            }
        });
    }
}
exports.LintRunner = LintRunner;
//# sourceMappingURL=LintRunner.js.map