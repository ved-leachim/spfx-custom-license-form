import Version from './Version';
/**
 * Enum to identify browser.
 * @internal
 */
export declare const Browser: {
    readonly Other: 0;
    readonly Chrome: 1;
    readonly Edge: 2;
    readonly Firefox: 3;
    readonly IE: 4;
    readonly Safari: 5;
    readonly EdgeChromium: 6;
};
/**
 * @internal
 */
export declare type Browser = typeof Browser[keyof typeof Browser];
/**
 * Enum to identify OS.
 * @internal
 */
export declare const OS: {
    readonly Other: 0;
    readonly Android: 1;
    readonly IOS: 2;
    readonly Linux: 3;
    readonly Mac: 4;
    readonly Windows: 5;
    readonly WindowsPhone: 6;
};
/**
 * @internal
 */
export declare type OS = typeof OS[keyof typeof OS];
/**
 * Information from the browser.
 * Includes browser name and version, and OS name and version.
 *
 * If the browser or the OS are not recognized, uses value "Other"
 * If the version is not recognized, the value will be undefined.
 *
 * @internal
 */
export interface IBrowserInformation {
    /**
     * Browser name, as an enum. Other if it's not recognized.
     */
    browser: Browser;
    /**
     * Browser version. undefined if it's not recognized.
     */
    browserVersion?: Version;
    /**
     * Whether is ipad.
     */
    isIpad?: boolean;
    /**
     * Whether is mobile.
     */
    isMobile?: boolean;
    /**
     * OS name, as an enum. Other if it's not recognized.
     */
    os: OS;
    /**
     * OS version. undefined if it's not recognized.
     */
    osVersion?: string;
    /**
     * Original User Agent that was used to recognize all data.
     */
    userAgent?: string;
}
/**
 * Provides with information from the browser.
 * @internal
 */
export default class BrowserDetection {
    private static _browserInformation;
    /**
     * Returns information from the browser, calculated from the user agent.
     *
     * @param userAgent - Optional. If provided, it will calculate the data from the input parameter,
     *                      instead of the user agent from the browser.
     * @returns Browser information, with browser and OS data.
     */
    static getBrowserInformation(userAgent?: string): IBrowserInformation;
    private static getUserAgent;
    private static buildBrowserInformation;
    private static fillBrowser;
    private static fillOS;
}
//# sourceMappingURL=BrowserDetection.d.ts.map