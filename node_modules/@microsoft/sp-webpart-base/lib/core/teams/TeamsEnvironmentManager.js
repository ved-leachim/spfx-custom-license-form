/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
import { _BrowserUtilities } from '@microsoft/sp-core-library';
/**
 * Wrap a Teams SDK function in a Promise. When the callback is invoked,
 * the promise will resolve to the callback arguments.
 * Needed, because we want a guarantee that the execution has finished and the callback func has been called.
 *
 * @param f - Teams SDK function.
 * @returns A promise resolving to the callback arguments.
 */
function promisify(f) {
    return new Promise(function (resolve, reject) {
        try {
            // resolve the promise when the callback is invoked to the callback arguments
            f(function (t) { return resolve(t); });
        }
        catch (e) {
            reject(e);
        }
    });
}
/**
 * Get and store teams context.
 */
var TeamsEnvironmentManager = /** @class */ (function () {
    function TeamsEnvironmentManager() {
    }
    // set teamsContext
    TeamsEnvironmentManager.initialize = function () {
        if (!_BrowserUtilities.isTeamsHosted() || TeamsEnvironmentManager.teamsContext) {
            return Promise.resolve();
        }
        return import('@microsoft/teams-js' /* webpackChunkName: 'spfx-core-teamsenv-teamsJs' */).then(function (teamsJS) {
            teamsJS.initialize();
            return promisify(teamsJS.getContext).then(function (context) {
                TeamsEnvironmentManager.teamsContext = context;
                TeamsEnvironmentManager.teamsJs = teamsJS;
            });
        });
    };
    TeamsEnvironmentManager.getTeamsContext = function () {
        return TeamsEnvironmentManager.teamsContext;
    };
    TeamsEnvironmentManager.getTeamsJs = function () {
        return TeamsEnvironmentManager.teamsJs;
    };
    return TeamsEnvironmentManager;
}());
export { TeamsEnvironmentManager };
//# sourceMappingURL=TeamsEnvironmentManager.js.map