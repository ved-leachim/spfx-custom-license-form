// Copyright (c) Microsoft. All rights reserved.
// This file contains code for the ClientSideWebPartManager. The web part host is expected to
// load and interact with web parts only through the web part manager APIs.
import { _LegacyThirdPartyFabricCoreLoader } from '@microsoft/sp-component-base';
import { DisplayMode, Environment, EnvironmentType, Guid, SPEvent, Text, UrlQueryParameterCollection, UrlUtilities, Validate, _SPEventManager, _SPFlight, Session } from '@microsoft/sp-core-library';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { SPHttpClient } from '@microsoft/sp-http';
import { SPComponentLoader } from '@microsoft/sp-loader';
import * as lodash from '@microsoft/sp-lodash-subset';
import { PageContext } from '@microsoft/sp-page-context';
import * as loadThemedStyles from '@microsoft/load-themed-styles';
import PropertyPaneLoader from '../PropertyPaneLoader';
import { executeWithoutFailing } from '../utils/ExecuteWithoutFailing';
import KillSwitches from '../common/KillSwitches';
import BaseClientSideWebPart from './BaseClientSideWebPart';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import ClientSideWebPartStatusRenderer from './ClientSideWebPartStatusRenderer';
import { SPWebPartError, SPWebPartErrorCode } from './error/SPWebPartError';
import { WebPartIsolationLevel } from './IWebPartData';
import IframedWebPartControllerLoader from './loaders/IframedWebPartControllerLoader';
import WebPartContext from './WebPartContext';
import { WebPartFormFactor } from './WebPartFormFactor';
import WebPartLoadDataCollector from './WebPartLoadDataCollector';
import * as strings from './loc/Strings.resx';
import WebPartWidthCacheManager from './WebPartWidthCacheManager';
var THUMBNAIL_MAX_URL_LENGTH = 255; // All SharePoint URL field types have this limit
var DOCVIZ_REGEX = /(\/_layouts\/15\/getpreview.ashx\/?(|(\?(.*?)))$)/i;
// Flight name is 'SppplatIframedWebPartControllerLoadingFeature'
var SPPPLAT_IFRAMED_WEBPART_CONTROLLER_FLIGHT_ID = 1147;
/**
 * The ClientSideWebPartManager is expected to be the public interface to client-side web parts. Each
 * host is expected to create an instance of this class and manage loading of all web parts in that host
 * through that one instance. e.g. On one page, if there are multiple Canvas objects, each one could have
 * one instance of this class. If the page hosts web parts without the Canvas, then the page can have an
 * instance of this class. Overall this class is expected to provide the following purpose:
 *
 *    - Orchestrates loading of one or more web parts in a host.
 *    - It takes care of loading web part dependencies asynchronously. Each web part loads completely
 *      independently of the other web parts in the host.
 *    - Keep a reference to all the loaded web parts and help provide bulk operations on the web parts.
 *    - Help manage memory leak type issues in one place.
 *    - Integrate the web parts with the PropertyPane and other external entities.
 *    - Help troubleshoot web parts during escalations.
 *
 * @internal
 */
var ClientSideWebPartManager = /** @class */ (function () {
    /**
     * Initialize the ClientSideWebPartManager.
     *
     * @param host - Reference to the host. A web part host is a component that is deemed capable of hosting a web
     * part. Any component that implements the IWebPartHost is allowed to host a web part.
     */
    function ClientSideWebPartManager(host) {
        /**
         * Dictionary of all the active web parts in this instance of the manager.
         */
        this._webParts = new Map();
        /**
         * Web part status renderer instance scoped to this web part manager instance.
         */
        this._statusRenderer = new ClientSideWebPartStatusRenderer();
        /**
         * Dictionary of all the iframed web parts in this instance of the manager.
         */
        this._iframedWebpartInstanceIds = new Set();
        this._propertyPaneConsumerQueue = new Map();
        this._displayMode = DisplayMode.Read;
        Validate.isNotNullOrUndefined(host, 'host');
        this._host = host;
        this._pageContext = host.serviceScope.consume(PageContext.serviceKey);
        this._onContainerResize = this._onContainerResize.bind(this);
        this._onPropertyPaneNotifications = this._onPropertyPaneNotifications.bind(this);
        this.requestPropertyPaneAction = this.requestPropertyPaneAction.bind(this);
        this.isPropertyPaneRenderedByWebPart = this.isPropertyPaneRenderedByWebPart.bind(this);
        this.isPropertyPaneOpen = this.isPropertyPaneOpen.bind(this);
        if (ClientSideWebPartManager._webPartManagerList.length === 0) {
            this._initialzeOnResizeEventHandler();
        }
        ClientSideWebPartManager._webPartManagerList.push(this);
    }
    /**
     * Create the web part tag. Web part tag is a unique tag per web part instance and is used for logging and telemetry.
     */
    /* tslint:disable-next-line:no-any */
    ClientSideWebPartManager.createWebPartTag = function (manifest, instanceId) {
        return "WebPart." + manifest.alias + "." + (manifest.isInternal ? 'internal' : 'external') + "." + instanceId;
    };
    ClientSideWebPartManager._instanceOfBase = function (wp) {
        if (!wp) {
            return false;
        }
        else if (wp instanceof BaseClientSideWebPart) {
            return true;
        }
        else {
            /* tslint:disable-next-line:no-string-literal */
            var objectType = wp['__type'];
            return objectType === 'BaseClientSideWebPart' || objectType === 'BaseMRClientSideWebPart';
        }
    };
    ClientSideWebPartManager._getWebPartTag = function (wp) {
        var errorReason;
        if (!ClientSideWebPartManager._instanceOfBase(wp)) {
            errorReason = 'WebpartTag requested for non-webpart';
        }
        else if (!wp.context) {
            // wp not being defined is checked by _instanceOfBase
            errorReason = 'WebpartTag requested for instance that is missing context';
        }
        if (errorReason) {
            _TraceLogger.logError(ClientSideWebPartManager._logSource, new Error(errorReason));
            return undefined;
        }
        return wp.context.webPartTag;
    };
    ClientSideWebPartManager._isLoadingIsolatedWebPart = function (context) {
        return (_SPFlight.isEnabled(SPPPLAT_IFRAMED_WEBPART_CONTROLLER_FLIGHT_ID) &&
            // The next two conditions are neccessary because the same web part
            // will cross this path twice, once when determining if we should load in an
            // iframe and the second time is when we are loading the web part inside
            // the iframe.
            !!context.pageLayoutType &&
            context.pageLayoutType !== 'Isolated' &&
            (context.manifest.isolationLevel === WebPartIsolationLevel.DomIsolation ||
                // 'isolatedDomain' is a string and we want to check if 'isolatedDomain' has value,
                // instead of undefined or "".
                !!context.manifest.isolatedDomain));
    };
    ClientSideWebPartManager._getWebPartTitle = function (manifest, webPartData) {
        // If the web part has data, take the title from the data.
        var title = webPartData && webPartData.title;
        if (!title) {
            // If the web part has just been created from the Toolbox, use the title from the picked up entry.
            /* tslint:disable-next-line:no-any */
            title = manifest.title && manifest.title.default;
        }
        // If we still do not have a title use the title from the preconfigured entries
        return title || manifest.preconfiguredEntries[0].title.default;
    };
    ClientSideWebPartManager._loadDynamicComponentDependencies = function (components, webPartData, webPartTag) {
        var componentDependencies = (webPartData.serverProcessedContent && webPartData.serverProcessedContent.componentDependencies) || {};
        var dependencies = Object.keys(componentDependencies);
        for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
            var dep = dependencies_1[_i];
            var componentId = componentDependencies[dep];
            if (Guid.isValid(componentId)) {
                components.push(SPComponentLoader.loadComponentById(componentId));
            }
            else {
                throw new Error("Failed to load web part's (" + webPartTag + ") dynamic dependency " + dep + " with component id {" + componentId + "}");
            }
        }
    };
    Object.defineProperty(ClientSideWebPartManager, "isMaintenanceMode", {
        /**
         * Returns true if the maintenanceMode query string parameter is provided.
         */
        get: function () {
            var urlParams = new UrlQueryParameterCollection(window.location.href);
            return urlParams.getValue('maintenanceMode') === 'true';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Load a web part in the provided DOM element. Does the following steps
     *
     *    1. Validate params.
     *    2. Validate the web part manifest.
     *    3. Perform an async import of the web part modules from the provided manifest
     *      - i.e ClientSideWebPartManager._loadWebPartModules
     *    4. Instantiate and initialize the web part object
     *      - i.e. ClientSideWebPartManager._initializeWebPart
     *    5. Render the web part in the provided DOM element
     *      - i.e. ClientSideWebPartManager._renderWebPart
     *
     * If an error happens during any of the above steps, catch the error and log it.
     *
     * @param webPartManagerContext - web part manager context.
     */
    ClientSideWebPartManager.prototype.loadWebPart = function (webPartManagerContext) {
        var _this = this;
        try {
            var context_1 = webPartManagerContext;
            context_1.webPartTag = ClientSideWebPartManager.createWebPartTag(context_1.manifest, context_1.instanceId);
            if (ClientSideWebPartManager._isLoadingIsolatedWebPart(context_1)) {
                return this._loadIsolatedWebPart(context_1);
            }
            var monitor_1 = new _QosMonitor('WebPart.Load', true);
            var loadError_1;
            return new Promise(function (resolve) {
                _this._host.onBeforeWebPartLoad(context_1);
                resolve(_this._loadComponentModules(context_1));
            })
                .then(function (component) {
                _this._host.onAfterWebPartLoad(context_1);
                return component;
            })
                .catch(function (error) {
                loadError_1 = {
                    error: error,
                    stage: 'Load'
                };
                throw loadError_1;
            })
                .then(function (component) {
                if (KillSwitches.isTeamsContextKSActivated()) {
                    _this._host.onBeforeWebPartInitializeOld(context_1);
                    return _this._initializeWebPart(component, context_1);
                }
                return _this._host.onBeforeWebPartInitialize(context_1).then(function () {
                    return _this._initializeWebPart(component, context_1);
                });
            })
                .then(function (webPart) {
                _this._host.onAfterWebPartInitialize(context_1);
                return webPart;
            })
                .catch(function (error) {
                if (!loadError_1) {
                    loadError_1 = {
                        error: error,
                        stage: 'Initialize'
                    };
                }
                throw loadError_1;
            })
                .then(function (webPart) {
                _this._host.onBeforeWebPartRender(context_1);
                loadThemedStyles.flush();
                return webPart;
            })
                .then(function (webPart) { return _this._loadPropertyPaneModule(webPart); })
                .then(function (webPart) { return _this._renderWebPart(webPart); })
                .then(function (_a) {
                var webPart = _a.webPart, renderCompleteTime = _a.renderCompleteTime;
                if (!KillSwitches.isResolveRenderTimeActivated()) {
                    context_1.renderCompleteTime = renderCompleteTime;
                }
                _this._host.onAfterWebPartRender(context_1);
                ClassicPageUtils.removeFabricLinks();
                return _this._loadLegacyFabricCssIfRequired(context_1);
            })
                .catch(function (error) {
                if (!loadError_1) {
                    loadError_1 = {
                        error: error,
                        stage: 'Render'
                    };
                }
                throw loadError_1;
            })
                .then(function () {
                var extraData = WebPartLoadDataCollector.collect(context_1.manifest, context_1.webPartTag, _this._pageContext);
                monitor_1.writeSuccess(extraData);
            })
                .catch(function (e) {
                monitor_1.writeUnexpectedFailure(e.stage);
                var error = e.error, stage = e.stage;
                switch (stage) {
                    case 'Load':
                        _this._host.onAfterWebPartLoadFailed(context_1, error);
                        break;
                    case 'Initialize':
                        _this._host.onAfterWebPartInitializeFailed(context_1, error);
                        break;
                    case 'Render':
                        _this._host.onAfterWebPartRenderFailed(context_1, error);
                        break;
                }
                var instanceId = context_1.instanceId;
                var errorWebPart = _this._webParts.get(instanceId);
                if (errorWebPart) {
                    errorWebPart.dispose();
                    _this._webParts.delete(instanceId);
                }
                _this._statusRenderer.renderError(context_1.domElement, error);
                throw e.error;
            });
        }
        catch (error) {
            return Promise.reject(error);
        }
    };
    /**
     * Set a IPropertyPaneConsumer object into the set of the Client-side Web Part Manager's
     * managed web parts.
     *
     * @param id - A unique instance id.
     * @param control - A component which wants to use the property Pane.
     *
     * @internal
     */
    ClientSideWebPartManager.prototype.setPropertyPaneConsumer = function (id, control) {
        Validate.isNonemptyString(id, 'id');
        Validate.isNotNullOrUndefined(control, 'control');
        this._webParts.set(id, control);
        this._registerWebPartAsPropertyPaneConsumer(id);
    };
    /**
     * Fetch web part manifests. This makes a REST call to load the current site's web parts into the module loader.
     */
    ClientSideWebPartManager.prototype.fetchWebPartManifests = function () {
        var _this = this;
        if (!this._toolboxManifestsPromise &&
            // If the webServerRelativeUrl is missing we don't have anything to do here.
            (!this._pageContext.web ||
                !this._pageContext.web.serverRelativeUrl ||
                Environment.type === EnvironmentType.Local ||
                Environment.type === EnvironmentType.Test)) {
            this._toolboxManifestsPromise = Promise.resolve();
        }
        // if web parts have already been fetched we don't have anything to do here.
        if (!this._toolboxManifestsPromise) {
            var requestCorrelationId_1;
            var qosMonitor_1 = new _QosMonitor('ClientSideWebPartManager.FetchWebParts');
            var requestUrl_1 = UrlUtilities.removeEndSlash(this._pageContext.web.serverRelativeUrl) + "/_api/web/GetClientSideWebParts";
            this._host.serviceScope.whenFinished(function () {
                var httpClient = _this._host.serviceScope.consume(SPHttpClient.serviceKey);
                _this._toolboxManifestsPromise = _this._fetchManifestsWithCache(httpClient, requestUrl_1)
                    .then(function (response) {
                    requestCorrelationId_1 = response.correlationId ? response.correlationId.toString() : undefined;
                    if (response.ok) {
                        return (response.jsonCached ||
                            (response.jsonCached = Promise.resolve(response.json())));
                    }
                    else {
                        throw SPWebPartError.create(SPWebPartErrorCode.ManifestDownloadFailed);
                    }
                })
                    .then(function (value) {
                    var manifests = value.value.map(function (manifestObject) { return JSON.parse(manifestObject.Manifest); });
                    _this._disambiguateWebPartManifestLocales(manifests);
                    SPComponentLoader.registerManifests(manifests);
                    qosMonitor_1.writeSuccess();
                })
                    .catch(function (error) {
                    // Clear out the promise so we can try again if we enter edit mode again.
                    _this._toolboxManifestsPromise = undefined;
                    _this._clearManifestCacheItem(requestUrl_1);
                    _TraceLogger.logErrorData({
                        source: ClientSideWebPartManager._logSource,
                        error: error,
                        serviceScope: _this._host.serviceScope
                    });
                    qosMonitor_1.writeUnexpectedFailure('Rejected', error, {
                        correlationId: requestCorrelationId_1
                    });
                    throw error;
                });
            });
        }
        return this._toolboxManifestsPromise;
    };
    /**
     * Get list of active web part manifests.
     *
     * @returns - array of manifests.
     */
    // tslint:disable-next-line:no-any
    ClientSideWebPartManager.prototype.getWebPartManifests = function () {
        var manifests = SPComponentLoader._getManifestReferences();
        var result = []; /* tslint:disable-line:no-any */
        if (manifests) {
            for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
                var manifest = manifests_1[_i];
                if (manifest && manifest.componentType === 'WebPart') {
                    result.push(manifest); /* tslint:disable-line:no-any */
                }
            }
        }
        return result;
    };
    /**
     * Set the display mode of the specified web part. If no web part id is specified, switch mode of all web parts.
     * If the display mode passed is same as the current mode, no change is applied.
     *
     * @param displayMode - the new DisplayMode.
     * @param instanceId - instance id of the web part.
     */
    ClientSideWebPartManager.prototype.setDisplayMode = function (displayMode, instanceId) {
        this._setDisplayMode(displayMode, instanceId).catch(function (e) {
            return _TraceLogger.logVerboseData({
                source: ClientSideWebPartManager._logSource,
                message: e.message
            });
        });
    };
    /**
     * @internalremarks Only use this API if you need to immediately call property pane APIs after switching the mode.
     * @internal
     */
    ClientSideWebPartManager.prototype._setDisplayMode = function (displayMode, instanceId) {
        var _this = this;
        this._displayMode = displayMode;
        if (this._displayMode === DisplayMode.Read) {
            this._closeIsolatedPropertyPaneIfRequired();
        }
        // We only want to indicate we have loaded, if needed, the property pane
        /* tslint:disable-next-line:no-any */
        var setDisplayModePromise = this._loadPropertyPaneModuleOld();
        // Set the display mode for the requested or all web parts.
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                webPart._internalSetDisplayMode(displayMode);
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                var qosMonitor = new _QosMonitor('ClientSideWebPartManager._setDisplayMode');
                if (_this._iframedWebPartController) {
                    qosMonitor.writeSuccess();
                    _this._iframedWebPartController.setDisplayMode(displayMode, id);
                }
                else {
                    qosMonitor.writeUnexpectedFailure('iFrame controller used before deferral loading is complete');
                }
            }
        });
        // Start the dirty bit timer if required
        this._startDirtyBitTimer(displayMode);
        return setDisplayModePromise;
    };
    /**
     * Serialize the specified web part. If no web part is specified, serialize all web parts.
     *
     * @param instanceId - instance id of the web part.
     */
    ClientSideWebPartManager.prototype.serialize = function (instanceId) {
        var _this = this;
        var sd = new Map();
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                sd.set(id, webPart._internalSerialize());
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                sd.set(id, _this._iframedWebPartController.serialize(id));
            }
        });
        return sd;
    };
    /**
     * Set the web part data for the specified web part.
     *
     * The setWebPartData API has 3 possible scenarios when the web part data is updated externally.
     * - Web part declares useFallbackWhenPropertiesUpdatedExternally manifest field as `true`, web part manager will
     *   trigger the default fallback logic which disposes the web part and reload it using the given context.
     * - Web part overrides `onAfterPropertiesUpdatedExternally` life cycle events, web part manager will first
     *   deserialize the web part data, then invokes the `onAfterPropertiesUpdatedExternally` event to allow web part to
     *   do their customized handling logic.
     * - If useFallbackWhenPropertiesUpdatedExternally manifest field is `false` or `undefined`, and web part does not
     *   override `onAfterPropertiesUpdatedExternally` life cycle events, web part manager will first deserialize the
     *   web part data, then invokes the `_refresh` life cycle to re-render the web part.
     *
     * @param webPartData - the new web part data.
     * @param instanceId - instance id of the web part.
     * @param shouldFallback - whether it should fallback to dispose & reload logic.
     * @returns - A promise that resolves immediately if fallback is not used, or returns the loadWebPart promise
     *  when fallback is used.
     */
    ClientSideWebPartManager.prototype.setWebPartData = function (context, instanceId, shouldFallback) {
        if (shouldFallback === void 0) { shouldFallback = false; }
        Validate.isNotNullOrUndefined(context, 'web part manager context');
        Validate.isNonemptyString(instanceId, 'web part instance id');
        var wp = this._webParts.get(instanceId);
        var webPartData = context.webPartData;
        Validate.isNotNullOrUndefined(webPartData, 'web part data');
        if (wp && webPartData) {
            if (shouldFallback) {
                this.disposeWebparts(instanceId);
                return this.loadWebPart(context);
            }
            else {
                wp._internalSetWebPartData(webPartData);
                _SPEventManager.instance.raiseEvent(this._getDataUpdatedEventName(webPartData.instanceId), {});
            }
        }
        return Promise.resolve();
    };
    /**
     * Dispose of the current webpart manager and all of the webparts it has loaded.
     */
    ClientSideWebPartManager.prototype.dispose = function () {
        this.disposeWebparts();
        var currentIdx = ClientSideWebPartManager._webPartManagerList.indexOf(this);
        if (currentIdx >= 0) {
            ClientSideWebPartManager._webPartManagerList.splice(currentIdx, 1);
        }
    };
    /**
     * Dispose the specified web part. If no web part is specified, dispose all web parts.
     *
     * @param instanceId - instance id of the web part.
     */
    ClientSideWebPartManager.prototype.disposeWebparts = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                // Remove references to the web part from the manager before disposing it
                _this._deleteWebPart(id);
                // Actually dispose the web part
                executeWithoutFailing(function () {
                    webPart._internalDispose();
                }, ClientSideWebPartManager._logSource);
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.deleteWebPart(id);
            }
        });
    };
    /*
     * Get the first web part with preview image url specified. If no web parts are specified, try to get the preview
     * image from all web parts.
     *
     * @param instanceIds - instance ids of the web parts.
     */
    ClientSideWebPartManager.prototype.tryGeneratePreviewImageUrl = function (instanceIds) {
        var _this = this;
        var candidatePreviewImageUrl;
        var previewImageUrl = undefined;
        var previewFromAlias = undefined;
        var monitor = new _QosMonitor('ClientSideWebPartManager.tryGeneratePreviewImageUrl');
        this._executeForIdsOrAll(instanceIds, function (instanceId, webPart) {
            if (webPart) {
                // workaround for typescript targeting es5 only support for...of for array and string
                // also Map does not support some or every
                // @todo: Bug 222340 when switching to es6, use for...of and return after first match
                if (!previewImageUrl) {
                    var webPartThumbnail = webPart.previewImageUrl;
                    if (webPartThumbnail) {
                        previewFromAlias = webPart.context.manifest.alias;
                        if (webPartThumbnail.length < THUMBNAIL_MAX_URL_LENGTH) {
                            candidatePreviewImageUrl = webPartThumbnail;
                            // prefer non-canonical paths due to oAuth allowed end points
                            var normalizedPath = candidatePreviewImageUrl.toUpperCase();
                            /* tslint:disable-next-line:max-line-length */
                            // https://onedrive.visualstudio.com/_search?action=contents&text=authEndpoints&type=code&lp=custom-Collection&filters=ProjectFilters%7BOneDrive%20Service%7DRepositoryFilters%7Bnotify-server%7D&pageSize=25&result=DefaultCollection%2FOneDrive%20Service%2Fnotify-server%2FGBmaster%2F%2FActivity%2FOneDrive.Activity.DataAccess%2Fsrc%2FIdentity%2FSpoUserProvider.cs
                            var isSupportedByOAuth = DOCVIZ_REGEX.test(normalizedPath) || normalizedPath.indexOf('/_API/') >= 0;
                            if (isSupportedByOAuth) {
                                previewImageUrl = candidatePreviewImageUrl;
                            }
                        }
                        else {
                            var imageUrl = webPart.previewImageUrl;
                            _TraceLogger.logVerboseData({
                                source: ClientSideWebPartManager._logSource,
                                eventName: 'tryGeneratePreviewImageUrl',
                                message: previewFromAlias + " attempted preview URL of " + (imageUrl && imageUrl.length) + " chars."
                            });
                        }
                    }
                }
            }
            else if (_this._iframedWebpartInstanceIds.has(instanceId)) {
                // @todo: VSO#612911 - add support tryGeneratePreviewImageUrl for iframed webparts
                monitor.writeExpectedFailure('IframedPart');
                return undefined;
            }
        });
        var extraData = monitor && previewFromAlias ? { alias: previewFromAlias } : undefined;
        if (!previewImageUrl && candidatePreviewImageUrl) {
            previewImageUrl = candidatePreviewImageUrl;
            monitor.writeExpectedFailure('NonLayouts', undefined /* ex */, extraData);
        }
        if (!previewImageUrl && previewFromAlias) {
            monitor.writeUnexpectedFailure('PathTooLong', undefined /* ex */, extraData);
            // Ensure to adjust callers if changing this error message!
            throw new Error('tryGeneratePreviewImageUrl PathLengthError.');
        }
        if (!monitor.hasEnded) {
            monitor.writeSuccess(extraData);
        }
        return previewImageUrl;
    };
    /**
     * Request property pane to perform the given action.
     *
     * @param instanceId - web part instance id.
     * @param propertyPaneAction - indicates what action needs to be performed on the property pane.
     * @param renderedByWebPart - indicates whether the the property pane rendered by a web part or not.
     * @param context - pass additional context to property pane
     */
    ClientSideWebPartManager.prototype.requestPropertyPaneAction = function (instanceId, propertyPaneAction, renderedByWebPart, context /* tslint:disable-line:no-any */) {
        var _this = this;
        if (propertyPaneAction === void 0) { propertyPaneAction = 'Default'; }
        if (this._iframedWebpartInstanceIds.has(instanceId)) {
            // Iframe controller scenario
            // Hiding the non-iframed property pane if open, before loading the iframed property pane.
            if (this._propertyPane && this._propertyPane.isOpen()) {
                this._propertyPane.requestAction(instanceId, 'Close', renderedByWebPart);
            }
            /* tslint:disable-next-line:no-any */
            this._iframedWebPartController.requestPropertyPaneAction(propertyPaneAction, instanceId);
        }
        else {
            // Default scenario
            // Hide the Iframed property pane before opening non-iframe scenario.
            // if no iframed property pane is present then this is a no-op.
            if (this._iframedWebPartController) {
                this._iframedWebPartController.requestPropertyPaneAction('Close');
            }
            if (this._propertyPane) {
                this._propertyPane.requestAction(instanceId, propertyPaneAction, renderedByWebPart);
            }
            else if (propertyPaneAction === 'OpenDetails') {
                // If the properyPane is not loaded for OpenDetails Action,
                // We have to load the property pane and then execute the action.
                this._loadPropertyPaneModuleOld(true)
                    .then(function () {
                    return _this._propertyPane.requestAction(instanceId, propertyPaneAction, renderedByWebPart, context);
                })
                    .catch(function (e) {
                    return _TraceLogger.logVerboseData({
                        source: ClientSideWebPartManager._logSource,
                        message: e.message
                    });
                });
            }
        }
    };
    /**
     * Returns true if the current property pane source is a web part and not the Canvas or any other source.
     */
    ClientSideWebPartManager.prototype.isPropertyPaneRenderedByWebPart = function () {
        return !!this._propertyPane && this._propertyPane.isRenderedByConsumer();
    };
    /**
     * Returns the state of the PropertyPane if it is open or not.
     */
    ClientSideWebPartManager.prototype.isPropertyPaneOpen = function () {
        return !!this._propertyPane && this._propertyPane.isOpen();
    };
    /**
     * Method to handle the web part delete action from the host. There is a key distinction between delete and dispose.
     * Delete implies that the web part has been deleted from the page and the web part should dispose all the server
     * side or other external resources attached to the web part. Dispose implies that an in-place navigation is
     * happening and the web part manager should delete the web part from its cache.
     *
     * @param instanceId - instance id of the webpart which is deleted.
     */
    ClientSideWebPartManager.prototype.onWebPartDelete = function (instanceId) {
        this.disposeWebparts(instanceId);
    };
    /**
     * Render an error message in the web part container div.  Also logs the error message to the IWebPartHost logger.
     */
    ClientSideWebPartManager.prototype.renderError = function (domElement, error) {
        var _this = this;
        executeWithoutFailing(function () {
            _this._statusRenderer.renderError(domElement, error);
            _TraceLogger.logErrorData({
                source: ClientSideWebPartManager._logSource,
                error: error,
                serviceScope: _this._host.serviceScope
            });
        }, ClientSideWebPartManager._logSource);
    };
    /**
     * Notify webparts that their container has resized.
     *
     * @param instanceId - if specified only notify one webpart that its container has resized
     */
    ClientSideWebPartManager.prototype.notifyWebPartContainerResize = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (id, webPart) {
            if (webPart) {
                webPart._internalOnAfterResize();
            }
            else if (_this._iframedWebpartInstanceIds.has(id)) {
                Validate.isNotNullOrUndefined(_this._iframedWebPartController, 'IFramedWebPartController is undefined');
                _this._iframedWebPartController.notifyContainerResize(id);
            }
        });
    };
    /**
     * Used to ensure the next request for webpart manifests makes a call to the server.
     */
    ClientSideWebPartManager.prototype.clearManifestPromise = function () {
        this._toolboxManifestsPromise = undefined;
    };
    /** ------------------- PROTECTED ------------------- **/
    /**
     * Generate web part context.
     */
    ClientSideWebPartManager.prototype._getWebPartContext = function (context) {
        var webPartTag = ClientSideWebPartManager.createWebPartTag(context.manifest, context.instanceId);
        var sdks = (this._host.getAdditionalContextProperties && this._host.getAdditionalContextProperties()) || {};
        var microsoftTeams = sdks.microsoftTeams && sdks.microsoftTeams.teamsJs;
        var parameters = {
            sdks: sdks,
            microsoftTeams: microsoftTeams,
            parentServiceScope: context.serviceScope || this._host.serviceScope,
            manifest: this._getManifestInstance(context),
            instanceId: context.instanceId,
            webPartTag: webPartTag,
            domElement: context.domElement,
            statusRenderer: this._statusRenderer,
            isPropertyPaneRenderedByWebPart: this.isPropertyPaneRenderedByWebPart,
            isPropertyPaneOpen: this.isPropertyPaneOpen,
            formFactor: context.formFactor || WebPartFormFactor.Standard,
            host: this._host,
            requestPropertyPaneAction: this.requestPropertyPaneAction,
            loggingTag: webPartTag,
            _dataUpdatedEvent: new SPEvent(this._getDataUpdatedEventName(context.instanceId)),
            widthCacheKey: context.widthCacheKey
        };
        var webPartContext = new WebPartContext(parameters);
        return webPartContext;
    };
    /** ------------------- PRIVATE ------------------- **/
    ClientSideWebPartManager.prototype._initializeWebPart = function (component, context) {
        var webPartType = component;
        /* tslint:disable:no-any */
        if (webPartType.default) {
            webPartType = webPartType.default;
            if (typeof webPartType !== 'function' && webPartType.default) {
                webPartType = webPartType.default;
            }
        }
        /* tslint:enable:no-any */
        var webPart = new webPartType();
        webPart._internalInitialize(this._getWebPartContext(context), !!context.addedFromPersistedData, context.displayMode);
        var instanceId = webPart.instanceId;
        this._webParts.set(instanceId, webPart);
        this._registerWebPartAsPropertyPaneConsumer(instanceId);
        this._startDirtyBitTimer(context.displayMode);
        var webPartDataClone = lodash.cloneDeep(context.webPartData);
        if (webPartDataClone) {
            webPart._internalDeserialize(webPartDataClone);
        }
        return webPart;
    };
    ClientSideWebPartManager.prototype._fetchManifestsWithCache = function (httpClient, requestUrl) {
        if (!ClientSideWebPartManager._manifestRequestPromiseCache[requestUrl]) {
            ClientSideWebPartManager._manifestRequestPromiseCache[requestUrl] = _SPFlight.isEnabled(436 /* SppplatUseDeploymentPools */)
                ? httpClient.post(requestUrl, SPHttpClient.configurations.v1, {
                    body: JSON.stringify({
                        project: Session.clientSideApplicationId
                    })
                })
                : httpClient.get(requestUrl, SPHttpClient.configurations.v1);
        }
        return ClientSideWebPartManager._manifestRequestPromiseCache[requestUrl];
    };
    ClientSideWebPartManager.prototype._clearManifestCacheItem = function (requestUrl) {
        delete ClientSideWebPartManager._manifestRequestPromiseCache[requestUrl];
    };
    /**
     * Workaround for a server issue - disambiguate manifest locales if they haven't already been disambiguated
     * (VSO#243888) tracks fixing this issue.
     */
    ClientSideWebPartManager.prototype._disambiguateWebPartManifestLocales = function (manifests) {
        // Attempt to disambiguate locale for each manifest if the server didn't already do that
        var currentLocale = this._pageContext.cultureInfo.currentUICultureName
            ? this._pageContext.cultureInfo.currentUICultureName.toLowerCase()
            : undefined;
        if (currentLocale) {
            // This should only get called once, so it doesn't need to be a private function.
            var disambiguateLocale_1 = function (values) {
                var foundMatch = undefined;
                for (var locale in values) {
                    if (locale && locale.toLowerCase() === currentLocale && values[locale]) {
                        foundMatch = values[locale];
                        break;
                    }
                }
                return {
                    default: foundMatch || values.default
                };
            };
            manifests.forEach(function (manifest) {
                if (manifest.componentType === 'WebPart') {
                    var wpManifest = manifest;
                    wpManifest.preconfiguredEntries.forEach(function (entry) {
                        entry.title = disambiguateLocale_1(entry.title);
                        entry.description = disambiguateLocale_1(entry.description);
                        if (entry.group) {
                            entry.group = disambiguateLocale_1(entry.group);
                        }
                    });
                }
            });
        }
    };
    ClientSideWebPartManager.prototype._loadIsolatedWebPart = function (context) {
        var _this = this;
        this._iframedWebpartInstanceIds.add(context.instanceId);
        var domainUrl = this._ensureUrl(context.manifest.isolatedDomain, this._pageContext.site.absoluteUrl);
        return IframedWebPartControllerLoader().then(function (iframedWebPartControllerModule) {
            if (!_this._iframedWebPartController) {
                _this._iframedWebPartController = new iframedWebPartControllerModule(_this._host);
            }
            return _this._iframedWebPartController.loadWebPart(domainUrl, _this._pageContext, context);
        });
    };
    ClientSideWebPartManager.prototype._loadComponentModules = function (context) {
        var domElement = context.domElement, manifest = context.manifest, reservedHeight = context.reservedHeight, webPartData = context.webPartData;
        var title = ClientSideWebPartManager._getWebPartTitle(manifest, webPartData);
        this._statusRenderer._displayLoadingIndicator(domElement, title, context.webPartTag, reservedHeight, manifest.isInternal);
        var components = [SPComponentLoader.loadComponent(manifest)];
        if (!components[0]) {
            throw SPWebPartError.create(SPWebPartErrorCode.ModuleUndefined, context.webPartTag);
        }
        if (webPartData) {
            ClientSideWebPartManager._loadDynamicComponentDependencies(components, webPartData, context.webPartTag);
        }
        return Promise.all(components).then(function (modules) {
            return modules[0];
        });
    };
    /**
     * Execute the provided callback for the list of provided web part ids. If no list if provided,
     * execute the callback on all web parts.
     */
    ClientSideWebPartManager.prototype._executeForIdsOrAll = function (instanceIds, callback) {
        var _this = this;
        if (instanceIds) {
            instanceIds.forEach(function (instanceId) {
                var webPart = _this._webParts.get(instanceId);
                callback(instanceId, webPart);
            });
        }
        else {
            this._webParts.forEach(function (webPart, instanceId) {
                // Check the type because the dictionary can have web parts or property pane controls
                if (ClientSideWebPartManager._instanceOfBase(webPart)) {
                    callback(instanceId, webPart);
                }
            });
            if (this._iframedWebPartController) {
                this._iframedWebPartController.getAllInstanceIds().forEach(function (instanceId) {
                    callback(instanceId);
                });
            }
        }
    };
    /**
     * This is a temporary implementation of updating the host that a web part has updated properties.
     * Currently we run a timer that regularly checks for updated properties and raises the dirty bit
     * handler to the host. todo (VSO SPPPLAT#200728) tracks fixing this scenario in a better way.
     */
    ClientSideWebPartManager.prototype._startDirtyBitTimer = function (mode) {
        var _this = this;
        // Clear the timer in read mode
        if (mode === DisplayMode.Read) {
            // Do not clear the dirty bit timer in classic pages as there are editable and non-editable
            // web parts on the page simultaneously. Note, only one web part can be truly editable at
            // any give time.
            if (this._dirtyBitTimer && Environment.type !== EnvironmentType.ClassicSharePoint) {
                window.clearInterval(this._dirtyBitTimer);
                this._dirtyBitTimer = undefined;
            }
            // If required start the timer in edit mode
        }
        else if (!this._dirtyBitTimer) {
            this._dirtyBitTimer = window.setInterval(function () {
                _this._executeForIdsOrAll(undefined, function (_instanceId, wp) {
                    if (wp) {
                        wp._internalSetDirtyBit();
                    }
                    else if (_this._iframedWebpartInstanceIds.has(_instanceId)) {
                        _this._iframedWebPartController.startDirtyBitTimer(_instanceId);
                    }
                });
            }, 1000);
        }
    };
    ClientSideWebPartManager.prototype._deleteWebPart = function (id) {
        Validate.isNotNullOrUndefined(id, 'id');
        // Since the property pane is defer loaded, check if it exists/loaded before
        // using it.
        if (this._propertyPane) {
            this._propertyPane.onConsumerDelete(id);
        }
        var wp = this._webParts.get(id);
        if (wp && ClientSideWebPartManager._instanceOfBase(wp)) {
            _TraceLogger.logVerboseData({
                source: ClientSideWebPartManager._logSource,
                message: Text.format(strings.WebpartDeleteRequested, ClientSideWebPartManager._getWebPartTag(wp)),
                serviceScope: this._host.serviceScope
            });
        }
        this._webParts.delete(id);
    };
    /**
     * Get web part manifest instance from manifest. Promotes the pre-configured entries.
     */
    /* tslint:disable:no-any */
    ClientSideWebPartManager.prototype._getManifestInstance = function (context) {
        var manifest = context.manifest;
        var manifestClone = lodash.cloneDeep(manifest);
        delete manifestClone.preconfiguredEntries;
        return manifestClone;
    };
    /* tslint:enable:no-any */
    /**
     * If non-non parameter passed, return array else return undefined.
     */
    ClientSideWebPartManager.prototype._getArrayOrUndefined = function (instanceId) {
        return instanceId ? [instanceId] : undefined;
    };
    ClientSideWebPartManager.prototype._initialzeOnResizeEventHandler = function () {
        window.addEventListener('resize', lodash.debounce(this._onContainerResize, 1000));
        window.addEventListener('message', this._onPropertyPaneNotifications);
        window.addEventListener('resize', WebPartWidthCacheManager.clear);
    };
    /**
     * Window onresize event handler.
     */
    ClientSideWebPartManager.prototype._onContainerResize = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (wpm) {
            wpm._webParts.forEach(function (wp) {
                wp._internalOnAfterResize();
            });
        });
    };
    /**
     * Listener for window post message that the property pane.
     *
     * todo (SPPPLAT Bug #299413): Implement missing schema for property pane post messages
     * todo (SPPPLAT PBI #687467): Refactor IframedWebPartContoller
     */
    ClientSideWebPartManager.prototype._onPropertyPaneNotifications = function (event) {
        if (event && event.origin === window.location.origin) {
            switch (event.data) {
                case 'Property pane will open':
                    this._closeIsolatedPropertyPaneIfRequired();
                    break;
                case 'Property pane toggled':
                    WebPartWidthCacheManager.clear();
                    this._onContainerResize();
                    break;
            }
        }
    };
    ClientSideWebPartManager.prototype._renderWebPart = function (webPart) {
        return webPart._internalFirstTimeRender().then(function (renderCompleteTime) { return ({ webPart: webPart, renderCompleteTime: renderCompleteTime }); });
    };
    ClientSideWebPartManager.prototype._loadPropertyPaneModule = function (webPart) {
        var _this = this;
        var loadPropertyPane = Promise.resolve(webPart);
        var isEditOrClassic = webPart.displayMode === DisplayMode.Edit || Environment.type === EnvironmentType.ClassicSharePoint;
        if (
        // Classic pages behave differently, page and web part can be in different modes
        // hence tackling it in a different way. This is to fix a sev 1 so keeping the changes minimal.
        // We might revisit the logic in future, as required.
        isEditOrClassic &&
            !this._propertyPane) {
            var propertyPaneQosMonitor_1 = new _QosMonitor('ClientSideWebPartManager._loadPropertyPaneModule');
            var propertyPaneLoader = this._host.serviceScope.consume(PropertyPaneLoader.serviceKey);
            loadPropertyPane = propertyPaneLoader.propertyPane
                .then(function (propertyPane) {
                _this._propertyPane = propertyPane;
                _this._registerPendingPropertyPaneConsumers();
                return webPart;
            })
                .catch(function (error) {
                _TraceLogger.logErrorData({
                    source: ClientSideWebPartManager._logSource,
                    error: error
                });
                propertyPaneQosMonitor_1.writeUnexpectedFailure('UnhandledError', error);
                throw error;
            });
        }
        return loadPropertyPane;
    };
    ClientSideWebPartManager.prototype._getDataUpdatedEventName = function (webPartInstanceId) {
        return "WebPart_" + webPartInstanceId + "_dataUpdated";
    };
    /**
     * Registers a component as a property pane consumer.
     * @param instanceId - Instance id of the consumer, to be registered with the property pane.
     */
    ClientSideWebPartManager.prototype._registerWebPartAsPropertyPaneConsumer = function (instanceId) {
        if (instanceId) {
            var wp = undefined;
            for (var _i = 0, _a = ClientSideWebPartManager._webPartManagerList; _i < _a.length; _i++) {
                var manager = _a[_i];
                wp = manager._webParts.get(instanceId);
                if (wp) {
                    if (this._propertyPane) {
                        this._propertyPane.registerConsumer(instanceId, wp);
                    }
                    else {
                        this._propertyPaneConsumerQueue.set(instanceId, wp);
                    }
                    break;
                }
            }
        }
    };
    /**
     * Creates an absolute url with the isolatedDomain parameter.
     * @param isolatedDomain - a domain without the protocol. Ex: "PrepSPO-appFEEAB5CE1CB0421FB1AAE5D09E0A8AAA.spgrid.com"
     * @param absoluteUrl - url with protocol that may or may not contain a path. Ex: "https://prepspo.spgrid.com"
     */
    ClientSideWebPartManager.prototype._ensureUrl = function (isolatedDomain, absoluteUrl) {
        if (!isolatedDomain) {
            return absoluteUrl;
        }
        // replace the domain in "https://domain/path" with isolatedDomain
        var slashAdded = false;
        if (absoluteUrl.charAt(absoluteUrl.length - 1) !== '/') {
            absoluteUrl = absoluteUrl + '/';
            slashAdded = true;
        }
        absoluteUrl = absoluteUrl.replace(ClientSideWebPartManager._domainRegex, "https://" + isolatedDomain + "/");
        if (slashAdded) {
            // Remove the ending slash
            absoluteUrl = absoluteUrl.substr(0, absoluteUrl.length - 1);
        }
        return absoluteUrl;
    };
    ClientSideWebPartManager.prototype._registerPendingPropertyPaneConsumers = function () {
        var _this = this;
        this._propertyPaneConsumerQueue.forEach(function (consumer, instanceId) {
            _this._propertyPane.registerConsumer(instanceId, consumer);
        });
    };
    ClientSideWebPartManager.prototype._closeIsolatedPropertyPaneIfRequired = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (cswpm) {
            if (cswpm._iframedWebPartController) {
                cswpm._iframedWebPartController.requestPropertyPaneAction('Close');
            }
        });
    };
    /**
     * Load the fabric core library, for third-party web parts if required.
     * @param context - Current context of the web part manager
     * @param qosMonitor - qos monitor for the current flow
     */
    ClientSideWebPartManager.prototype._loadLegacyFabricCssIfRequired = function (context) {
        var _this = this;
        var _a, _b;
        var manifest = context.manifest;
        // We will add the classname for all 3rd party web parts, as many of 3rd party devs use the css not as
        // documentation required.
        var isLegacyFabricCss = _LegacyThirdPartyFabricCoreLoader.needLegacyFabricCss(manifest);
        if (isLegacyFabricCss || !manifest.isInternal) {
            (_b = (_a = context.domElement) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.add('ms-SPLegacyFabricBlock');
        }
        return _LegacyThirdPartyFabricCoreLoader
            .forceLoad(manifest)
            .then(function () { return Promise.resolve(); })
            .catch(function (error) {
            _TraceLogger.logErrorData({
                source: ClientSideWebPartManager._logSource,
                error: error,
                serviceScope: _this._host.serviceScope
            });
            if (KillSwitches.isRejectLegacyFabricErrorKSActivated()) {
                Promise.reject(error); /* tslint:disable-line:no-floating-promises */
            }
            else {
                throw error;
            }
        });
    };
    /**
     * Loads the property pane module asynchronously, if not already loaded.
     */
    ClientSideWebPartManager.prototype._loadPropertyPaneModuleOld = function (renderDetailsPane) {
        var _this = this;
        if ((this._displayMode === DisplayMode.Edit ||
            renderDetailsPane ||
            // Classic pages behave differently, page and web part can be in different modes
            // hence tackling it in a different way. This is to fix a sev 1 so keeping the changes minimal.
            // We might revisit the logic in future, as required.
            Environment.type === EnvironmentType.ClassicSharePoint) &&
            !this._propertyPane) {
            var propertyPaneQosMonitor_2 = new _QosMonitor('ClientSideWebPartManager._loadPropertyPaneModule');
            this._propertyPaneLoader = this._host.serviceScope.consume(PropertyPaneLoader.serviceKey);
            return this._propertyPaneLoader.propertyPane
                .then(function (propertyPane) {
                _this._propertyPane = propertyPane;
                _this._registerPendingPropertyPaneConsumers();
                return propertyPane;
            })
                .catch(function (error) {
                _TraceLogger.logErrorData({
                    source: ClientSideWebPartManager._logSource,
                    error: error
                });
                propertyPaneQosMonitor_2.writeUnexpectedFailure('UnhandledError', error);
                throw error;
            });
        }
        else {
            return Promise.resolve(undefined);
        }
    };
    /**
     * Reference to the instances of all ClientSideWebPartManager instances in the app.
     */
    ClientSideWebPartManager._webPartManagerList = [];
    ClientSideWebPartManager._domainRegex = new RegExp('^https://[^/]*/');
    /*
     * Web part manager log source
     */
    ClientSideWebPartManager._logSource = _LogSource.create('ClientSideWebPartManager');
    ClientSideWebPartManager._manifestRequestPromiseCache = {};
    return ClientSideWebPartManager;
}());
export default ClientSideWebPartManager;
//# sourceMappingURL=ClientSideWebPartManager.js.map