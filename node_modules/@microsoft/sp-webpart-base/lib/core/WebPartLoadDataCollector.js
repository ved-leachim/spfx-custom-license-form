// Copyright (c) Microsoft. All rights reserved.
import { _PerformanceLogger, _PerformanceDataDimensions } from '@ms/sp-telemetry';
import KillSwitches from './../common/KillSwitches';
var NOT_AVAILABLE = 'N/A';
var WebPartLoadDataCollector = /** @class */ (function () {
    function WebPartLoadDataCollector() {
    }
    WebPartLoadDataCollector.collect = function (manifest, webPartTag, pageContext) {
        var getTime = function (key) {
            return (_PerformanceLogger.readComponentBreakdown(webPartTag, key) ||
                _PerformanceLogger.readTempData(webPartTag + "." + key));
        };
        var start = getTime('start');
        var moduleLoaded = getTime('modulesLoaded');
        var initialized = getTime('init');
        var end = getTime('end');
        var isSpinnyShown = !!getTime('displaySpinner');
        var isMultiGeo = Boolean(pageContext && pageContext.legacyPageContext && pageContext.legacyPageContext.isMultiGeoTenant);
        var dataProvider = NOT_AVAILABLE;
        var layoutID = NOT_AVAILABLE;
        var webPartCacheHit = "N/A" /* NotAvailable */;
        var cacheMissReason = "N/A" /* NotApplicable */;
        // Collect data for first-party web parts only. This ideally should be done outside of spfx.
        // VSO#855246 Refactor WebPartLoadDataCollector to move out first-party only logging logic.
        if (manifest.isInternal) {
            var cacheHit = getTime('CacheHit');
            var cacheMiss = getTime('CacheMiss');
            var prefetechedData = getTime('prefetchedData');
            var isCacheApplicable = Boolean(cacheHit || cacheMiss);
            webPartCacheHit = isCacheApplicable
                ? cacheHit
                    ? "true" /* True */
                    : "false" /* False */
                : "N/A" /* NotAvailable */;
            cacheMissReason = WebPartLoadDataCollector._getCacheMissReason(cacheHit, getTime);
            var dataProviderTime_1 = _PerformanceLogger.now();
            var layoutKey_1 = _PerformanceDataDimensions.Layout;
            var dataProviderKey_1 = _PerformanceDataDimensions.DataProvider;
            var perfBreakDown_1 = _PerformanceLogger.readFullEUPLBreakDown();
            // WebParts which have different layouts and dataproviders, will have perf marks such as
            // webPartTag.dataProvider: [dataProviderName]
            // webPartTag.Layout: [Layout]
            // The logic below will extract the data provider and layout, and log them for perf measurements.
            Object.keys(perfBreakDown_1).forEach(function (key) {
                if (key.indexOf(webPartTag) > -1) {
                    // We only have 1 layout
                    if (layoutID === NOT_AVAILABLE && key.indexOf(layoutKey_1) > -1) {
                        layoutID = key.split(layoutKey_1)[1];
                        // Focus on primary data provider
                    }
                    else if (key.indexOf(dataProviderKey_1) > -1) {
                        // Pick earliest data provider, in case there are multiple
                        if (dataProvider === NOT_AVAILABLE || perfBreakDown_1[key] < dataProviderTime_1) {
                            dataProvider = key.split(dataProviderKey_1)[1];
                            dataProviderTime_1 = perfBreakDown_1[key];
                        }
                    }
                }
            });
            dataProvider = prefetechedData ? 'Prefetch' : dataProvider;
        }
        var webpartPerfFlights = !KillSwitches._isWebpartExperimentKSActivated()
            ? _PerformanceLogger.getWebpartFlightsAndExperiments(webPartTag)
            : undefined;
        var syncRenderTime = this._getSyncRenderTime(layoutID, getTime);
        return {
            alias: manifest.alias,
            isMultiGeo: isMultiGeo,
            isInternal: manifest.isInternal,
            isSpinnyShown: isSpinnyShown,
            manifestId: manifest.id,
            moduleLoadTime: Math.floor(moduleLoaded - start),
            initTime: Math.floor(initialized - moduleLoaded),
            renderTime: Math.floor(end - initialized),
            syncRenderTime: syncRenderTime,
            scenarioId: _PerformanceLogger.getScenarioId(),
            isFullPage: _PerformanceLogger.fullPageLoad,
            dataProvider: dataProvider,
            layout: layoutID,
            mySiteCacheHit: webPartCacheHit,
            cacheMissReason: cacheMissReason,
            flights: webpartPerfFlights,
            storeAppId: manifest.storeAppId,
            mpnId: manifest.mpnId,
            componentDeveloperName: manifest.componentDeveloperName
        };
    };
    WebPartLoadDataCollector._getSyncRenderTime = function (layoutID, getTime) {
        var syncRenderTime = undefined;
        if (!KillSwitches.isAddSyncRenderTimeKSActivated()) {
            syncRenderTime = Math.floor(getTime('syncRender') - getTime('getDataComplete'));
            if (!KillSwitches.isExclusiveRenderTimeForBaseCollectionWebPartKSActivated()) {
                var postRenderCompleteTime = getTime('postRenderComplete');
                var loadLayoutEnd = getTime('loadLayoutEnd');
                var syncLayoutRenderComplete = getTime('syncLayoutRenderComplete');
                if (loadLayoutEnd && syncLayoutRenderComplete) {
                    // render layout and items inside it
                    syncRenderTime = Math.floor(syncRenderTime + (syncLayoutRenderComplete - loadLayoutEnd));
                }
                if (postRenderCompleteTime) {
                    syncRenderTime = Math.floor(
                    // transposeRow + transposeItems + render + syncPostRender
                    syncRenderTime + (postRenderCompleteTime - getTime(_PerformanceDataDimensions.Layout + layoutID)));
                }
            }
        }
        return syncRenderTime;
    };
    WebPartLoadDataCollector._getCacheMissReason = function (cacheHit, getTime) {
        if (cacheHit) {
            return "N/A" /* NotApplicable */;
        }
        var mySiteCacheMissOnConfgMismatch = !!getTime('CacheMissConfigMismatch');
        var mySiteCacheMissOnLateFlush = !!getTime('LateFlush');
        var cachedWebPartNotFound = !!getTime('CachedWebPartNotFound');
        var cacheExpired = !!getTime('CacheExpired');
        var cacheMissReason = "NotSpecified" /* NotSpecified */;
        if (mySiteCacheMissOnConfgMismatch) {
            cacheMissReason = "CacheConfigMissmatch" /* CacheConfigMissmatch */;
        }
        else if (mySiteCacheMissOnLateFlush) {
            cacheMissReason = "LateFlush" /* LateFlush */;
        }
        else if (cachedWebPartNotFound) {
            cacheMissReason = "CachedItemNotFound" /* CachedItemNotFound */;
        }
        else if (cacheExpired) {
            cacheMissReason = "CacheExpired" /* CacheExpired */;
        }
        return cacheMissReason;
    };
    return WebPartLoadDataCollector;
}());
export default WebPartLoadDataCollector;
//# sourceMappingURL=WebPartLoadDataCollector.js.map