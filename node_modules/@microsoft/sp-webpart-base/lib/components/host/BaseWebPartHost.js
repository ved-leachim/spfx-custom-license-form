import { _PerformanceLogger } from '@ms/sp-telemetry';
import KillSwitches from '../../common/KillSwitches';
import * as Experiments from '../../common/Experiments';
/**
 * BaseWebPartHost implements the IWebPartHost lifecycle methods as virtual no-op methods.
 *
 * @internal
 */
var BaseWebPartHost = /** @class */ (function () {
    function BaseWebPartHost(serviceScope) {
        this.serviceScope = serviceScope;
    }
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartLoad = function (options) {
        _PerformanceLogger.devMark("ClientSideWebPartManager.load(" + options.webPartTag + ").start");
        _PerformanceLogger.startMarkForComponent(options.webPartTag);
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartLoad = function (options) {
        _PerformanceLogger.devMark("ClientSideWebPartManager.load(" + options.webPartTag + ").end");
        _PerformanceLogger.markComponentModuleLoaded(options.webPartTag);
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartLoadFailed = function (options, error) {
        if (Experiments.getMarkFailureInPerformanceLoggerExperimentVariant() === 1) {
            _PerformanceLogger.endFailureForComponent(options.webPartTag, 'Load');
        }
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartInitializeOld = function (options) {
        _PerformanceLogger.devMark("ClientSideWebPartManager.initialize(" + options.webPartTag + ").start");
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartInitialize = function (options) {
        _PerformanceLogger.devMark("ClientSideWebPartManager.initialize(" + options.webPartTag + ").start");
        return Promise.resolve();
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartInitialize = function (options) {
        _PerformanceLogger.devMark("ClientSideWebPartManager.initialize(" + options.webPartTag + ").end");
        return;
    };
    BaseWebPartHost.prototype.onAfterWebPartInitializeFailed = function (options, error) {
        if (Experiments.getMarkFailureInPerformanceLoggerExperimentVariant() === 1) {
            _PerformanceLogger.endFailureForComponent(options.webPartTag, 'Initialize');
        }
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onBeforeWebPartRender = function (options) {
        _PerformanceLogger.devMark("ClientSideWebPartManager.render(" + options.webPartTag + ").start");
        return;
    };
    /**
     * @virtual
     */
    BaseWebPartHost.prototype.onAfterWebPartRender = function (options) {
        if (!KillSwitches.isResolveRenderTimeActivated() && typeof options.renderCompleteTime === 'number') {
            _PerformanceLogger.endMarkForComponentWithTimestamp(options.webPartTag, options.renderCompleteTime);
        }
        else {
            _PerformanceLogger.endMarkForComponent(options.webPartTag);
        }
        return;
    };
    BaseWebPartHost.prototype.onAfterWebPartRenderFailed = function (options, error) {
        if (Experiments.getMarkFailureInPerformanceLoggerExperimentVariant() === 1) {
            _PerformanceLogger.endFailureForComponent(options.webPartTag, 'Render');
        }
        return;
    };
    return BaseWebPartHost;
}());
export { BaseWebPartHost };
//# sourceMappingURL=BaseWebPartHost.js.map