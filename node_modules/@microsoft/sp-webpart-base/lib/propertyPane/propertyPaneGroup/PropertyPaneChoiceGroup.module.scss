// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE in the project root for license information.

// This file was copied from ChoiceGroup.scss in Office UI Fabric React because it's not shipped
// It was modified to add some of the values from Fabric React's _semanticColorVariables.scss, and modified so that
// the styling would work correctly outside of the main ChoiceGroup component

@import '../../styles/themedFabric.Common.scss';
@import '../../styles/_focusBorder.scss';

$bodyBackgroundColor: $ms-color-white;
$bodyForegroundColor: $ms-color-neutralPrimary;
$disabledBackgroundColor: $bodyBackgroundColor;
$dividerColor: $ms-color-neutralLight;
$bodyBackgroundColor: $ms-color-white;
$disabledBackgroundColor: $ms-color-neutralLighter;
$disabledTextColor: $ms-color-neutralTertiaryAlt;
$controlBackgroundColor: $ms-color-white;
$controlBackgroundSelectedColor: $ms-color-themePrimary;
$controlBackgroundSelectedHoverColor: $ms-color-themeDarkAlt;
$controlForegroundColor: $ms-color-neutralPrimary;
$controlForegroundHoverColor: $ms-color-black;
$controlBorderUnselectedColor: $ms-color-neutralTertiary;
$controlBorderUnselectedHoverColor: $ms-color-neutralPrimary;

// --------------------------------------------------
// ChoiceField semantic slots

$radioButton-background-color: $controlBackgroundColor;
$radioButton-text-color: $controlForegroundColor;
$radioButton-text-hover-color: $controlForegroundHoverColor;
$radioButton-dot-color: $controlBackgroundSelectedColor;
$radioButton-border-color: $controlBorderUnselectedColor;
$radioButton-border-hover-color: $controlBorderUnselectedHoverColor;
$radioButton-border-selected-color: $radioButton-dot-color;
$radioButton-border-selected-hover-color: $controlBackgroundSelectedHoverColor;
$radioButton-text-disabled-color: $disabledTextColor;
$radioButton-background-unselected-disabled-color: $disabledTextColor;
$radioButton-dot-disabled-color: $radioButton-background-unselected-disabled-color;
$radioButton-border-disabled-color: $radioButton-background-unselected-disabled-color;

//
// --------------------------------------------------
// ChoiceField styles

$ms-choiceField-field-size: 20px;
$ms-choiceField-iconField-size: 96px;
$ms-choiceField-transition-duration: 200ms;
$ms-choiceField-transition-duration-inner: 150ms;
$ms-choiceField-transition-timing: cubic-bezier(0.4, 0, 0.23, 1);

//== Component: Choicefield group
//

.root {
  display: block;
}

.imageRoot {
  overflow: hidden;
}

.image {
  display: block;
  opacity: 0;

  &.imageIsLoaded {
    opacity: 1;
  }
}

// The circle
.field::before {
  content: '';
  display: inline-block;
  background-color: $radioButton-background-color;
  border: 1px solid $radioButton-border-color;
  width: $ms-choiceField-field-size;
  height: $ms-choiceField-field-size;
  font-weight: normal;
  position: absolute;
  top: -1px;
  box-sizing: border-box;
  transition-property: border-color;
  transition-duration: $ms-choiceField-transition-duration;
  transition-timing-function: $ms-choiceField-transition-timing;
  border-radius: 50%;
}

// The dot
.field::after {
  content: '';
  width: 0;
  height: 0;
  border-radius: 50%;
  position: absolute;
  @include ms-left($ms-choiceField-field-size / 2);
  @include ms-right(0);
  transition-property: border-width;
  transition-duration: $ms-choiceField-transition-duration-inner;
  transition-timing-function: $ms-choiceField-transition-timing;
  box-sizing: border-box;
}

.field {
  display: inline-block;
  cursor: pointer;
  margin-top: 0;
  position: relative;
  vertical-align: top;
  user-select: none;

  &:hover,
  &:focus {
    &::before {
      border-color: $radioButton-border-hover-color;
    }
  }

  //== State: A choiceField is checked
  //
  &.fieldIsChecked {
    &::before {
      // the circle
      border: 2px solid;
      border-color: $radioButton-border-selected-color;

      @media screen and (-ms-high-contrast: active) {
        border-color: $ms-color-contrastBlackSelected;
      }

      @media screen and (-ms-high-contrast: black-on-white) {
        border-color: $ms-color-contrastWhiteSelected;
      }
    }

    &::after {
      // the dot
      border: 5px solid;
      border-color: $radioButton-dot-color;
      top: 4px;
      @include ms-left(5px);
      width: 10px;
      height: 10px;

      @media screen and (-ms-high-contrast: active) {
        border-color: $ms-color-contrastBlackSelected;
      }

      @media screen and (-ms-high-contrast: black-on-white) {
        border-color: $ms-color-contrastWhiteSelected;
      }
    }

    &:hover,
    &:focus {
      &::before {
        border-color: $radioButton-border-selected-hover-color;
      }
    }
  }

  //== State: A disabled choiceField
  //
  &.fieldIsDisabled {
    cursor: default;

    &::before {
      background-color: $radioButton-background-unselected-disabled-color;
      border-color: $radioButton-border-disabled-color;

      @media screen and (-ms-high-contrast: active) {
        border-color: $ms-color-contrastBlackDisabled;
      }

      @media screen and (-ms-high-contrast: black-on-white) {
        border-color: $ms-color-contrastWhiteDisabled;
      }
    }

    :global(.ms-Label) {
      color: $radioButton-text-disabled-color;

      @media screen and (-ms-high-contrast: active) {
        color: $ms-color-contrastBlackDisabled;
      }

      @media screen and (-ms-high-contrast: black-on-white) {
        color: $ms-color-contrastWhiteDisabled;
      }
    }
  }

  &.fieldIsChecked.fieldIsDisabled {
    &::before {
      background-color: $radioButton-background-color;
      border-color: $radioButton-border-disabled-color;
    }
    &::after {
      background-color: $radioButton-dot-disabled-color;
    }
  }
}

.fieldIsImage,
.fieldIsIcon {
  display: inline-flex;
  font-size: 0;
  @include ms-margin(0, 4px, 4px, 0);
  @include ms-padding-left(0px);
  @include ms-bgColor-neutralLighter;
  $radioButtonSpacing: 3px;
  $radioButtonInnerSize: 5px;

  display: inline-block;
  box-sizing: border-box;
  width: 100%;
  cursor: pointer;
  padding-top: 22px;
  margin: 0;
  text-align: center;
  transition: all $ms-choiceField-transition-duration ease;
  border: 2px solid transparent;

  &.fieldIsDisabled {
    cursor: default;

    .innerField {
      opacity: 0.25;
    }
  }

  .innerField {
    position: relative;
    padding: 0 28px;

    .imageWrapper {
      padding-bottom: 2px;
      // transition: opacity $ms-choiceField-transition-duration ease;

      &.imageWrapperIsHidden {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        opacity: 0;
      }

      :global(.ms-Image) {
        display: inline-block;
      }
    }
  }

  .labelWrapper {
    $lineHeight: 16px;
    display: block;
    position: relative;
    margin: 4px 0 0 0;
    height: $lineHeight * 2;
    line-height: $lineHeight;
    overflow: hidden;
    white-space: pre-wrap;
    text-overflow: ellipsis;
    @include ms-font-m;

    :global(.ms-Label) {
      padding: 0;
    }
  }

  &::before {
    top: $radioButtonSpacing;
    @include ms-right($radioButtonSpacing);
    left: auto !important; // To reset the value of 'left' to its default value, so that 'right' works
    opacity: 0;
  }

  &::after {
    top: $radioButtonSpacing + ($radioButtonInnerSize * 2);
    @include ms-right($radioButtonSpacing + ($radioButtonInnerSize * 2));
    left: auto !important; // To reset the value of 'left' to its default value, so that 'right' works
  }

  &:not(.fieldIsDisabled) {
    &:hover,
    &:focus {
      border-color: $ms-color-neutralTertiaryAlt;

      &::before {
        opacity: 1;
      }
    }

    &.fieldIsChecked {
      border-color: $ms-color-themePrimary;

      &::before {
        opacity: 1;
      }

      &::after {
        top: $radioButtonSpacing + $radioButtonInnerSize;
        @include ms-right($radioButtonSpacing + $radioButtonInnerSize);
      }

      &:hover,
      &:focus {
        border-color: $ms-color-themeDark;

        &::before {
          border-color: $ms-color-themeDark;
        }
        &::after {
          background-color: $ms-color-themeDark;
        }
      }
    }
  }
}

.choiceFieldIsIcon {
  $iconSize: 32px;

  height: $ms-choiceField-iconField-size;
  width: $ms-choiceField-iconField-size;

  .iconWrapper {
    font-size: $iconSize;
    line-height: $iconSize;
    height: $iconSize;
  }
}

@mixin highContrast-border($active-color, $bw-color, $size: 2px) {
  @media screen and (-ms-high-contrast: active) {
    border: $size solid $active-color;
  }

  @media screen and (-ms-high-contrast: black-on-white) {
    border: $size solid $bw-color;
  }
}

@mixin highContrast-color($active-color, $bw-color) {
  @media screen and (-ms-high-contrast: active) {
    color: $active-color;
  }

  @media screen and (-ms-high-contrast: black-on-white) {
    color: $bw-color;
  }
}

:global(.ms-Fabric.is-focusVisible) .choiceFieldIsInFocus {
  @include focus-border(1px, $ms-color-neutralPrimary, 1px, false);

  @media screen and (-ms-high-contrast: active) {
    @include focus-border(1px, $ms-color-white, 2px, false);
  }
  @media screen and (-ms-high-contrast: black-on-white) {
    @include focus-border(1px, $ms-color-black, 2px, false);
  }
}

:global(.ms-Fabric.is-focusVisible) .choiceFieldIsInFocus {
  &.choiceFieldIsImage,
  &.choiceFieldIsIcon {
    @include focus-border(0, $ms-color-neutralPrimary, 1px, false);

    @media screen and (-ms-high-contrast: active) {
      @include focus-border(1px, $ms-color-white, 2px, false);
    }
    @media screen and (-ms-high-contrast: black-on-white) {
      @include focus-border(1px, $ms-color-black, 3px, false);
    }
  }
}
