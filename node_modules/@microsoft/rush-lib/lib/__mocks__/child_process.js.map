{"version":3,"file":"child_process.js","sourceRoot":"","sources":["../../src/__mocks__/child_process.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;AAE3D,oBAAoB;AAEpB,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvC,MAAM,YAAY,GAAQ,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;AAClE,MAAM,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;AAC/D,YAAY,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAC7C,YAAY,CAAC,oBAAoB,GAAG,kBAAkB,CAAC;AAEvD,IAAI,eAAe,GAAG,wBAAwB,EAAE,CAAC;AAEjD;;GAEG;AACH,SAAS,wBAAwB,CAAC,WAAiB;IACjD,MAAM,MAAM,GAAG,WAAW,IAAI,EAAE,CAAC;IACjC,OAAO;QACL,SAAS,EAAE,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK;QAC7E,UAAU,EAAE,OAAO,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC7E,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAS,kBAAkB,CAAC,WAAgB;IAC1C,eAAe,GAAG,wBAAwB,CAAC,WAAW,CAAC,CAAC;AAC1D,CAAC;AAED;;GAEG;AACH,SAAS,KAAK,CAAC,IAAY,EAAE,IAAc,EAAE,OAAW;IACtD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,YAAY,EAAE,CAAC;IAE/C,gGAAgG;IAChG,oCAAoC;IACpC,MAAM,SAAS,GAAG,IAAI,YAAY,EAAE,CAAC;IACrC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE;QACnC,KAAK,EAAE,IAAI,YAAY,EAAE;QACzB,MAAM,EAAE,IAAI,YAAY,EAAE;QAC1B,MAAM,EAAE,IAAI,YAAY,EAAE;QAC1B,EAAE,EAAE,SAAS,CAAC,EAAE;QAChB,IAAI,EAAE,SAAS,CAAC,IAAI;KACrB,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,EAAE;QACd,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,IAAI,IAAI,wBAAwB,CAAC,CAAC;QAEhE,IAAI,eAAe,CAAC,SAAS,EAAE;YAC7B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,IAAI,IAAI,qCAAqC,CAAC,CAAC;SAC9E;QAED,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;GAEG;AACH,YAAY,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;AAEtD,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* eslint-disable */\r\n\r\nconst EventEmitter = require('events');\r\n\r\nconst childProcess: any = jest.genMockFromModule('child_process');\r\nconst childProcessActual = jest.requireActual('child_process');\r\nchildProcess.spawn.mockImplementation(spawn);\r\nchildProcess.__setSpawnMockConfig = setSpawnMockConfig;\r\n\r\nlet spawnMockConfig = normalizeSpawnMockConfig();\r\n\r\n/**\r\n * Helper to initialize how the `spawn` mock should behave.\r\n */\r\nfunction normalizeSpawnMockConfig(maybeConfig?: any) {\r\n  const config = maybeConfig || {};\r\n  return {\r\n    emitError: typeof config.emitError !== 'undefined' ? config.emitError : false,\r\n    returnCode: typeof config.returnCode !== 'undefined' ? config.returnCode : 0\r\n  };\r\n}\r\n\r\n/**\r\n * Initialize the `spawn` mock behavior.\r\n *\r\n * Not a pure function.\r\n */\r\nfunction setSpawnMockConfig(spawnConfig: any) {\r\n  spawnMockConfig = normalizeSpawnMockConfig(spawnConfig);\r\n}\r\n\r\n/**\r\n * Mock of `spawn`.\r\n */\r\nfunction spawn(file: string, args: string[], options: {}) {\r\n  const cpMock = new childProcess.ChildProcess();\r\n\r\n  // Add working event emitters ourselves since `genMockFromModule` does not add them because they\r\n  // are dynamically added by `spawn`.\r\n  const cpEmitter = new EventEmitter();\r\n  const cp = Object.assign({}, cpMock, {\r\n    stdin: new EventEmitter(),\r\n    stdout: new EventEmitter(),\r\n    stderr: new EventEmitter(),\r\n    on: cpEmitter.on,\r\n    emit: cpEmitter.emit\r\n  });\r\n\r\n  setTimeout(() => {\r\n    cp.stdout.emit('data', `${file} ${args}: Mock task is spawned`);\r\n\r\n    if (spawnMockConfig.emitError) {\r\n      cp.stderr.emit('data', `${file} ${args}: A mock error occurred in the task`);\r\n    }\r\n\r\n    cp.emit('close', spawnMockConfig.returnCode);\r\n  }, 0);\r\n\r\n  return cp;\r\n}\r\n\r\n/**\r\n * Ensure the real spawnSync function is used, otherwise LockFile breaks.\r\n */\r\nchildProcess.spawnSync = childProcessActual.spawnSync;\r\n\r\nmodule.exports = childProcess;\r\n"]}