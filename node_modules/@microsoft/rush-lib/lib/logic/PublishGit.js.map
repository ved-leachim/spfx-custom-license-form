{"version":3,"file":"PublishGit.js","sourceRoot":"","sources":["../../src/logic/PublishGit.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { PublishUtilities } from './PublishUtilities';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { Git } from './Git';\r\n\r\nconst DUMMY_BRANCH_NAME: string = '-branch-name-';\r\n\r\nexport class PublishGit {\r\n  private readonly _targetBranch: string | undefined;\r\n  private readonly _gitPath: string;\r\n\r\n  public constructor(git: Git, targetBranch: string | undefined) {\r\n    this._targetBranch = targetBranch;\r\n    this._gitPath = git.getGitPathOrThrow();\r\n  }\r\n\r\n  public checkout(branchName: string | undefined, createBranch: boolean = false): void {\r\n    const params: string[] = ['checkout'];\r\n    if (createBranch) {\r\n      params.push('-b');\r\n    }\r\n\r\n    params.push(branchName || DUMMY_BRANCH_NAME);\r\n\r\n    PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, params);\r\n  }\r\n\r\n  public merge(branchName: string): void {\r\n    PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, ['merge', branchName, '--no-edit']);\r\n  }\r\n\r\n  public deleteBranch(branchName: string | undefined, hasRemote: boolean = true): void {\r\n    if (!branchName) {\r\n      branchName = DUMMY_BRANCH_NAME;\r\n    }\r\n\r\n    PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, ['branch', '-d', branchName]);\r\n    if (hasRemote) {\r\n      PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, [\r\n        'push',\r\n        'origin',\r\n        '--delete',\r\n        branchName\r\n      ]);\r\n    }\r\n  }\r\n\r\n  public pull(): void {\r\n    const params: string[] = ['pull', 'origin'];\r\n    if (this._targetBranch) {\r\n      params.push(this._targetBranch);\r\n    }\r\n\r\n    PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, params);\r\n  }\r\n\r\n  public fetch(): void {\r\n    PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, ['fetch', 'origin']);\r\n  }\r\n\r\n  public addChanges(pathspec?: string, workingDirectory?: string): void {\r\n    const files: string = pathspec ? pathspec : '.';\r\n    PublishUtilities.execCommand(\r\n      !!this._targetBranch,\r\n      this._gitPath,\r\n      ['add', files],\r\n      workingDirectory ? workingDirectory : process.cwd()\r\n    );\r\n  }\r\n\r\n  public addTag(\r\n    shouldExecute: boolean,\r\n    packageName: string,\r\n    packageVersion: string,\r\n    commitId: string | undefined\r\n  ): void {\r\n    // Tagging only happens if we're publishing to real NPM and committing to git.\r\n    const tagName: string = PublishUtilities.createTagname(packageName, packageVersion);\r\n    PublishUtilities.execCommand(!!this._targetBranch && shouldExecute, this._gitPath, [\r\n      'tag',\r\n      '-a',\r\n      tagName,\r\n      '-m',\r\n      `${packageName} v${packageVersion}`,\r\n      ...(commitId ? [commitId] : [])\r\n    ]);\r\n  }\r\n\r\n  public hasTag(packageConfig: RushConfigurationProject): boolean {\r\n    const tagName: string = PublishUtilities.createTagname(\r\n      packageConfig.packageName,\r\n      packageConfig.packageJson.version\r\n    );\r\n    const tagOutput: string = Utilities.executeCommandAndCaptureOutput(\r\n      this._gitPath,\r\n      ['tag', '-l', tagName],\r\n      packageConfig.projectFolder,\r\n      PublishUtilities.getEnvArgs(),\r\n      true\r\n    ).replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n\r\n    return tagOutput === tagName;\r\n  }\r\n\r\n  public commit(commitMessage: string): void {\r\n    PublishUtilities.execCommand(!!this._targetBranch, this._gitPath, [\r\n      'commit',\r\n      '-m',\r\n      commitMessage,\r\n      '--no-verify'\r\n    ]);\r\n  }\r\n\r\n  public push(branchName: string | undefined): void {\r\n    PublishUtilities.execCommand(\r\n      !!this._targetBranch,\r\n      this._gitPath,\r\n      // We append \"--no-verify\" to prevent Git hooks from running.  For example, people may\r\n      // want to invoke \"rush change -v\" as a pre-push hook.\r\n      [\r\n        'push',\r\n        'origin',\r\n        `HEAD:${branchName || DUMMY_BRANCH_NAME}`,\r\n        '--follow-tags',\r\n        '--verbose',\r\n        '--no-verify'\r\n      ]\r\n    );\r\n  }\r\n}\r\n"]}