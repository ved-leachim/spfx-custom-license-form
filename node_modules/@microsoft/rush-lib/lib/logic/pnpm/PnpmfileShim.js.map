{"version":3,"file":"PnpmfileShim.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmfileShim.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;AAkB3D,sCAAsC;AACtC,MAAM,gBAAgB,GAA0B,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACnF,wGAAwG;AACxG,MAAM,MAAM,GAAmB,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACpE,gDAAgD;AAChD,MAAM,cAAc,GAA0B,gBAAgB,CAAC,iBAAiB;IAC9E,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC;IAC7B,CAAC,CAAC,SAAS,CAAC;AAEd,8GAA8G;AAC9G,4GAA4G;AAC5G,sEAAsE;AACtE,SAAS,oBAAoB,CAAC,YAAmD;IAC/E,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC,EAAE;QAClD,IAAI,gBAAgB,CAAC,oBAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC9D,MAAM,gBAAgB,GAAW,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC7E,MAAM,OAAO,GAAW,YAAa,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,gBAAgB,CAAC,0BAA0B,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBACpE,MAAM,mBAAmB,GACvB,gBAAgB,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;oBACpE,SAAS;iBACV;aACF;YACD,IAAI,YAAY,GAAY,KAAK,CAAC;YAClC,IAAI;gBACF,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACtF;YAAC,WAAM;gBACN,+BAA+B;aAChC;YAED,IAAI,YAAY,IAAI,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAE;gBAC5D,YAAa,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC;aACxC;SACF;KACF;AACH,CAAC;AAED,MAAM,YAAY,GAAc;IAC9B,KAAK,EAAE;QACL,4CAA4C;QAC5C,8DAA8D;QAC9D,gBAAgB,EAAE,CAAC,QAAmB,EAAE,OAAY,EAAE,EAAE;YACtD,OAAO,cAAc,IAAI,cAAc,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC,gBAAgB;gBACpF,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC;gBAC1D,CAAC,CAAC,QAAQ,CAAC;QACf,CAAC;QAED,4FAA4F;QAC5F,8DAA8D;QAC9D,WAAW,EAAE,CAAC,GAAiB,EAAE,OAAY,EAAE,EAAE;YAC/C,oBAAoB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACvC,oBAAoB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC1C,oBAAoB,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAC/C,OAAO,cAAc,IAAI,cAAc,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC,WAAW;gBAC/E,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC;gBAChD,CAAC,CAAC,GAAG,CAAC;QACV,CAAC;KACF;CACF,CAAC;AAEF,iBAAS,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n// Uncomment \"/* type */\" when we upgrade to TS 3.9\r\nimport { /* type */ IPackageJson } from '@rushstack/node-core-library';\r\nimport { /* type */ IPnpmfileShimSettings } from './IPnpmfileShimSettings';\r\nimport /* type */ * as TSemver from 'semver';\r\n\r\ninterface ILockfile {}\r\n\r\ninterface IPnpmfile {\r\n  hooks?: {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    afterAllResolved?: (lockfile: ILockfile, context: any) => ILockfile;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    readPackage?: (pkg: IPackageJson, context: any) => IPackageJson;\r\n  };\r\n}\r\n\r\n// Load in the generated settings file\r\nconst pnpmfileSettings: IPnpmfileShimSettings = require('./pnpmfileSettings.json');\r\n// We will require semver from this path on disk, since this is the version of semver shipping with Rush\r\nconst semver: typeof TSemver = require(pnpmfileSettings.semverPath);\r\n// Only require the client pnpmfile if requested\r\nconst clientPnpmfile: IPnpmfile | undefined = pnpmfileSettings.useClientPnpmfile\r\n  ? require('./clientPnpmfile')\r\n  : undefined;\r\n\r\n// Set the preferred versions on the dependency map. If the version on the map is an allowedAlternativeVersion\r\n// then skip it. Otherwise, check to ensure that the common version is a subset of the specified version. If\r\n// it is, then replace the specified version with the preferredVersion\r\nfunction setPreferredVersions(dependencies?: { [dependencyName: string]: string }): void {\r\n  for (const name of Object.keys(dependencies || {})) {\r\n    if (pnpmfileSettings.allPreferredVersions.hasOwnProperty(name)) {\r\n      const preferredVersion: string = pnpmfileSettings.allPreferredVersions[name];\r\n      const version: string = dependencies![name];\r\n      if (pnpmfileSettings.allowedAlternativeVersions.hasOwnProperty(name)) {\r\n        const allowedAlternatives: ReadonlyArray<string> | undefined =\r\n          pnpmfileSettings.allowedAlternativeVersions[name];\r\n        if (allowedAlternatives && allowedAlternatives.indexOf(version) > -1) {\r\n          continue;\r\n        }\r\n      }\r\n      let isValidRange: boolean = false;\r\n      try {\r\n        isValidRange = !!semver.validRange(preferredVersion) && !!semver.validRange(version);\r\n      } catch {\r\n        // Swallow invalid range errors\r\n      }\r\n\r\n      if (isValidRange && semver.subset(preferredVersion, version)) {\r\n        dependencies![name] = preferredVersion;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst pnpmfileShim: IPnpmfile = {\r\n  hooks: {\r\n    // Call the original pnpmfile (if it exists)\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    afterAllResolved: (lockfile: ILockfile, context: any) => {\r\n      return clientPnpmfile && clientPnpmfile.hooks && clientPnpmfile.hooks.afterAllResolved\r\n        ? clientPnpmfile.hooks.afterAllResolved(lockfile, context)\r\n        : lockfile;\r\n    },\r\n\r\n    // Set the preferred versions in the package, then call the original pnpmfile (if it exists)\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    readPackage: (pkg: IPackageJson, context: any) => {\r\n      setPreferredVersions(pkg.dependencies);\r\n      setPreferredVersions(pkg.devDependencies);\r\n      setPreferredVersions(pkg.optionalDependencies);\r\n      return clientPnpmfile && clientPnpmfile.hooks && clientPnpmfile.hooks.readPackage\r\n        ? clientPnpmfile.hooks.readPackage(pkg, context)\r\n        : pkg;\r\n    }\r\n  }\r\n};\r\n\r\nexport = pnpmfileShim;\r\n"]}