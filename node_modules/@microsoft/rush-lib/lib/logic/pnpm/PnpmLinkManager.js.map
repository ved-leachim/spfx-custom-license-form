{"version":3,"file":"PnpmLinkManager.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmLinkManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport uriEncode = require('strict-uri-encode');\r\nimport pnpmLinkBins from '@pnpm/link-bins';\r\nimport * as semver from 'semver';\r\nimport colors from 'colors';\r\n\r\nimport {\r\n  Text,\r\n  FileSystem,\r\n  FileConstants,\r\n  InternalError,\r\n  AlreadyReportedError\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { BaseLinkManager } from '../base/BaseLinkManager';\r\nimport { BasePackage } from '../base/BasePackage';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { PnpmShrinkwrapFile, IPnpmShrinkwrapDependencyYaml } from './PnpmShrinkwrapFile';\r\nimport { PnpmProjectDependencyManifest } from './PnpmProjectDependencyManifest';\r\n\r\n// special flag for debugging, will print extra diagnostic information,\r\n// but comes with performance cost\r\nconst DEBUG: boolean = false;\r\n\r\nexport class PnpmLinkManager extends BaseLinkManager {\r\n  private readonly _pnpmVersion: semver.SemVer = new semver.SemVer(\r\n    this._rushConfiguration.packageManagerToolVersion\r\n  );\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  public async createSymlinksForProjects(force: boolean): Promise<void> {\r\n    const useWorkspaces: boolean =\r\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces;\r\n    if (useWorkspaces) {\r\n      console.log(\r\n        colors.red(\r\n          'Linking is not supported when using workspaces. Run \"rush install\" or \"rush update\" ' +\r\n            'to restore project node_modules folders.'\r\n        )\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    await super.createSymlinksForProjects(force);\r\n  }\r\n\r\n  protected async _linkProjects(): Promise<void> {\r\n    if (this._rushConfiguration.projects.length > 0) {\r\n      // Use shrinkwrap from temp as the committed shrinkwrap may not always be up to date\r\n      // See https://github.com/microsoft/rushstack/issues/1273#issuecomment-492779995\r\n      const pnpmShrinkwrapFile: PnpmShrinkwrapFile | undefined = PnpmShrinkwrapFile.loadFromFile(\r\n        this._rushConfiguration.tempShrinkwrapFilename,\r\n        this._rushConfiguration.pnpmOptions\r\n      );\r\n\r\n      if (!pnpmShrinkwrapFile) {\r\n        throw new InternalError(\r\n          `Cannot load shrinkwrap at \"${this._rushConfiguration.tempShrinkwrapFilename}\"`\r\n        );\r\n      }\r\n\r\n      for (const rushProject of this._rushConfiguration.projects) {\r\n        await this._linkProject(rushProject, pnpmShrinkwrapFile);\r\n      }\r\n    } else {\r\n      console.log(\r\n        colors.yellow(\r\n          '\\nWarning: Nothing to do. Please edit rush.json and add at least one project' +\r\n            ' to the \"projects\" section.\\n'\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is called once for each local project from Rush.json.\r\n   * @param project             The local project that we will create symlinks for\r\n   * @param rushLinkJson        The common/temp/rush-link.json output file\r\n   */\r\n  private async _linkProject(\r\n    project: RushConfigurationProject,\r\n    pnpmShrinkwrapFile: PnpmShrinkwrapFile\r\n  ): Promise<void> {\r\n    console.log(os.EOL + 'LINKING: ' + project.packageName);\r\n\r\n    // first, read the temp package.json information\r\n    // Example: \"project1\"\r\n    const unscopedTempProjectName: string = this._rushConfiguration.packageNameParser.getUnscopedName(\r\n      project.tempProjectName\r\n    );\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\r\n    const extractedFolder: string = path.join(\r\n      this._rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName,\r\n      unscopedTempProjectName\r\n    );\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\\package.json\"\r\n    const packageJsonFilename: string = path.join(extractedFolder, FileConstants.PackageJson);\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\"\r\n    const installFolderName: string = path.join(\r\n      this._rushConfiguration.commonTempFolder,\r\n      RushConstants.nodeModulesFolderName,\r\n      RushConstants.rushTempNpmScope,\r\n      unscopedTempProjectName\r\n    );\r\n\r\n    const commonPackage: BasePackage = BasePackage.createVirtualTempPackage(\r\n      packageJsonFilename,\r\n      installFolderName\r\n    );\r\n\r\n    const localPackage: BasePackage = BasePackage.createLinkedPackage(\r\n      project.packageName,\r\n      commonPackage.version,\r\n      project.projectFolder\r\n    );\r\n\r\n    // now that we have the temp package.json, we can go ahead and link up all the direct dependencies\r\n\r\n    // first, start with the rush dependencies, we just need to link to the project folder\r\n    for (const dependencyName of Object.keys(commonPackage.packageJson!.rushDependencies || {})) {\r\n      const matchedRushPackage:\r\n        | RushConfigurationProject\r\n        | undefined = this._rushConfiguration.getProjectByName(dependencyName);\r\n\r\n      if (matchedRushPackage) {\r\n        // We found a suitable match, so place a new local package that\r\n        // symlinks to the Rush project\r\n        const matchedVersion: string = matchedRushPackage.packageJsonEditor.version;\r\n\r\n        // e.g. \"C:\\my-repo\\project-a\\node_modules\\project-b\" if project-b is a rush dependency of project-a\r\n        const newLocalFolderPath: string = path.join(localPackage.folderPath, 'node_modules', dependencyName);\r\n\r\n        const newLocalPackage: BasePackage = BasePackage.createLinkedPackage(\r\n          dependencyName,\r\n          matchedVersion,\r\n          newLocalFolderPath\r\n        );\r\n\r\n        newLocalPackage.symlinkTargetFolderPath = matchedRushPackage.projectFolder;\r\n        localPackage.children.push(newLocalPackage);\r\n      } else {\r\n        throw new InternalError(\r\n          `Cannot find dependency \"${dependencyName}\" for \"${project.packageName}\" in the Rush configuration`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Iterate through all the regular dependencies\r\n\r\n    // With npm, it's possible for two different projects to have dependencies on\r\n    // the same version of the same library, but end up with different implementations\r\n    // of that library, if the library is installed twice and with different secondary\r\n    // dependencies.The NpmLinkManager recursively links dependency folders to try to\r\n    // honor this. Since PNPM always uses the same physical folder to represent a given\r\n    // version of a library, we only need to link directly to the folder that PNPM has chosen,\r\n    // and it will have a consistent set of secondary dependencies.\r\n\r\n    // each of these dependencies should be linked in a special folder that pnpm\r\n    // creates for the installed version of each .TGZ package, all we need to do\r\n    // is re-use that symlink in order to get linked to whatever PNPM thought was\r\n    // appropriate. This folder is usually something like:\r\n    // C:\\{uri-encoded-path-to-tgz}\\node_modules\\{package-name}\r\n\r\n    // e.g.:\r\n    //   file:projects/bentleyjs-core.tgz\r\n    //   file:projects/build-tools.tgz_dc21d88642e18a947127a751e00b020a\r\n    //   file:projects/imodel-from-geojson.tgz_request@2.88.0\r\n    const tempProjectDependencyKey: string | undefined = pnpmShrinkwrapFile.getTempProjectDependencyKey(\r\n      project.tempProjectName\r\n    );\r\n\r\n    if (!tempProjectDependencyKey) {\r\n      throw new Error(`Cannot get dependency key for temp project: ${project.tempProjectName}`);\r\n    }\r\n    // e.g.: file:projects/project-name.tgz\r\n    const tarballEntry: string | undefined = pnpmShrinkwrapFile.getTarballPath(tempProjectDependencyKey);\r\n\r\n    if (!tarballEntry) {\r\n      throw new InternalError(`Cannot find tarball path for \"${project.tempProjectName}\" in shrinkwrap.`);\r\n    }\r\n\r\n    // e.g.: projects\\api-documenter.tgz\r\n    const relativePathToTgzFile: string | undefined = tarballEntry.slice(`file:`.length);\r\n\r\n    // e.g.: C:\\wbt\\common\\temp\\projects\\api-documenter.tgz\r\n    const absolutePathToTgzFile: string = path.resolve(\r\n      this._rushConfiguration.commonTempFolder,\r\n      relativePathToTgzFile\r\n    );\r\n\r\n    // The folder name in `.local` is constructed as:\r\n    //   UriEncode(absolutePathToTgzFile) + _suffix\r\n    //\r\n    // Note that _suffix is not encoded. The tarball attribute of the package 'file:projects/project-name.tgz_suffix'\r\n    // holds the tarball path 'file:projects/project-name.tgz', which can be used for the constructing the folder name.\r\n    //\r\n    // '_suffix' is extracted by stripping the tarball path from top level dependency value.\r\n    // tarball path = 'file:projects/project-name.tgz'\r\n    // top level dependency = 'file:projects/project-name.tgz_suffix'\r\n\r\n    // e.g.:\r\n    //   '' [empty string]\r\n    //   _jsdom@11.12.0\r\n    //   _2a665c89609864b4e75bc5365d7f8f56\r\n    const folderNameSuffix: string =\r\n      tarballEntry && tarballEntry.length < tempProjectDependencyKey.length\r\n        ? tempProjectDependencyKey.slice(tarballEntry.length)\r\n        : '';\r\n\r\n    // e.g.:\r\n    //   C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\r\n    //   C%3A%2Fdev%2Fimodeljs%2Fimodeljs%2Fcommon%2Ftemp%2Fprojects%2Fpresentation-integration-tests.tgz_jsdom@11.12.0\r\n    //   C%3A%2Fdev%2Fimodeljs%2Fimodeljs%2Fcommon%2Ftemp%2Fprojects%2Fbuild-tools.tgz_2a665c89609864b4e75bc5365d7f8f56\r\n    const folderNameInLocalInstallationRoot: string =\r\n      uriEncode(Text.replaceAll(absolutePathToTgzFile, path.sep, '/')) + folderNameSuffix;\r\n\r\n    // e.g.: C:\\wbt\\common\\temp\\node_modules\\.local\\C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\\node_modules\r\n\r\n    const pathToLocalInstallation: string = this._getPathToLocalInstallation(\r\n      folderNameInLocalInstallationRoot\r\n    );\r\n\r\n    const parentShrinkwrapEntry:\r\n      | IPnpmShrinkwrapDependencyYaml\r\n      | undefined = pnpmShrinkwrapFile.getShrinkwrapEntryFromTempProjectDependencyKey(\r\n      tempProjectDependencyKey\r\n    );\r\n    if (!parentShrinkwrapEntry) {\r\n      throw new InternalError(\r\n        `Cannot find shrinkwrap entry using dependency key for temp project: ${project.tempProjectName}`\r\n      );\r\n    }\r\n\r\n    const pnpmProjectDependencyManifest: PnpmProjectDependencyManifest = new PnpmProjectDependencyManifest({\r\n      pnpmShrinkwrapFile,\r\n      project\r\n    });\r\n\r\n    for (const dependencyName of Object.keys(commonPackage.packageJson!.dependencies || {})) {\r\n      const newLocalPackage: BasePackage = this._createLocalPackageForDependency(\r\n        pnpmProjectDependencyManifest,\r\n        project,\r\n        parentShrinkwrapEntry,\r\n        localPackage,\r\n        pathToLocalInstallation,\r\n        dependencyName\r\n      )!;\r\n      localPackage.addChild(newLocalPackage);\r\n    }\r\n\r\n    // TODO: Rush does not currently handle optional dependencies of projects. This should be uncommented when\r\n    // support is added\r\n    // for (const dependencyName of Object.keys(commonPackage.packageJson!.optionalDependencies || {})) {\r\n    //   const newLocalPackage: BasePackage | undefined = this._createLocalPackageForDependency(\r\n    //     pnpmProjectDependencyManifest,\r\n    //     project,\r\n    //     parentShrinkwrapEntry,\r\n    //     localPackage,\r\n    //     pathToLocalInstallation,\r\n    //     dependencyName,\r\n    //     true); // isOptional\r\n    //   if (newLocalPackage) {\r\n    //     localPackage.addChild(newLocalPackage);\r\n    //   }\r\n    // }\r\n\r\n    if (DEBUG) {\r\n      localPackage.printTree();\r\n    }\r\n\r\n    PnpmLinkManager._createSymlinksForTopLevelProject(localPackage);\r\n\r\n    if (\r\n      !this._rushConfiguration.experimentsConfiguration.configuration\r\n        .legacyIncrementalBuildDependencyDetection\r\n    ) {\r\n      await pnpmProjectDependencyManifest.saveAsync();\r\n    } else {\r\n      await pnpmProjectDependencyManifest.deleteIfExistsAsync();\r\n    }\r\n\r\n    // Also symlink the \".bin\" folder\r\n    const projectFolder: string = path.join(localPackage.folderPath, 'node_modules');\r\n    const projectBinFolder: string = path.join(localPackage.folderPath, 'node_modules', '.bin');\r\n\r\n    await pnpmLinkBins(projectFolder, projectBinFolder, {\r\n      warn: (msg: string) => console.warn(colors.yellow(msg))\r\n    });\r\n  }\r\n\r\n  private _getPathToLocalInstallation(folderNameInLocalInstallationRoot: string): string {\r\n    // See https://github.com/pnpm/pnpm/releases/tag/v4.0.0\r\n    if (this._pnpmVersion.major >= 4) {\r\n      return path.join(\r\n        this._rushConfiguration.commonTempFolder,\r\n        RushConstants.nodeModulesFolderName,\r\n        '.pnpm',\r\n        'local',\r\n        folderNameInLocalInstallationRoot,\r\n        RushConstants.nodeModulesFolderName\r\n      );\r\n    } else {\r\n      return path.join(\r\n        this._rushConfiguration.commonTempFolder,\r\n        RushConstants.nodeModulesFolderName,\r\n        '.local',\r\n        folderNameInLocalInstallationRoot,\r\n        RushConstants.nodeModulesFolderName\r\n      );\r\n    }\r\n  }\r\n  private _createLocalPackageForDependency(\r\n    pnpmProjectDependencyManifest: PnpmProjectDependencyManifest,\r\n    project: RushConfigurationProject,\r\n    parentShrinkwrapEntry: IPnpmShrinkwrapDependencyYaml,\r\n    localPackage: BasePackage,\r\n    pathToLocalInstallation: string,\r\n    dependencyName: string,\r\n    isOptional: boolean = false\r\n  ): BasePackage | undefined {\r\n    // the dependency we are looking for should have already created a symlink here\r\n\r\n    // FYI dependencyName might contain an NPM scope, here it gets converted into a filesystem folder name\r\n    // e.g. if the dependency is supi:\r\n    // \"C:\\wbt\\common\\temp\\node_modules\\.local\\C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\\node_modules\\supi\"\r\n    const dependencyLocalInstallationSymlink: string = path.join(pathToLocalInstallation, dependencyName);\r\n\r\n    if (!FileSystem.exists(dependencyLocalInstallationSymlink)) {\r\n      // if this occurs, it is a bug in Rush algorithm or unexpected PNPM behavior\r\n      throw new InternalError(\r\n        `Cannot find installed dependency \"${dependencyName}\" in \"${pathToLocalInstallation}\"`\r\n      );\r\n    }\r\n\r\n    if (!FileSystem.getLinkStatistics(dependencyLocalInstallationSymlink).isSymbolicLink()) {\r\n      // if this occurs, it is a bug in Rush algorithm or unexpected PNPM behavior\r\n      throw new InternalError(\r\n        `Dependency \"${dependencyName}\" is not a symlink in \"${pathToLocalInstallation}`\r\n      );\r\n    }\r\n\r\n    // read the version number from the shrinkwrap entry and return if no version is specified\r\n    // and the dependency is optional\r\n    const version: string | undefined = isOptional\r\n      ? (parentShrinkwrapEntry.optionalDependencies || {})[dependencyName]\r\n      : (parentShrinkwrapEntry.dependencies || {})[dependencyName];\r\n    if (!version) {\r\n      if (!isOptional) {\r\n        throw new InternalError(\r\n          `Cannot find shrinkwrap entry dependency \"${dependencyName}\" for temp project: ` +\r\n            `${project.tempProjectName}`\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    const newLocalFolderPath: string = path.join(localPackage.folderPath, 'node_modules', dependencyName);\r\n    const newLocalPackage: BasePackage = BasePackage.createLinkedPackage(\r\n      dependencyName,\r\n      version,\r\n      newLocalFolderPath\r\n    );\r\n\r\n    // The dependencyLocalInstallationSymlink is just a symlink to another folder. To reduce the number of filesystem\r\n    // reads that are needed, we will link to where that symlink pointed, rather than linking to a link.\r\n    newLocalPackage.symlinkTargetFolderPath = FileSystem.getRealPath(dependencyLocalInstallationSymlink);\r\n\r\n    if (\r\n      !this._rushConfiguration.experimentsConfiguration.configuration\r\n        .legacyIncrementalBuildDependencyDetection\r\n    ) {\r\n      pnpmProjectDependencyManifest.addDependency(\r\n        newLocalPackage.name,\r\n        newLocalPackage.version!,\r\n        parentShrinkwrapEntry\r\n      );\r\n    }\r\n\r\n    return newLocalPackage;\r\n  }\r\n}\r\n"]}