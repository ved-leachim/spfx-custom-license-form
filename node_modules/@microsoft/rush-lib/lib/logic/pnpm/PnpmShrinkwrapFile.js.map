{"version":3,"file":"PnpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport crypto from 'crypto';\r\nimport colors from 'colors';\r\nimport { FileSystem, AlreadyReportedError, Import } from '@rushstack/node-core-library';\r\n\r\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\r\nimport { DependencySpecifier } from '../DependencySpecifier';\r\nimport {\r\n  PackageManagerOptionsConfigurationBase,\r\n  PnpmOptionsConfiguration\r\n} from '../../api/RushConfiguration';\r\nimport { IShrinkwrapFilePolicyValidatorOptions } from '../policy/ShrinkwrapFilePolicy';\r\nimport { PNPM_SHRINKWRAP_YAML_FORMAT } from './PnpmYamlCommon';\r\n\r\nconst yamlModule: typeof import('js-yaml') = Import.lazy('js-yaml', require);\r\n\r\nexport interface IPeerDependenciesMetaYaml {\r\n  optional?: boolean;\r\n}\r\n\r\nexport interface IPnpmShrinkwrapDependencyYaml {\r\n  /** Information about the resolved package */\r\n  resolution: {\r\n    /** The hash of the tarball, to ensure archive integrity */\r\n    integrity: string;\r\n    /** The name of the tarball, if this was from a TGX file */\r\n    tarball?: string;\r\n  };\r\n  /** The list of dependencies and the resolved version */\r\n  dependencies?: { [dependency: string]: string };\r\n  /** The list of optional dependencies and the resolved version */\r\n  optionalDependencies?: { [dependency: string]: string };\r\n  /** The list of peer dependencies and the resolved version */\r\n  peerDependencies?: { [dependency: string]: string };\r\n  /**\r\n   * Used to indicate optional peer dependencies, as described in this RFC:\r\n   * https://github.com/yarnpkg/rfcs/blob/master/accepted/0000-optional-peer-dependencies.md\r\n   */\r\n  peerDependenciesMeta?: { [dependency: string]: IPeerDependenciesMetaYaml };\r\n}\r\n\r\nexport interface IPnpmShrinkwrapImporterYaml {\r\n  /** The list of resolved version numbers for direct dependencies */\r\n  dependencies: { [dependency: string]: string };\r\n  /** The list of resolved version numbers for dev dependencies */\r\n  devDependencies: { [dependency: string]: string };\r\n  /** The list of resolved version numbers for optional dependencies */\r\n  optionalDependencies: { [dependency: string]: string };\r\n  /** The list of specifiers used to resolve dependency versions */\r\n  specifiers: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * This interface represents the raw pnpm-lock.YAML file\r\n * Example:\r\n *  {\r\n *    \"dependencies\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    },\r\n *    \"packages\": {\r\n *      \"file:projects/library1.tgz\": {\r\n *        \"dependencies: {\r\n *          \"markdown\": \"0.5.0\"\r\n *        },\r\n *        \"name\": \"@rush-temp/library1\",\r\n *        \"resolution\": {\r\n *          \"tarball\": \"file:projects/library1.tgz\"\r\n *        },\r\n *        \"version\": \"0.0.0\"\r\n *      },\r\n *      \"markdown/0.5.0\": {\r\n *        \"resolution\": {\r\n *          \"integrity\": \"sha1-KCBbVlqK51kt4gdGPWY33BgnIrI=\"\r\n *        }\r\n *      }\r\n *    },\r\n *    \"registry\": \"http://localhost:4873/\",\r\n *    \"shrinkwrapVersion\": 3,\r\n *    \"specifiers\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    }\r\n *  }\r\n */\r\ninterface IPnpmShrinkwrapYaml {\r\n  /** The list of resolved version numbers for direct dependencies */\r\n  dependencies: { [dependency: string]: string };\r\n  /** The list of importers for local workspace projects */\r\n  importers: { [relativePath: string]: IPnpmShrinkwrapImporterYaml };\r\n  /** The description of the solved graph */\r\n  packages: { [dependencyVersion: string]: IPnpmShrinkwrapDependencyYaml };\r\n  /** URL of the registry which was used */\r\n  registry: string;\r\n  /** The list of specifiers used to resolve direct dependency versions */\r\n  specifiers: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * Given an encoded \"dependency key\" from the PNPM shrinkwrap file, this parses it into an equivalent\r\n * DependencySpecifier.\r\n *\r\n * @returns a SemVer string, or undefined if the version specifier cannot be parsed\r\n */\r\nexport function parsePnpmDependencyKey(\r\n  dependencyName: string,\r\n  dependencyKey: string\r\n): DependencySpecifier | undefined {\r\n  if (!dependencyKey) {\r\n    return undefined;\r\n  }\r\n\r\n  if (/^\\w+:/.test(dependencyKey)) {\r\n    // If it starts with an NPM scheme such as \"file:projects/my-app.tgz\", we don't support that\r\n    return undefined;\r\n  }\r\n\r\n  // The package name parsed from the dependency key, or dependencyName if it was omitted.\r\n  // Example: \"@scope/depame\"\r\n  let parsedPackageName: string;\r\n\r\n  // The trailing portion of the dependency key that includes the version and optional peer dependency path.\r\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\"\r\n  let parsedInstallPath: string;\r\n\r\n  // Example: \"path.pkgs.visualstudio.com/@scope/depame/1.4.0\"  --> 0=\"@scope/depame\" 1=\"1.4.0\"\r\n  // Example: \"/isarray/2.0.1\"                                  --> 0=\"isarray\"       1=\"2.0.1\"\r\n  // Example: \"/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7\"       --> 0=\"sinon-chai\"    1=\"2.8.0/chai@3.5.0+sinon@1.17.7\"\r\n  const packageNameMatch: RegExpMatchArray | null = /^[^\\/]*\\/((?:@[^\\/]+\\/)?[^\\/]+)\\/(.*)$/.exec(\r\n    dependencyKey\r\n  );\r\n  if (packageNameMatch) {\r\n    parsedPackageName = packageNameMatch[1];\r\n    parsedInstallPath = packageNameMatch[2];\r\n  } else {\r\n    parsedPackageName = dependencyName;\r\n\r\n    // Example: \"23.6.0_babel-core@6.26.3\"\r\n    // Example: \"23.6.0\"\r\n    parsedInstallPath = dependencyKey;\r\n  }\r\n\r\n  // The SemVer value\r\n  // Example: \"2.8.0\"\r\n  let parsedVersionPart: string;\r\n\r\n  // Example: \"23.6.0_babel-core@6.26.3\" --> \"23.6.0\"\r\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\" --> \"2.8.0\"\r\n  const versionMatch: RegExpMatchArray | null = /^([^\\/_]+)[\\/_]/.exec(parsedInstallPath);\r\n  if (versionMatch) {\r\n    parsedVersionPart = versionMatch[1];\r\n  } else {\r\n    // Example: \"2.8.0\"\r\n    parsedVersionPart = parsedInstallPath;\r\n  }\r\n\r\n  // By this point, we expect parsedVersionPart to be a valid SemVer range\r\n  if (!parsedVersionPart) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!semver.valid(parsedVersionPart)) {\r\n    const urlRegex: RegExp = /^(@?)([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}\\/([^\\/\\\\]+\\/?)*([^\\/\\\\]+)$/i;\r\n    // Test for urls:\r\n    // Examples:\r\n    //     @github.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\r\n    //     github.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\r\n    //     github.com.au/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\r\n    //     bitbucket.com/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\r\n    //     bitbucket.co.in/abc/def/188ed64efd5218beda276e02f2277bf3a6b745b2\r\n    if (urlRegex.test(dependencyKey)) {\r\n      const dependencySpecifier: DependencySpecifier = new DependencySpecifier(dependencyName, dependencyKey);\r\n      return dependencySpecifier;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  // Is it an alias for a different package?\r\n  if (parsedPackageName === dependencyName) {\r\n    // No, it's a regular dependency\r\n    return new DependencySpecifier(parsedPackageName, parsedVersionPart);\r\n  } else {\r\n    // If the parsed package name is different from the dependencyName, then this is an NPM package alias\r\n    return new DependencySpecifier(dependencyName, `npm:${parsedPackageName}@${parsedVersionPart}`);\r\n  }\r\n}\r\n\r\nexport class PnpmShrinkwrapFile extends BaseShrinkwrapFile {\r\n  /**\r\n   * The filename of the shrinkwrap file.\r\n   */\r\n  public readonly shrinkwrapFilename: string;\r\n\r\n  private _shrinkwrapJson: IPnpmShrinkwrapYaml;\r\n\r\n  private constructor(shrinkwrapJson: IPnpmShrinkwrapYaml, shrinkwrapFilename: string) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n    this.shrinkwrapFilename = shrinkwrapFilename;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.registry) {\r\n      this._shrinkwrapJson.registry = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = {};\r\n    }\r\n    if (!this._shrinkwrapJson.importers) {\r\n      this._shrinkwrapJson.importers = {};\r\n    }\r\n    if (!this._shrinkwrapJson.specifiers) {\r\n      this._shrinkwrapJson.specifiers = {};\r\n    }\r\n    if (!this._shrinkwrapJson.packages) {\r\n      this._shrinkwrapJson.packages = {};\r\n    }\r\n  }\r\n\r\n  public static loadFromFile(\r\n    shrinkwrapYamlFilename: string,\r\n    pnpmOptions: PnpmOptionsConfiguration\r\n  ): PnpmShrinkwrapFile | undefined {\r\n    try {\r\n      if (!FileSystem.exists(shrinkwrapYamlFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      const shrinkwrapContent: string = FileSystem.readFile(shrinkwrapYamlFilename);\r\n      const parsedData: IPnpmShrinkwrapYaml = yamlModule.safeLoad(shrinkwrapContent);\r\n      return new PnpmShrinkwrapFile(parsedData, shrinkwrapYamlFilename);\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapYamlFilename}\":${os.EOL}  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public getShrinkwrapHash(): string {\r\n    const shrinkwrapContent: string = this.serialize();\r\n    return crypto.createHash('sha1').update(shrinkwrapContent).digest('hex');\r\n  }\r\n\r\n  /** @override */\r\n  public validate(\r\n    packageManagerOptionsConfig: PackageManagerOptionsConfigurationBase,\r\n    policyOptions: IShrinkwrapFilePolicyValidatorOptions\r\n  ): void {\r\n    super.validate(packageManagerOptionsConfig, policyOptions);\r\n    if (!(packageManagerOptionsConfig instanceof PnpmOptionsConfiguration)) {\r\n      throw new Error('The provided package manager options are not valid for PNPM shrinkwrap files.');\r\n    }\r\n\r\n    // Only check the hash if allowShrinkwrapUpdates is false. If true, the shrinkwrap file\r\n    // may have changed and the hash could be invalid.\r\n    if (packageManagerOptionsConfig.preventManualShrinkwrapChanges && !policyOptions.allowShrinkwrapUpdates) {\r\n      if (!policyOptions.repoState.pnpmShrinkwrapHash) {\r\n        console.log(\r\n          colors.red(\r\n            'The existing shrinkwrap file hash could not be found. You may need to run \"rush update\" to ' +\r\n              'populate the hash. See the \"preventManualShrinkwrapChanges\" setting documentation for details.'\r\n          ) + os.EOL\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n\r\n      if (this.getShrinkwrapHash() !== policyOptions.repoState.pnpmShrinkwrapHash) {\r\n        console.log(\r\n          colors.red(\r\n            'The shrinkwrap file hash does not match the expected hash. Please run \"rush update\" to ensure the ' +\r\n              'shrinkwrap file is up to date. See the \"preventManualShrinkwrapChanges\" setting documentation for ' +\r\n              'details.'\r\n          ) + os.EOL\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\r\n  }\r\n\r\n  /**\r\n   * Gets the path to the tarball file if the package is a tarball.\r\n   * Returns undefined if the package entry doesn't exist or the package isn't a tarball.\r\n   * Example of return value: file:projects/build-tools.tgz\r\n   */\r\n  public getTarballPath(packageName: string): string | undefined {\r\n    const dependency: IPnpmShrinkwrapDependencyYaml = this._shrinkwrapJson.packages[packageName];\r\n\r\n    if (!dependency) {\r\n      return undefined;\r\n    }\r\n\r\n    return dependency.resolution.tarball;\r\n  }\r\n\r\n  public getTopLevelDependencyKey(dependencyName: string): string | undefined {\r\n    return BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n  }\r\n\r\n  /**\r\n   * Gets the version number from the list of top-level dependencies in the \"dependencies\" section\r\n   * of the shrinkwrap file. Sample return values:\r\n   *   '2.1.113'\r\n   *   '1.9.0-dev.27'\r\n   *   'file:projects/empty-webpart-project.tgz'\r\n   *   undefined\r\n   *\r\n   * @override\r\n   */\r\n  public getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\r\n    let value: string | undefined = BaseShrinkwrapFile.tryGetValue(\r\n      this._shrinkwrapJson.dependencies,\r\n      dependencyName\r\n    );\r\n    if (value) {\r\n      // Getting the top level dependency version from a PNPM lockfile version 5.1\r\n      // --------------------------------------------------------------------------\r\n      //\r\n      // 1) Top-level tarball dependency entries in pnpm-lock.yaml look like:\r\n      //    '@rush-temp/sp-filepicker': 'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5'\r\n\r\n      //    Then, it would be defined below:\r\n      //    'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5':\r\n      //      dependencies:\r\n      //       '@microsoft/load-themed-styles': 1.10.7\r\n      //       ...\r\n      //      resolution:\r\n      //       integrity: sha512-guuoFIc**==\r\n      //       tarball: 'file:projects/sp-filepicker.tgz'\r\n\r\n      //    Here, we are interested in the part 'file:projects/sp-filepicker.tgz'. Splitting by underscores is not the\r\n      //    best way to get this because file names could have underscores in them. Instead, we could use the tarball\r\n      //    field in the resolution section.\r\n\r\n      // 2) Top-level non-tarball dependency entries in pnpm-lock.yaml would look like:\r\n      //    '@rushstack/set-webpack-public-path-plugin': 2.1.133\r\n      //    @microsoft/sp-build-node': 1.9.0-dev.27_typescript@2.9.2\r\n\r\n      //    Here, we could just split by underscores and take the first part.\r\n\r\n      // The below code is also compatible with lockfile versions < 5.1\r\n\r\n      const dependency: IPnpmShrinkwrapDependencyYaml = this._shrinkwrapJson.packages[value];\r\n\r\n      if (\r\n        dependency &&\r\n        dependency.resolution &&\r\n        dependency.resolution.tarball &&\r\n        value.startsWith(dependency.resolution.tarball)\r\n      ) {\r\n        return new DependencySpecifier(dependencyName, dependency.resolution.tarball);\r\n      } else {\r\n        const underscoreIndex: number = value.indexOf('_');\r\n        if (underscoreIndex >= 0) {\r\n          value = value.substr(0, underscoreIndex);\r\n        }\r\n      }\r\n\r\n      return new DependencySpecifier(dependencyName, value);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * The PNPM shrinkwrap file has top-level dependencies on the temp projects like this:\r\n   *\r\n   * ```\r\n   * dependencies:\r\n   *   '@rush-temp/my-app': 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0'\r\n   * packages:\r\n   *   /@types/node/10.14.15:\r\n   *     dev: false\r\n   *   'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0':\r\n   *     dev: false\r\n   *     name: '@rush-temp/my-app'\r\n   *     version: 0.0.0\r\n   * ```\r\n   *\r\n   * We refer to 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0' as the temp project dependency key\r\n   * of the temp project '@rush-temp/my-app'.\r\n   */\r\n  public getTempProjectDependencyKey(tempProjectName: string): string | undefined {\r\n    const tempProjectDependencyKey: string | undefined = BaseShrinkwrapFile.tryGetValue(\r\n      this._shrinkwrapJson.dependencies,\r\n      tempProjectName\r\n    );\r\n\r\n    if (tempProjectDependencyKey) {\r\n      return tempProjectDependencyKey;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  public getShrinkwrapEntryFromTempProjectDependencyKey(\r\n    tempProjectDependencyKey: string\r\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    return this._shrinkwrapJson.packages[tempProjectDependencyKey];\r\n  }\r\n\r\n  public getShrinkwrapEntry(name: string, version: string): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    // Version can sometimes be in the form of a path that's already in the /name/version format.\r\n    const packageId: string = version.indexOf('/') !== -1 ? version : `/${name}/${version}`;\r\n    return this._shrinkwrapJson.packages[packageId];\r\n  }\r\n\r\n  /**\r\n   * Serializes the PNPM Shrinkwrap file\r\n   *\r\n   * @override\r\n   */\r\n  protected serialize(): string {\r\n    // Ensure that if any of the top-level properties are provided but empty are removed. We populate the object\r\n    // properties when we read the shrinkwrap but PNPM does not set these top-level properties unless they are present.\r\n    const shrinkwrapToSerialize: { [key: string]: unknown } = { ...this._shrinkwrapJson };\r\n    for (const [key, value] of Object.entries(shrinkwrapToSerialize)) {\r\n      if (typeof value === 'object' && Object.entries(value || {}).length === 0) {\r\n        delete shrinkwrapToSerialize[key];\r\n      }\r\n    }\r\n\r\n    return yamlModule.safeDump(shrinkwrapToSerialize, PNPM_SHRINKWRAP_YAML_FORMAT);\r\n  }\r\n\r\n  /**\r\n   * Gets the resolved version number of a dependency for a specific temp project.\r\n   * For PNPM, we can reuse the version that another project is using.\r\n   * Note that this function modifies the shrinkwrap data if tryReusingPackageVersionsFromShrinkwrap is set to true.\r\n   *\r\n   * @override\r\n   */\r\n  protected tryEnsureDependencyVersion(\r\n    dependencySpecifier: DependencySpecifier,\r\n    tempProjectName: string,\r\n    tryReusingPackageVersionsFromShrinkwrap: boolean\r\n  ): DependencySpecifier | undefined {\r\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\r\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\r\n    // or underneath the package we are looking at.\r\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\r\n    // to recreate the graph..\r\n    // Because of this, we actually need to check for a version that this package is directly\r\n    // linked to.\r\n\r\n    const packageName: string = dependencySpecifier.packageName;\r\n\r\n    const tempProjectDependencyKey: string | undefined = this.getTempProjectDependencyKey(tempProjectName);\r\n    if (!tempProjectDependencyKey) {\r\n      return undefined;\r\n    }\r\n\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined = this._getPackageDescription(\r\n      tempProjectDependencyKey\r\n    );\r\n    if (!packageDescription || !packageDescription.dependencies) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(packageName)) {\r\n      if (tryReusingPackageVersionsFromShrinkwrap && dependencySpecifier.versionSpecifier) {\r\n        // this means the current temp project doesn't provide this dependency,\r\n        // however, we may be able to use a different version. we prefer the latest version\r\n        let latestVersion: string | undefined = undefined;\r\n\r\n        for (const otherTempProject of this.getTempProjectNames()) {\r\n          const otherVersionSpecifier: DependencySpecifier | undefined = this._getDependencyVersion(\r\n            dependencySpecifier.packageName,\r\n            otherTempProject\r\n          );\r\n\r\n          if (otherVersionSpecifier) {\r\n            const otherVersion: string = otherVersionSpecifier.versionSpecifier;\r\n\r\n            if (semver.satisfies(otherVersion, dependencySpecifier.versionSpecifier)) {\r\n              if (!latestVersion || semver.gt(otherVersion, latestVersion)) {\r\n                latestVersion = otherVersion;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (latestVersion) {\r\n          // go ahead and fixup the shrinkwrap file to point at this\r\n          const dependencies: { [key: string]: string } | undefined =\r\n            this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies || {};\r\n          dependencies[packageName] = latestVersion;\r\n          this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies = dependencies;\r\n\r\n          return new DependencySpecifier(dependencySpecifier.packageName, latestVersion);\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    const dependencyKey: string = packageDescription.dependencies[packageName];\r\n    return this._parsePnpmDependencyKey(packageName, dependencyKey);\r\n  }\r\n\r\n  /** @override */\r\n  public getWorkspaceKeys(): ReadonlyArray<string> {\r\n    const result: string[] = [];\r\n    for (const key of Object.keys(this._shrinkwrapJson.importers)) {\r\n      // Avoid including the common workspace\r\n      if (key !== '.') {\r\n        result.push(key);\r\n      }\r\n    }\r\n    result.sort(); // make the result deterministic\r\n    return result;\r\n  }\r\n\r\n  /** @override */\r\n  public getWorkspaceKeyByPath(workspaceRoot: string, projectFolder: string): string {\r\n    return path.relative(workspaceRoot, projectFolder).replace(new RegExp(`\\\\${path.sep}`, 'g'), '/');\r\n  }\r\n\r\n  public getWorkspaceImporter(importerPath: string): IPnpmShrinkwrapImporterYaml | undefined {\r\n    return BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.importers, importerPath);\r\n  }\r\n\r\n  /**\r\n   * Gets the resolved version number of a dependency for a specific temp project.\r\n   * For PNPM, we can reuse the version that another project is using.\r\n   * Note that this function modifies the shrinkwrap data.\r\n   *\r\n   * @override\r\n   */\r\n  protected getWorkspaceDependencyVersion(\r\n    dependencySpecifier: DependencySpecifier,\r\n    workspaceKey: string\r\n  ): DependencySpecifier | undefined {\r\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\r\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\r\n    // or underneath the package we are looking at.\r\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\r\n    // to recreate the graph..\r\n    // Because of this, we actually need to check for a version that this package is directly\r\n    // linked to.\r\n\r\n    const packageName: string = dependencySpecifier.packageName;\r\n    const projectImporter: IPnpmShrinkwrapImporterYaml | undefined = this.getWorkspaceImporter(workspaceKey);\r\n    if (!projectImporter) {\r\n      return undefined;\r\n    }\r\n\r\n    const allDependencies: { [dependency: string]: string } = {\r\n      ...(projectImporter.optionalDependencies || {}),\r\n      ...(projectImporter.dependencies || {}),\r\n      ...(projectImporter.devDependencies || {})\r\n    };\r\n    if (!allDependencies.hasOwnProperty(packageName)) {\r\n      return undefined;\r\n    }\r\n\r\n    const dependencyKey: string = allDependencies[packageName];\r\n    return this._parsePnpmDependencyKey(packageName, dependencyKey);\r\n  }\r\n\r\n  /**\r\n   * Returns the version of a dependency being used by a given project\r\n   */\r\n  private _getDependencyVersion(\r\n    dependencyName: string,\r\n    tempProjectName: string\r\n  ): DependencySpecifier | undefined {\r\n    const tempProjectDependencyKey: string | undefined = this.getTempProjectDependencyKey(tempProjectName);\r\n    if (!tempProjectDependencyKey) {\r\n      throw new Error(`Cannot get dependency key for temp project: ${tempProjectName}`);\r\n    }\r\n\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined = this._getPackageDescription(\r\n      tempProjectDependencyKey\r\n    );\r\n    if (!packageDescription || !packageDescription.dependencies) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {\r\n      return undefined;\r\n    }\r\n\r\n    return this._parsePnpmDependencyKey(dependencyName, packageDescription.dependencies[dependencyName]);\r\n  }\r\n\r\n  /**\r\n   * Gets the package description for a tempProject from the shrinkwrap file.\r\n   */\r\n  private _getPackageDescription(\r\n    tempProjectDependencyKey: string\r\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined = BaseShrinkwrapFile.tryGetValue(\r\n      this._shrinkwrapJson.packages,\r\n      tempProjectDependencyKey\r\n    );\r\n\r\n    if (!packageDescription || !packageDescription.dependencies) {\r\n      return undefined;\r\n    }\r\n\r\n    return packageDescription;\r\n  }\r\n\r\n  private _parsePnpmDependencyKey(\r\n    dependencyName: string,\r\n    pnpmDependencyKey: string\r\n  ): DependencySpecifier | undefined {\r\n    if (pnpmDependencyKey) {\r\n      const result: DependencySpecifier | undefined = parsePnpmDependencyKey(\r\n        dependencyName,\r\n        pnpmDependencyKey\r\n      );\r\n\r\n      if (!result) {\r\n        throw new Error(\r\n          `Cannot parse PNPM shrinkwrap version specifier: \"${pnpmDependencyKey}\"` +\r\n            ` for \"${dependencyName}\"`\r\n        );\r\n      }\r\n\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"]}