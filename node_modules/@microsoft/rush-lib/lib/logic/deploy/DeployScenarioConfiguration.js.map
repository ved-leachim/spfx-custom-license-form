{"version":3,"file":"DeployScenarioConfiguration.js","sourceRoot":"","sources":["../../../src/logic/deploy/DeployScenarioConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as path from 'path';\r\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\n\r\n// Describes IDeployScenarioJson.projectSettings\r\nexport interface IDeployScenarioProjectJson {\r\n  projectName: string;\r\n  additionalProjectsToInclude?: string[];\r\n  additionalDependenciesToInclude?: string[];\r\n  dependenciesToExclude?: string[];\r\n}\r\n\r\n// The parsed JSON file structure, as defined by the \"deploy-scenario.schema.json\" JSON schema\r\nexport interface IDeployScenarioJson {\r\n  deploymentProjectNames: string[];\r\n  includeDevDependencies?: boolean;\r\n  includeNpmIgnoreFiles?: boolean;\r\n  omitPnpmWorkaroundLinks?: boolean;\r\n  linkCreation?: 'default' | 'script' | 'none';\r\n  folderToCopy?: string;\r\n  projectSettings?: IDeployScenarioProjectJson[];\r\n}\r\n\r\nexport class DeployScenarioConfiguration {\r\n  // Used by validateScenarioName()\r\n  // Matches lowercase words separated by dashes.\r\n  // Example: \"deploy-the-thing123\"\r\n  private static _scenarioNameRegExp: RegExp = /^[a-z0-9]+(-[a-z0-9]+)*$/;\r\n\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../../schemas/deploy-scenario.schema.json')\r\n  );\r\n\r\n  public readonly json: IDeployScenarioJson;\r\n\r\n  /**\r\n   * Used to lookup items in IDeployScenarioJson.projectSettings based on their IDeployScenarioProjectJson.projectName\r\n   */\r\n  public readonly projectJsonsByName: Map<string, IDeployScenarioProjectJson>;\r\n\r\n  private constructor(\r\n    json: IDeployScenarioJson,\r\n    projectJsonsByName: Map<string, IDeployScenarioProjectJson>\r\n  ) {\r\n    this.json = json;\r\n    this.projectJsonsByName = projectJsonsByName;\r\n  }\r\n\r\n  /**\r\n   * Validates that the input string conforms to the naming rules for a \"rush deploy\" scenario name.\r\n   */\r\n  public static validateScenarioName(scenarioName: string): void {\r\n    if (!scenarioName) {\r\n      throw new Error('The scenario name cannot be an empty string');\r\n    }\r\n    if (!this._scenarioNameRegExp.test(scenarioName)) {\r\n      throw new Error(\r\n        `\"${scenarioName}\" is not a valid scenario name. The name must be comprised of` +\r\n          ' lowercase letters and numbers, separated by single hyphens. Example: \"my-scenario\"'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given the --scenarioName value, return the full path of the filename.\r\n   *\r\n   * Example: \"ftp-site\" --> \"...common/config/rush/deploy-ftp-site.json\"\r\n   * Example: undefined --> \"...common/config/rush/deploy.json\"\r\n   */\r\n  public static getConfigFilePath(\r\n    scenarioName: string | undefined,\r\n    rushConfiguration: RushConfiguration\r\n  ): string {\r\n    let scenarioFileName: string;\r\n\r\n    if (scenarioName) {\r\n      DeployScenarioConfiguration.validateScenarioName(scenarioName);\r\n      scenarioFileName = `deploy-${scenarioName}.json`;\r\n    } else {\r\n      scenarioFileName = `deploy.json`;\r\n    }\r\n\r\n    return path.join(rushConfiguration.commonRushConfigFolder, scenarioFileName);\r\n  }\r\n\r\n  public static loadFromFile(\r\n    scenarioFilePath: string,\r\n    rushConfiguration: RushConfiguration\r\n  ): DeployScenarioConfiguration {\r\n    if (!FileSystem.exists(scenarioFilePath)) {\r\n      throw new Error('The scenario config file was not found: ' + scenarioFilePath);\r\n    }\r\n\r\n    console.log(colors.cyan('Loading deployment scenario: ') + scenarioFilePath);\r\n\r\n    const deployScenarioJson: IDeployScenarioJson = JsonFile.loadAndValidate(\r\n      scenarioFilePath,\r\n      DeployScenarioConfiguration._jsonSchema\r\n    );\r\n\r\n    // Apply the defaults\r\n    if (!deployScenarioJson.linkCreation) {\r\n      deployScenarioJson.linkCreation = 'default';\r\n    }\r\n\r\n    const deployScenarioProjectJsonsByName: Map<string, IDeployScenarioProjectJson> = new Map();\r\n\r\n    for (const projectSetting of deployScenarioJson.projectSettings || []) {\r\n      // Validate projectSetting.projectName\r\n      if (!rushConfiguration.getProjectByName(projectSetting.projectName)) {\r\n        throw new Error(\r\n          `The \"projectSettings\" section refers to the project name \"${projectSetting.projectName}\"` +\r\n            ` which was not found in rush.json`\r\n        );\r\n      }\r\n      for (const additionalProjectsToInclude of projectSetting.additionalProjectsToInclude || []) {\r\n        if (!rushConfiguration.getProjectByName(projectSetting.projectName)) {\r\n          throw new Error(\r\n            `The \"additionalProjectsToInclude\" setting refers to the` +\r\n              ` project name \"${additionalProjectsToInclude}\" which was not found in rush.json`\r\n          );\r\n        }\r\n      }\r\n      deployScenarioProjectJsonsByName.set(projectSetting.projectName, projectSetting);\r\n    }\r\n    return new DeployScenarioConfiguration(deployScenarioJson, deployScenarioProjectJsonsByName);\r\n  }\r\n}\r\n"]}