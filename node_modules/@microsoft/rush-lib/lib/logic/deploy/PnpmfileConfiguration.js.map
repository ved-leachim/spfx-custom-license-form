{"version":3,"file":"PnpmfileConfiguration.js","sourceRoot":"","sources":["../../../src/logic/deploy/PnpmfileConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAwE;AAyBxE;;GAEG;AACH,MAAa,qBAAqB;IAIhC,YAAmB,iBAAoC;QAH/C,qBAAgB,GAAgC,SAAS,CAAC;QAIhE,IAAI,CAAC,QAAQ,GAAG;YACd,GAAG,EAAE,CAAC,OAAe,EAAE,EAAE,GAAE,CAAC;SAC7B,CAAC;QAEF,kGAAkG;QAClG,sCAAsC;QACtC,IACE,iBAAiB,CAAC,cAAc,KAAK,MAAM;YAC3C,CAAC,CAAC,iBAAiB,CAAC,WAAW,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,aAAa,CAAC,EAChF;YACA,MAAM,YAAY,GAAW,iBAAiB,CAAC,eAAe,EAAE,CAAC;YACjE,IAAI,8BAAU,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;gBACnC,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,CAAC;gBACxF,8DAA8D;gBAC9D,MAAM,cAAc,GAAoB,OAAO,CAAC,YAAY,CAAC,CAAC;gBAC9D,IAAI,cAAc,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE;oBAC5D,IAAI,CAAC,gBAAgB,GAAG,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC;iBAC1D;aACF;SACF;IACH,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,WAAyB;QACxC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,OAAO,WAAW,CAAC;SACpB;aAAM;YACL,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1D;IACH,CAAC;CACF;AAtCD,sDAsCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem, IPackageJson } from '@rushstack/node-core-library';\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\n\r\n/**\r\n * The `context` parameter passed to {@link IPnpmFileModule.hooks.readPackage}, as defined by the\r\n * pnpmfile.js API contract.\r\n */\r\ninterface IPnpmFileModuleContext {\r\n  log: (message: string) => void;\r\n}\r\n\r\n/**\r\n * The callback signature for {@link IPnpmFileModule.hooks.readPackage}\r\n */\r\ntype ReadPackageHook = (packageJson: IPackageJson, context: IPnpmFileModuleContext) => IPackageJson;\r\n\r\n/**\r\n * Describes the module contract for the pnpmfile.js config file, when it is loaded using Node.js require().\r\n */\r\ninterface IPnpmFileModule {\r\n  hooks?: {\r\n    readPackage?: ReadPackageHook;\r\n  };\r\n}\r\n\r\n/**\r\n * Loads PNPM's pnpmfile.js configuration, and invokes it to preprocess package.json files.\r\n */\r\nexport class PnpmfileConfiguration {\r\n  private _readPackageHook: ReadPackageHook | undefined = undefined;\r\n  private _context: IPnpmFileModuleContext;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._context = {\r\n      log: (message: string) => {}\r\n    };\r\n\r\n    // Avoid setting the hook when not using pnpm or when using pnpm workspaces, since workspaces mode\r\n    // already transforms the package.json\r\n    if (\r\n      rushConfiguration.packageManager === 'pnpm' &&\r\n      (!rushConfiguration.pnpmOptions || !rushConfiguration.pnpmOptions.useWorkspaces)\r\n    ) {\r\n      const pnpmFilePath: string = rushConfiguration.getPnpmfilePath();\r\n      if (FileSystem.exists(pnpmFilePath)) {\r\n        console.log('Loading ' + path.relative(rushConfiguration.rushJsonFolder, pnpmFilePath));\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        const pnpmFileModule: IPnpmFileModule = require(pnpmFilePath);\r\n        if (pnpmFileModule.hooks && pnpmFileModule.hooks.readPackage) {\r\n          this._readPackageHook = pnpmFileModule.hooks.readPackage;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform a package.json file using the pnpmfile.js hook.\r\n   * @returns the tranformed object, or the original input if pnpmfile.js was not found.\r\n   */\r\n  public transform(packageJson: IPackageJson): IPackageJson {\r\n    if (!this._readPackageHook) {\r\n      return packageJson;\r\n    } else {\r\n      return this._readPackageHook(packageJson, this._context);\r\n    }\r\n  }\r\n}\r\n"]}