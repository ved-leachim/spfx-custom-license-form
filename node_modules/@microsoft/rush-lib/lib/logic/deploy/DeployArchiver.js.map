{"version":3,"file":"DeployArchiver.js","sourceRoot":"","sources":["../../../src/logic/deploy/DeployArchiver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport JSZip = require('jszip');\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem, FileSystemStats, Path } from '@rushstack/node-core-library';\r\n\r\nimport { IDeployState } from './DeployManager';\r\n\r\nexport class DeployArchiver {\r\n  public static async createArchiveAsync(deployState: IDeployState): Promise<void> {\r\n    if (deployState.createArchiveFilePath !== undefined) {\r\n      console.log('Creating archive...');\r\n      const zip: JSZip = this._getZipOfFolder(deployState.targetRootFolder);\r\n      const zipContent: Buffer = await zip.generateAsync({\r\n        type: 'nodebuffer',\r\n        platform: 'UNIX'\r\n      });\r\n\r\n      FileSystem.writeFile(\r\n        path.resolve(deployState.targetRootFolder, deployState.createArchiveFilePath),\r\n        zipContent\r\n      );\r\n\r\n      console.log('Archive created successfully.');\r\n    }\r\n  }\r\n\r\n  private static _getFilePathsRecursively(dir: string): string[] {\r\n    // returns a flat array of absolute paths of all files recursively contained in the dir\r\n    let results: string[] = [];\r\n    const list: string[] = FileSystem.readFolder(dir);\r\n\r\n    if (!list.length) return results;\r\n\r\n    for (let file of list) {\r\n      file = path.resolve(dir, file);\r\n\r\n      const stat: FileSystemStats = FileSystem.getLinkStatistics(file);\r\n\r\n      if (stat && stat.isDirectory()) {\r\n        results = results.concat(this._getFilePathsRecursively(file));\r\n      } else {\r\n        results.push(file);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  private static _getZipOfFolder(dir: string): JSZip {\r\n    // returns a JSZip instance filled with contents of dir.\r\n    const allPaths: string[] = this._getFilePathsRecursively(dir);\r\n\r\n    // This value sets the allowed permissions when preserving symbolic links.\r\n    // 120000 is the symbolic link identifier, and 0755 designates the allowed permissions.\r\n    // See: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/stat.h#n10\r\n    const permissionsValue: number = 0o120755;\r\n\r\n    const zip: JSZip = new JSZip();\r\n    for (const filePath of allPaths) {\r\n      // Get the relative path and replace backslashes for Unix compat\r\n      const addPath: string = Path.convertToSlashes(path.relative(dir, filePath));\r\n      const stat: FileSystemStats = FileSystem.getLinkStatistics(filePath);\r\n      const permissions: number = stat.mode;\r\n\r\n      if (stat.isSymbolicLink()) {\r\n        zip.file(addPath, FileSystem.readLink(filePath), {\r\n          unixPermissions: permissionsValue,\r\n          dir: stat.isDirectory()\r\n        });\r\n      } else {\r\n        const data: Buffer = FileSystem.readFileToBuffer(filePath);\r\n        zip.file(addPath, data, {\r\n          unixPermissions: permissions,\r\n          dir: stat.isDirectory()\r\n        });\r\n      }\r\n    }\r\n\r\n    return zip;\r\n  }\r\n}\r\n"]}