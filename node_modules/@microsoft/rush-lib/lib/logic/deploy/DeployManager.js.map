{"version":3,"file":"DeployManager.js","sourceRoot":"","sources":["../../../src/logic/deploy/DeployManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as path from 'path';\r\nimport * as resolve from 'resolve';\r\nimport * as npmPacklist from 'npm-packlist';\r\nimport pnpmLinkBins from '@pnpm/link-bins';\r\n\r\n// (Used only by the legacy code fragment in the resolve.sync() hook below)\r\nimport * as fsForResolve from 'fs';\r\n\r\nimport ignore, { Ignore } from 'ignore';\r\nimport {\r\n  Path,\r\n  FileSystem,\r\n  PackageJsonLookup,\r\n  FileSystemStats,\r\n  Sort,\r\n  JsonFile,\r\n  IPackageJson,\r\n  AlreadyExistsBehavior,\r\n  InternalError,\r\n  NewlineKind,\r\n  Text\r\n} from '@rushstack/node-core-library';\r\nimport { DeployArchiver } from './DeployArchiver';\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { SymlinkAnalyzer, ILinkInfo } from './SymlinkAnalyzer';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { DeployScenarioConfiguration, IDeployScenarioProjectJson } from './DeployScenarioConfiguration';\r\nimport { PnpmfileConfiguration } from './PnpmfileConfiguration';\r\nimport { matchesWithStar } from './Utils';\r\n\r\n// (@types/npm-packlist is missing this API)\r\ndeclare module 'npm-packlist' {\r\n  export class WalkerSync {\r\n    public readonly result: string[];\r\n    public constructor(opts: { path: string });\r\n    public start(): void;\r\n  }\r\n}\r\n\r\n/**\r\n * The deploy-matadata.json file format.\r\n */\r\nexport interface IDeployMetadataJson {\r\n  scenarioName: string;\r\n  mainProjectName: string;\r\n  projects: IProjectInfoJson[];\r\n  links: ILinkInfo[];\r\n}\r\n\r\n/**\r\n * Part of the deploy-matadata.json file format. Represents a Rush project to be deployed.\r\n */\r\ninterface IProjectInfoJson {\r\n  /**\r\n   * This path is relative to the deploy folder.\r\n   */\r\n  path: string;\r\n}\r\n\r\n/**\r\n * Stores additional information about folders being copied.\r\n * Only some of the IDeployState.foldersToCopy items will an IFolderInfo object.\r\n */\r\ninterface IFolderInfo {\r\n  /**\r\n   * This is the lookup key for IDeployState.folderInfosByPath.\r\n   * It is an absolute real path.\r\n   */\r\n  folderPath: string;\r\n  /**\r\n   * True if this is the package folder for a local Rush project.\r\n   */\r\n  isRushProject: boolean;\r\n\r\n  projectSettings?: IDeployScenarioProjectJson;\r\n}\r\n\r\n/**\r\n * This object tracks DeployManager state during a deployment.\r\n */\r\nexport interface IDeployState {\r\n  scenarioFilePath: string;\r\n\r\n  /**\r\n   * The parsed scenario config file, as defined by the \"deploy-scenario.schema.json\" JSON schema\r\n   */\r\n  scenarioConfiguration: DeployScenarioConfiguration;\r\n\r\n  mainProjectName: string;\r\n\r\n  /**\r\n   * The source folder that copying originates from.  Generally it is the repo root folder with rush.json.\r\n   */\r\n  sourceRootFolder: string;\r\n\r\n  /**\r\n   * The target folder for the deployment.  By default it will be \"common/deploy\".\r\n   */\r\n  targetRootFolder: string;\r\n\r\n  /**\r\n   * During the analysis stage, _collectFoldersRecursive() uses this set to collect the absolute paths\r\n   * of the package folders to be copied.  The copying is performed later by _deployFolder().\r\n   */\r\n  foldersToCopy: Set<string>;\r\n\r\n  /**\r\n   * Additional information about some of the foldersToCopy paths.\r\n   * The key is the absolute real path from foldersToCopy.\r\n   */\r\n  folderInfosByPath: Map<string, IFolderInfo>;\r\n\r\n  symlinkAnalyzer: SymlinkAnalyzer;\r\n\r\n  pnpmfileConfiguration: PnpmfileConfiguration;\r\n\r\n  /**\r\n   * The desired path to be used when archiving the target folder. Supported file extensions: .zip.\r\n   */\r\n  createArchiveFilePath: string | undefined;\r\n}\r\n\r\n/**\r\n * Manages the business logic for the \"rush deploy\" command.\r\n */\r\nexport class DeployManager {\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n  private readonly _packageJsonLookup: PackageJsonLookup;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._packageJsonLookup = new PackageJsonLookup();\r\n  }\r\n\r\n  /**\r\n   * Recursively crawl the node_modules dependencies and collect the result in IDeployState.foldersToCopy.\r\n   */\r\n  private _collectFoldersRecursive(packageJsonFolderPath: string, deployState: IDeployState): void {\r\n    const packageJsonRealFolderPath: string = FileSystem.getRealPath(packageJsonFolderPath);\r\n\r\n    if (deployState.foldersToCopy.has(packageJsonRealFolderPath)) {\r\n      // we've already seen this folder\r\n      return;\r\n    }\r\n\r\n    deployState.foldersToCopy.add(packageJsonRealFolderPath);\r\n\r\n    const originalPackageJson: IPackageJson = JsonFile.load(\r\n      path.join(packageJsonRealFolderPath, 'package.json')\r\n    );\r\n\r\n    const sourceFolderInfo: IFolderInfo | undefined = deployState.folderInfosByPath.get(\r\n      FileSystem.getRealPath(packageJsonFolderPath)\r\n    );\r\n\r\n    // Transform packageJson using pnpmfile.js\r\n    const packageJson: IPackageJson = deployState.pnpmfileConfiguration.transform(originalPackageJson);\r\n\r\n    // Union of keys from regular dependencies, peerDependencies, optionalDependencies\r\n    // (and possibly devDependencies if includeDevDependencies=true)\r\n    const dependencyNamesToProcess: Set<string> = new Set<string>();\r\n\r\n    // Just the keys from optionalDependencies and peerDependencies\r\n    const optionalDependencyNames: Set<string> = new Set<string>();\r\n\r\n    for (const name of Object.keys(packageJson.dependencies || {})) {\r\n      dependencyNamesToProcess.add(name);\r\n    }\r\n    if (deployState.scenarioConfiguration.json.includeDevDependencies) {\r\n      for (const name of Object.keys(packageJson.devDependencies || {})) {\r\n        dependencyNamesToProcess.add(name);\r\n      }\r\n    }\r\n    for (const name of Object.keys(packageJson.peerDependencies || {})) {\r\n      dependencyNamesToProcess.add(name);\r\n      optionalDependencyNames.add(name); // consider peers optional, since they are so frequently broken\r\n    }\r\n    for (const name of Object.keys(packageJson.optionalDependencies || {})) {\r\n      dependencyNamesToProcess.add(name);\r\n      optionalDependencyNames.add(name);\r\n    }\r\n\r\n    if (sourceFolderInfo && sourceFolderInfo.isRushProject) {\r\n      const projectSettings: IDeployScenarioProjectJson | undefined = sourceFolderInfo.projectSettings;\r\n      if (projectSettings) {\r\n        this._applyDependencyFilters(\r\n          dependencyNamesToProcess,\r\n          projectSettings.additionalDependenciesToInclude,\r\n          projectSettings.dependenciesToExclude\r\n        );\r\n      }\r\n    }\r\n\r\n    for (const dependencyPackageName of dependencyNamesToProcess) {\r\n      try {\r\n        this._traceResolveDependency(dependencyPackageName, packageJsonRealFolderPath, deployState);\r\n      } catch (resolveErr) {\r\n        if (resolveErr.code === 'MODULE_NOT_FOUND' && optionalDependencyNames.has(dependencyPackageName)) {\r\n          // Ignore missing optional dependency\r\n          continue;\r\n        }\r\n        throw resolveErr;\r\n      }\r\n    }\r\n\r\n    if (\r\n      this._rushConfiguration.packageManager === 'pnpm' &&\r\n      !deployState.scenarioConfiguration.json.omitPnpmWorkaroundLinks\r\n    ) {\r\n      // Replicate the PNPM workaround links.\r\n\r\n      // Only apply this logic for packages that were actually installed under the common/temp folder.\r\n      if (Path.isUnder(packageJsonFolderPath, this._rushConfiguration.commonTempFolder)) {\r\n        try {\r\n          // The PNPM workaround links are created in this folder.  We will resolve the current package\r\n          // from that location and collect any additional links encountered along the way.\r\n          const pnpmDotFolderPath: string = path.join(\r\n            this._rushConfiguration.commonTempFolder,\r\n            'node_modules',\r\n            '.pnpm'\r\n          );\r\n\r\n          // TODO: Investigate how package aliases are handled by PNPM in this case.  For example:\r\n          //\r\n          // \"dependencies\": {\r\n          //   \"alias-name\": \"npm:real-name@^1.2.3\"\r\n          // }\r\n          this._traceResolveDependency(packageJson.name, pnpmDotFolderPath, deployState);\r\n        } catch (resolveErr) {\r\n          if (resolveErr.code === 'MODULE_NOT_FOUND') {\r\n            // The workaround link isn't guaranteed to exist, so ignore if it's missing\r\n            // NOTE: If you encounter this warning a lot, please report it to the Rush maintainers.\r\n            console.log('Ignoring missing PNPM workaround link for ' + packageJsonFolderPath);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _applyDependencyFilters(\r\n    allDependencyNames: Set<string>,\r\n    additionalDependenciesToInclude: string[] = [],\r\n    dependenciesToExclude: string[] = []\r\n  ): Set<string> {\r\n    // Track packages that got added/removed for reporting purposes\r\n    const extraIncludedPackageNames: string[] = [];\r\n    const extraExcludedPackageNames: string[] = [];\r\n\r\n    for (const patternWithStar of dependenciesToExclude) {\r\n      for (const dependency of allDependencyNames) {\r\n        if (matchesWithStar(patternWithStar, dependency)) {\r\n          if (allDependencyNames.delete(dependency)) {\r\n            extraExcludedPackageNames.push(dependency);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const dependencyToInclude of additionalDependenciesToInclude) {\r\n      if (!allDependencyNames.has(dependencyToInclude)) {\r\n        allDependencyNames.add(dependencyToInclude);\r\n        extraIncludedPackageNames.push(dependencyToInclude);\r\n      }\r\n    }\r\n\r\n    if (extraIncludedPackageNames.length > 0) {\r\n      extraIncludedPackageNames.sort();\r\n      console.log('Extra dependencies included by settings: ' + extraIncludedPackageNames.join(', '));\r\n    }\r\n\r\n    if (extraExcludedPackageNames.length > 0) {\r\n      extraExcludedPackageNames.sort();\r\n      console.log('Extra dependencies excluded by settings: ' + extraExcludedPackageNames.join(', '));\r\n    }\r\n\r\n    return allDependencyNames;\r\n  }\r\n\r\n  private _traceResolveDependency(\r\n    packageName: string,\r\n    startingFolder: string,\r\n    deployState: IDeployState\r\n  ): void {\r\n    // The \"resolve\" library models the Node.js require() API, which gives precedence to \"core\" system modules\r\n    // over an NPM package with the same name.  But we are traversing package.json dependencies, which never\r\n    // refer to system modules.  Appending a \"/\" forces require() to look for the NPM package.\r\n    const resolveSuffix: string = packageName + resolve.isCore(packageName) ? '/' : '';\r\n\r\n    const resolvedDependency: string = resolve.sync(packageName + resolveSuffix, {\r\n      basedir: startingFolder,\r\n      preserveSymlinks: false,\r\n      packageFilter: (pkg, dir) => {\r\n        // point \"main\" at a file that is guaranteed to exist\r\n        // This helps resolve packages such as @types/node that have no entry point\r\n        pkg.main = './package.json';\r\n        return pkg;\r\n      },\r\n      realpathSync: (filePath) => {\r\n        // This code fragment is a modification of the documented default implementation from the \"fs-extra\" docs\r\n        try {\r\n          const resolvedPath: string = fsForResolve.realpathSync(filePath);\r\n\r\n          deployState.symlinkAnalyzer.analyzePath(filePath);\r\n          return resolvedPath;\r\n        } catch (realpathErr) {\r\n          if (realpathErr.code !== 'ENOENT') {\r\n            throw realpathErr;\r\n          }\r\n        }\r\n        return filePath;\r\n      }\r\n    });\r\n\r\n    if (!resolvedDependency) {\r\n      // This should not happen, since the resolve.sync() docs say it will throw an exception instead\r\n      throw new InternalError(`Error resolving ${packageName} from ${startingFolder}`);\r\n    }\r\n\r\n    const dependencyPackageFolderPath: string | undefined = this._packageJsonLookup.tryGetPackageFolderFor(\r\n      resolvedDependency\r\n    );\r\n\r\n    if (!dependencyPackageFolderPath) {\r\n      throw new Error(`Error finding package.json folder for ${resolvedDependency}`);\r\n    }\r\n\r\n    this._collectFoldersRecursive(dependencyPackageFolderPath, deployState);\r\n  }\r\n\r\n  /**\r\n   * Maps a file path from IDeployState.sourceRootFolder --> IDeployState.targetRootFolder\r\n   *\r\n   * Example input: \"C:\\MyRepo\\libraries\\my-lib\"\r\n   * Example output: \"C:\\MyRepo\\common\\deploy\\libraries\\my-lib\"\r\n   */\r\n  private _remapPathForDeployFolder(absolutePathInSourceFolder: string, deployState: IDeployState): string {\r\n    if (!Path.isUnderOrEqual(absolutePathInSourceFolder, deployState.sourceRootFolder)) {\r\n      throw new Error(\r\n        `Source path is not under ${deployState.sourceRootFolder}\\n${absolutePathInSourceFolder}`\r\n      );\r\n    }\r\n    const relativePath: string = path.relative(deployState.sourceRootFolder, absolutePathInSourceFolder);\r\n    const absolutePathInTargetFolder: string = path.join(deployState.targetRootFolder, relativePath);\r\n    return absolutePathInTargetFolder;\r\n  }\r\n\r\n  /**\r\n   * Maps a file path from IDeployState.sourceRootFolder --> relative path\r\n   *\r\n   * Example input: \"C:\\MyRepo\\libraries\\my-lib\"\r\n   * Example output: \"libraries/my-lib\"\r\n   */\r\n  private _remapPathForDeployMetadata(absolutePathInSourceFolder: string, deployState: IDeployState): string {\r\n    if (!Path.isUnderOrEqual(absolutePathInSourceFolder, deployState.sourceRootFolder)) {\r\n      throw new Error(\r\n        `Source path is not under ${deployState.sourceRootFolder}\\n${absolutePathInSourceFolder}`\r\n      );\r\n    }\r\n    const relativePath: string = path.relative(deployState.sourceRootFolder, absolutePathInSourceFolder);\r\n    return Text.replaceAll(relativePath, '\\\\', '/');\r\n  }\r\n\r\n  /**\r\n   * Copy one package folder to the deployment target folder.\r\n   */\r\n  private _deployFolder(sourceFolderPath: string, deployState: IDeployState): void {\r\n    let useNpmIgnoreFilter: boolean = false;\r\n\r\n    if (!deployState.scenarioConfiguration.json.includeNpmIgnoreFiles) {\r\n      const sourceFolderInfo: IFolderInfo | undefined = deployState.folderInfosByPath.get(\r\n        FileSystem.getRealPath(sourceFolderPath)\r\n      );\r\n      if (sourceFolderInfo) {\r\n        if (sourceFolderInfo.isRushProject) {\r\n          useNpmIgnoreFilter = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    const targetFolderPath: string = this._remapPathForDeployFolder(sourceFolderPath, deployState);\r\n\r\n    if (useNpmIgnoreFilter) {\r\n      // Use npm-packlist to filter the files.  Using the WalkerSync class (instead of the sync() API) ensures\r\n      // that \"bundledDependencies\" are not included.\r\n      const walker: npmPacklist.WalkerSync = new npmPacklist.WalkerSync({\r\n        path: sourceFolderPath\r\n      });\r\n      walker.start();\r\n      const npmPackFiles: string[] = walker.result;\r\n\r\n      const alreadyCopiedSourcePaths: Set<string> = new Set();\r\n\r\n      for (const npmPackFile of npmPackFiles) {\r\n        // In issue https://github.com/microsoft/rushstack/issues/2121 we found that npm-packlist sometimes returns\r\n        // duplicate file paths, for example:\r\n        //\r\n        //   'dist//index.js'\r\n        //   'dist/index.js'\r\n        //\r\n        // We can detect the duplicates by comparing the path.resolve() result.\r\n        const copySourcePath: string = path.resolve(sourceFolderPath, npmPackFile);\r\n        if (alreadyCopiedSourcePaths.has(copySourcePath)) {\r\n          continue;\r\n        }\r\n        alreadyCopiedSourcePaths.add(copySourcePath);\r\n\r\n        const copyDestinationPath: string = path.join(targetFolderPath, npmPackFile);\r\n\r\n        if (deployState.symlinkAnalyzer.analyzePath(copySourcePath).kind !== 'link') {\r\n          FileSystem.ensureFolder(path.dirname(copyDestinationPath));\r\n\r\n          FileSystem.copyFile({\r\n            sourcePath: copySourcePath,\r\n            destinationPath: copyDestinationPath,\r\n            alreadyExistsBehavior: AlreadyExistsBehavior.Error\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      // use a simplistic \"ignore\" ruleset to filter the files\r\n      const ignoreFilter: Ignore = ignore();\r\n      ignoreFilter.add([\r\n        // The top-level node_modules folder is always excluded\r\n        '/node_modules',\r\n        // Also exclude well-known folders that can contribute a lot of unnecessary files\r\n        '**/.git',\r\n        '**/.svn',\r\n        '**/.hg',\r\n        '**/.DS_Store'\r\n      ]);\r\n\r\n      FileSystem.copyFiles({\r\n        sourcePath: sourceFolderPath,\r\n        destinationPath: targetFolderPath,\r\n        alreadyExistsBehavior: AlreadyExistsBehavior.Error,\r\n        filter: (src: string, dest: string) => {\r\n          const relativeSrc: string = path.relative(sourceFolderPath, src);\r\n          if (!relativeSrc) {\r\n            return true; // don't filter sourceFolderPath itself\r\n          }\r\n\r\n          if (ignoreFilter.ignores(relativeSrc)) {\r\n            return false;\r\n          }\r\n\r\n          const stats: FileSystemStats = FileSystem.getLinkStatistics(src);\r\n          if (stats.isSymbolicLink()) {\r\n            deployState.symlinkAnalyzer.analyzePath(src);\r\n            return false;\r\n          } else {\r\n            return true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a symlink as described by the ILinkInfo object.\r\n   */\r\n  private _deploySymlink(originalLinkInfo: ILinkInfo, deployState: IDeployState): boolean {\r\n    const linkInfo: ILinkInfo = {\r\n      kind: originalLinkInfo.kind,\r\n      linkPath: this._remapPathForDeployFolder(originalLinkInfo.linkPath, deployState),\r\n      targetPath: this._remapPathForDeployFolder(originalLinkInfo.targetPath, deployState)\r\n    };\r\n\r\n    // Has the link target been created yet?  If not, we should try again later\r\n    if (!FileSystem.exists(linkInfo.targetPath)) {\r\n      return false;\r\n    }\r\n\r\n    const newLinkFolder: string = path.dirname(linkInfo.linkPath);\r\n    FileSystem.ensureFolder(newLinkFolder);\r\n\r\n    // Link to the relative path for symlinks\r\n    const relativeTargetPath: string = path.relative(newLinkFolder, linkInfo.targetPath);\r\n\r\n    // NOTE: This logic is based on NpmLinkManager._createSymlink()\r\n    if (process.platform === 'win32') {\r\n      if (linkInfo.kind === 'folderLink') {\r\n        // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\r\n        FileSystem.createSymbolicLinkJunction({\r\n          linkTargetPath: relativeTargetPath,\r\n          newLinkPath: linkInfo.linkPath\r\n        });\r\n      } else {\r\n        // For files, we use a Windows \"hard link\", because creating a symbolic link requires\r\n        // administrator permission.\r\n\r\n        // NOTE: We cannot use the relative path for hard links\r\n        FileSystem.createHardLink({\r\n          linkTargetPath: relativeTargetPath,\r\n          newLinkPath: linkInfo.linkPath\r\n        });\r\n      }\r\n    } else {\r\n      // However hard links seem to cause build failures on Mac, so for all other operating systems\r\n      // we use symbolic links for this case.\r\n      if (linkInfo.kind === 'folderLink') {\r\n        FileSystem.createSymbolicLinkFolder({\r\n          linkTargetPath: relativeTargetPath,\r\n          newLinkPath: linkInfo.linkPath\r\n        });\r\n      } else {\r\n        FileSystem.createSymbolicLinkFile({\r\n          linkTargetPath: relativeTargetPath,\r\n          newLinkPath: linkInfo.linkPath\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Recursively apply the \"additionalProjectToInclude\" setting.\r\n   */\r\n  private _collectAdditionalProjectsToInclude(\r\n    includedProjectNamesSet: Set<string>,\r\n    projectName: string,\r\n    deployState: IDeployState\r\n  ): void {\r\n    if (includedProjectNamesSet.has(projectName)) {\r\n      return;\r\n    }\r\n    includedProjectNamesSet.add(projectName);\r\n\r\n    const projectSettings:\r\n      | IDeployScenarioProjectJson\r\n      | undefined = deployState.scenarioConfiguration.projectJsonsByName.get(projectName);\r\n    if (projectSettings && projectSettings.additionalProjectsToInclude) {\r\n      for (const additionalProjectToInclude of projectSettings.additionalProjectsToInclude) {\r\n        this._collectAdditionalProjectsToInclude(\r\n          includedProjectNamesSet,\r\n          additionalProjectToInclude,\r\n          deployState\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write the common/deploy/deploy-metadata.json file.\r\n   */\r\n  private _writeDeployMetadata(deployState: IDeployState): void {\r\n    const deployMetadataFilePath: string = path.join(deployState.targetRootFolder, 'deploy-metadata.json');\r\n\r\n    const deployMetadataJson: IDeployMetadataJson = {\r\n      scenarioName: path.basename(deployState.scenarioFilePath),\r\n      mainProjectName: deployState.mainProjectName,\r\n      projects: [],\r\n      links: []\r\n    };\r\n\r\n    deployState.folderInfosByPath.forEach((folderInfo) => {\r\n      if (!folderInfo.isRushProject) {\r\n        // It's not a Rush project\r\n        return;\r\n      }\r\n\r\n      if (!deployState.foldersToCopy.has(folderInfo.folderPath)) {\r\n        // It's not something we crawled\r\n        return;\r\n      }\r\n\r\n      deployMetadataJson.projects.push({\r\n        path: this._remapPathForDeployMetadata(folderInfo.folderPath, deployState)\r\n      });\r\n    });\r\n\r\n    // Remap the links to be relative to target folder\r\n    for (const absoluteLinkInfo of deployState.symlinkAnalyzer.reportSymlinks()) {\r\n      const relativeInfo: ILinkInfo = {\r\n        kind: absoluteLinkInfo.kind,\r\n        linkPath: this._remapPathForDeployMetadata(absoluteLinkInfo.linkPath, deployState),\r\n        targetPath: this._remapPathForDeployMetadata(absoluteLinkInfo.targetPath, deployState)\r\n      };\r\n      deployMetadataJson.links.push(relativeInfo);\r\n    }\r\n\r\n    JsonFile.save(deployMetadataJson, deployMetadataFilePath, {\r\n      newlineConversion: NewlineKind.OsDefault\r\n    });\r\n  }\r\n\r\n  private async _makeBinLinksAsync(deployState: IDeployState): Promise<void> {\r\n    for (const [, folderInfo] of deployState.folderInfosByPath) {\r\n      if (!folderInfo.isRushProject) {\r\n        return;\r\n      }\r\n\r\n      const deployedPath: string = this._remapPathForDeployMetadata(folderInfo.folderPath, deployState);\r\n      const projectFolder: string = path.join(deployState.targetRootFolder, deployedPath, 'node_modules');\r\n      const projectBinFolder: string = path.join(\r\n        deployState.targetRootFolder,\r\n        deployedPath,\r\n        'node_modules',\r\n        '.bin'\r\n      );\r\n\r\n      await pnpmLinkBins(projectFolder, projectBinFolder, {\r\n        warn: (msg: string) => console.warn(colors.yellow(msg))\r\n      });\r\n    }\r\n  }\r\n\r\n  private async _prepareDeploymentAsync(deployState: IDeployState): Promise<void> {\r\n    // Calculate the set with additionalProjectsToInclude\r\n    const includedProjectNamesSet: Set<string> = new Set();\r\n    this._collectAdditionalProjectsToInclude(\r\n      includedProjectNamesSet,\r\n      deployState.mainProjectName,\r\n      deployState\r\n    );\r\n\r\n    for (const rushProject of this._rushConfiguration.projects) {\r\n      const projectFolder: string = FileSystem.getRealPath(rushProject.projectFolder);\r\n      const projectSettings:\r\n        | IDeployScenarioProjectJson\r\n        | undefined = deployState.scenarioConfiguration.projectJsonsByName.get(rushProject.packageName);\r\n\r\n      deployState.folderInfosByPath.set(projectFolder, {\r\n        folderPath: projectFolder,\r\n        isRushProject: true,\r\n        projectSettings\r\n      });\r\n    }\r\n\r\n    for (const projectName of includedProjectNamesSet) {\r\n      console.log(colors.cyan('Analyzing project: ') + projectName);\r\n      const project: RushConfigurationProject | undefined = this._rushConfiguration.getProjectByName(\r\n        projectName\r\n      );\r\n\r\n      if (!project) {\r\n        throw new Error(`The project ${projectName} is not defined in rush.json`);\r\n      }\r\n\r\n      this._collectFoldersRecursive(project.projectFolder, deployState);\r\n\r\n      console.log();\r\n    }\r\n\r\n    Sort.sortSet(deployState.foldersToCopy);\r\n\r\n    console.log('Copying folders...');\r\n    for (const folderToCopy of deployState.foldersToCopy) {\r\n      this._deployFolder(folderToCopy, deployState);\r\n    }\r\n\r\n    console.log('Writing deploy-metadata.json');\r\n    this._writeDeployMetadata(deployState);\r\n\r\n    if (deployState.scenarioConfiguration.json.linkCreation === 'script') {\r\n      console.log('Copying create-links.js');\r\n      FileSystem.copyFile({\r\n        sourcePath: path.join(__dirname, '../../scripts/create-links.js'),\r\n        destinationPath: path.join(deployState.targetRootFolder, 'create-links.js'),\r\n        alreadyExistsBehavior: AlreadyExistsBehavior.Error\r\n      });\r\n    }\r\n\r\n    if (deployState.scenarioConfiguration.json.linkCreation === 'default') {\r\n      console.log('Creating symlinks...');\r\n      const linksToCopy: ILinkInfo[] = deployState.symlinkAnalyzer.reportSymlinks();\r\n\r\n      for (const linkToCopy of linksToCopy) {\r\n        if (!this._deploySymlink(linkToCopy, deployState)) {\r\n          // TODO: If a symbolic link points to another symbolic link, then we should order the operations\r\n          // so that the intermediary target is created first.  This case was procrastinated because it does\r\n          // not seem to occur in practice.  If you encounter this, please report it.\r\n          throw new InternalError('Target does not exist: ' + JSON.stringify(linkToCopy, undefined, 2));\r\n        }\r\n      }\r\n\r\n      await this._makeBinLinksAsync(deployState);\r\n    }\r\n    if (deployState.scenarioConfiguration.json.folderToCopy !== undefined) {\r\n      const sourceFolderPath: string = path.resolve(\r\n        this._rushConfiguration.rushJsonFolder,\r\n        deployState.scenarioConfiguration.json.folderToCopy\r\n      );\r\n      FileSystem.copyFiles({\r\n        sourcePath: sourceFolderPath,\r\n        destinationPath: deployState.targetRootFolder,\r\n        alreadyExistsBehavior: AlreadyExistsBehavior.Error\r\n      });\r\n    }\r\n    await DeployArchiver.createArchiveAsync(deployState);\r\n  }\r\n\r\n  /**\r\n   * The main entry point for performing a deployment.\r\n   */\r\n  public async deployAsync(\r\n    mainProjectName: string | undefined,\r\n    scenarioName: string | undefined,\r\n    overwriteExisting: boolean,\r\n    targetFolderParameter: string | undefined,\r\n    createArchiveFilePath: string | undefined\r\n  ): Promise<void> {\r\n    const scenarioFilePath: string = DeployScenarioConfiguration.getConfigFilePath(\r\n      scenarioName,\r\n      this._rushConfiguration\r\n    );\r\n    const scenarioConfiguration: DeployScenarioConfiguration = DeployScenarioConfiguration.loadFromFile(\r\n      scenarioFilePath,\r\n      this._rushConfiguration\r\n    );\r\n\r\n    if (!mainProjectName) {\r\n      if (scenarioConfiguration.json.deploymentProjectNames.length === 1) {\r\n        // If there is only one project, then \"--project\" is optional\r\n        mainProjectName = scenarioConfiguration.json.deploymentProjectNames[0];\r\n      } else {\r\n        throw new Error(\r\n          `The ${path.basename(scenarioFilePath)} configuration specifies multiple items for` +\r\n            ` \"deploymentProjectNames\". Use the \"--project\" parameter to indicate the project to be deployed.`\r\n        );\r\n      }\r\n    } else {\r\n      if (scenarioConfiguration.json.deploymentProjectNames.indexOf(mainProjectName) < 0) {\r\n        throw new Error(\r\n          `The project \"${mainProjectName}\" does not appear in the list of \"deploymentProjectNames\"` +\r\n            ` from ${path.basename(scenarioFilePath)}.`\r\n        );\r\n      }\r\n    }\r\n\r\n    let targetRootFolder: string;\r\n    if (targetFolderParameter) {\r\n      targetRootFolder = path.resolve(targetFolderParameter);\r\n      if (!FileSystem.exists(targetRootFolder)) {\r\n        throw new Error(\r\n          'The specified target folder does not exist: ' + JSON.stringify(targetFolderParameter)\r\n        );\r\n      }\r\n    } else {\r\n      targetRootFolder = path.join(this._rushConfiguration.commonFolder, 'deploy');\r\n    }\r\n    const sourceRootFolder: string = this._rushConfiguration.rushJsonFolder;\r\n\r\n    console.log(colors.cyan('Deploying to target folder:  ') + targetRootFolder);\r\n    console.log(colors.cyan('Main project for deployment: ') + mainProjectName + '\\n');\r\n\r\n    FileSystem.ensureFolder(targetRootFolder);\r\n\r\n    // Is the target folder empty?\r\n    if (FileSystem.readFolder(targetRootFolder).length > 0) {\r\n      if (overwriteExisting) {\r\n        console.log('Deleting target folder contents because \"--overwrite\" was specified...');\r\n        FileSystem.ensureEmptyFolder(targetRootFolder);\r\n        console.log();\r\n      } else {\r\n        throw new Error(\r\n          'The deploy target folder is not empty. You can specify \"--overwrite\"' +\r\n            ' to recursively delete all folder contents.'\r\n        );\r\n      }\r\n    }\r\n\r\n    // If create archive is set, ensure it has a legal extension\r\n    if (createArchiveFilePath && path.extname(createArchiveFilePath) !== '.zip') {\r\n      throw new Error(\r\n        'The \"--create-archive\" parameter currently only supports archives with the .zip file extension.'\r\n      );\r\n    }\r\n\r\n    const deployState: IDeployState = {\r\n      scenarioFilePath,\r\n      scenarioConfiguration,\r\n      mainProjectName,\r\n      sourceRootFolder,\r\n      targetRootFolder,\r\n      foldersToCopy: new Set(),\r\n      folderInfosByPath: new Map(),\r\n      symlinkAnalyzer: new SymlinkAnalyzer(),\r\n      pnpmfileConfiguration: new PnpmfileConfiguration(this._rushConfiguration),\r\n      createArchiveFilePath\r\n    };\r\n\r\n    await this._prepareDeploymentAsync(deployState);\r\n\r\n    console.log('\\n' + colors.green('The operation completed successfully.'));\r\n  }\r\n}\r\n"]}