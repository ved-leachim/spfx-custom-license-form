"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PnpmfileConfiguration = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
/**
 * Loads PNPM's pnpmfile.js configuration, and invokes it to preprocess package.json files.
 */
class PnpmfileConfiguration {
    constructor(rushConfiguration) {
        this._readPackageHook = undefined;
        this._context = {
            log: (message) => { }
        };
        // Avoid setting the hook when not using pnpm or when using pnpm workspaces, since workspaces mode
        // already transforms the package.json
        if (rushConfiguration.packageManager === 'pnpm' &&
            (!rushConfiguration.pnpmOptions || !rushConfiguration.pnpmOptions.useWorkspaces)) {
            const pnpmFilePath = rushConfiguration.getPnpmfilePath();
            if (node_core_library_1.FileSystem.exists(pnpmFilePath)) {
                console.log('Loading ' + path.relative(rushConfiguration.rushJsonFolder, pnpmFilePath));
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                const pnpmFileModule = require(pnpmFilePath);
                if (pnpmFileModule.hooks && pnpmFileModule.hooks.readPackage) {
                    this._readPackageHook = pnpmFileModule.hooks.readPackage;
                }
            }
        }
    }
    /**
     * Transform a package.json file using the pnpmfile.js hook.
     * @returns the tranformed object, or the original input if pnpmfile.js was not found.
     */
    transform(packageJson) {
        if (!this._readPackageHook) {
            return packageJson;
        }
        else {
            return this._readPackageHook(packageJson, this._context);
        }
    }
}
exports.PnpmfileConfiguration = PnpmfileConfiguration;
//# sourceMappingURL=PnpmfileConfiguration.js.map