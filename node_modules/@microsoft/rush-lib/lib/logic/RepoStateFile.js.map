{"version":3,"file":"RepoStateFile.js","sourceRoot":"","sources":["../../src/logic/RepoStateFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem, JsonFile, JsonSchema, NewlineKind } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { PnpmShrinkwrapFile } from './pnpm/PnpmShrinkwrapFile';\r\nimport { CommonVersionsConfiguration } from '../api/CommonVersionsConfiguration';\r\n\r\n/**\r\n * This interface represents the raw repo-state.json file\r\n * Example:\r\n *  {\r\n *    \"pnpmShrinkwrapHash\": \"...\",\r\n *    \"preferredVersionsHash\": \"...\"\r\n *  }\r\n */\r\ninterface IRepoStateJson {\r\n  /**\r\n   * A hash of the PNPM shrinkwrap file contents\r\n   */\r\n  pnpmShrinkwrapHash?: string;\r\n  /**\r\n   * A hash of the CommonVersionsConfiguration.preferredVersions field\r\n   */\r\n  preferredVersionsHash?: string;\r\n}\r\n\r\n/**\r\n * This file is used to track the state of various Rush-related features. It is generated\r\n * and updated by Rush.\r\n *\r\n * @public\r\n */\r\nexport class RepoStateFile {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/repo-state.schema.json')\r\n  );\r\n\r\n  private _repoStateFilePath: string;\r\n  private _variant: string | undefined;\r\n  private _pnpmShrinkwrapHash: string | undefined;\r\n  private _preferredVersionsHash: string | undefined;\r\n  private _modified: boolean = false;\r\n\r\n  private constructor(\r\n    repoStateJson: IRepoStateJson | undefined,\r\n    filePath: string,\r\n    variant: string | undefined\r\n  ) {\r\n    this._repoStateFilePath = filePath;\r\n    this._variant = variant;\r\n\r\n    if (repoStateJson) {\r\n      this._pnpmShrinkwrapHash = repoStateJson.pnpmShrinkwrapHash;\r\n      this._preferredVersionsHash = repoStateJson.preferredVersionsHash;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the absolute file path of the repo-state.json file.\r\n   */\r\n  public get filePath(): string {\r\n    return this._repoStateFilePath;\r\n  }\r\n\r\n  /**\r\n   * The hash of the pnpm shrinkwrap file at the end of the last update.\r\n   */\r\n  public get pnpmShrinkwrapHash(): string | undefined {\r\n    return this._pnpmShrinkwrapHash;\r\n  }\r\n\r\n  /**\r\n   * The hash of all preferred versions at the end of the last update.\r\n   */\r\n  public get preferredVersionsHash(): string | undefined {\r\n    return this._preferredVersionsHash;\r\n  }\r\n\r\n  /**\r\n   * Loads the repo-state.json data from the specified file path.\r\n   * If the file has not been created yet, then an empty object is returned.\r\n   *\r\n   * @param jsonFilename - The path to the repo-state.json file.\r\n   * @param variant - The variant currently being used by Rush.\r\n   */\r\n  public static loadFromFile(jsonFilename: string, variant: string | undefined): RepoStateFile {\r\n    let repoStateJson: IRepoStateJson | undefined = undefined;\r\n    try {\r\n      repoStateJson = JsonFile.loadAndValidate(jsonFilename, RepoStateFile._jsonSchema);\r\n    } catch (error) {\r\n      if (!FileSystem.isNotExistError(error)) {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    return new RepoStateFile(repoStateJson, jsonFilename, variant);\r\n  }\r\n\r\n  /**\r\n   * Refresh the data contained in repo-state.json using the current state\r\n   * of the Rush repo, and save the file if changes were made.\r\n   *\r\n   * @param rushConfiguration - The Rush configuration for the repo.\r\n   *\r\n   * @returns true if the file was modified, otherwise false.\r\n   */\r\n  public refreshState(rushConfiguration: RushConfiguration): boolean {\r\n    // Only support saving the pnpm shrinkwrap hash if it was enabled\r\n    const preventShrinkwrapChanges: boolean =\r\n      rushConfiguration.packageManager === 'pnpm' &&\r\n      rushConfiguration.pnpmOptions &&\r\n      rushConfiguration.pnpmOptions.preventManualShrinkwrapChanges;\r\n    if (preventShrinkwrapChanges) {\r\n      const pnpmShrinkwrapFile: PnpmShrinkwrapFile | undefined = PnpmShrinkwrapFile.loadFromFile(\r\n        rushConfiguration.getCommittedShrinkwrapFilename(this._variant),\r\n        rushConfiguration.pnpmOptions\r\n      );\r\n      if (pnpmShrinkwrapFile) {\r\n        const shrinkwrapFileHash: string = pnpmShrinkwrapFile.getShrinkwrapHash();\r\n        if (this._pnpmShrinkwrapHash !== shrinkwrapFileHash) {\r\n          this._pnpmShrinkwrapHash = shrinkwrapFileHash;\r\n          this._modified = true;\r\n        }\r\n      }\r\n    } else if (this._pnpmShrinkwrapHash !== undefined) {\r\n      this._pnpmShrinkwrapHash = undefined;\r\n      this._modified = true;\r\n    }\r\n\r\n    // Currently, only support saving the preferred versions hash if using workspaces\r\n    const useWorkspaces: boolean =\r\n      rushConfiguration.pnpmOptions && rushConfiguration.pnpmOptions.useWorkspaces;\r\n    if (useWorkspaces) {\r\n      const commonVersions: CommonVersionsConfiguration = rushConfiguration.getCommonVersions(this._variant);\r\n      const preferredVersionsHash: string = commonVersions.getPreferredVersionsHash();\r\n      if (this._preferredVersionsHash !== preferredVersionsHash) {\r\n        this._preferredVersionsHash = preferredVersionsHash;\r\n        this._modified = true;\r\n      }\r\n    } else if (this._preferredVersionsHash !== undefined) {\r\n      this._preferredVersionsHash = undefined;\r\n      this._modified = true;\r\n    }\r\n\r\n    return this._saveIfModified();\r\n  }\r\n\r\n  /**\r\n   * Writes the \"repo-state.json\" file to disk, using the filename that was passed to loadFromFile().\r\n   */\r\n  private _saveIfModified(): boolean {\r\n    if (this._modified) {\r\n      const content: string =\r\n        '// DO NOT MODIFY THIS FILE. It is generated and used by Rush.' +\r\n        `${NewlineKind.Lf}${this._serialize()}`;\r\n      FileSystem.writeFile(this._repoStateFilePath, content);\r\n      this._modified = false;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private _serialize(): string {\r\n    // We need to set these one-by-one, since JsonFile.stringify does not like undefined values\r\n    const repoStateJson: IRepoStateJson = {};\r\n    if (this._pnpmShrinkwrapHash) {\r\n      repoStateJson.pnpmShrinkwrapHash = this._pnpmShrinkwrapHash;\r\n    }\r\n    if (this._preferredVersionsHash) {\r\n      repoStateJson.preferredVersionsHash = this._preferredVersionsHash;\r\n    }\r\n\r\n    return JsonFile.stringify(repoStateJson, { newlineConversion: NewlineKind.Lf });\r\n  }\r\n}\r\n"]}