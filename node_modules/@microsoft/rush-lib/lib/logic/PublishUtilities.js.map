{"version":3,"file":"PublishUtilities.js","sourceRoot":"","sources":["../../src/logic/PublishUtilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * This file contains a set of helper functions that are unit tested and used with the PublishAction,\r\n * which itself is a thin wrapper around these helpers.\r\n */\r\n\r\nimport { EOL } from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport { execSync } from 'child_process';\r\nimport { IPackageJson, JsonFile, FileConstants, Text, Enum } from '@rushstack/node-core-library';\r\n\r\nimport { IChangeInfo, ChangeType } from '../api/ChangeManagement';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { Utilities, IEnvironment } from '../utilities/Utilities';\r\nimport { PrereleaseToken } from './PrereleaseToken';\r\nimport { ChangeFiles } from './ChangeFiles';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { DependencySpecifier, DependencySpecifierType } from './DependencySpecifier';\r\nimport { Git } from './Git';\r\n\r\nexport interface IChangeInfoHash {\r\n  [key: string]: IChangeInfo;\r\n}\r\n\r\nexport class PublishUtilities {\r\n  /**\r\n   * Finds change requests in the given folder.\r\n   * @param changesPath Path to the changes folder.\r\n   * @returns Dictionary of all change requests, keyed by package name.\r\n   */\r\n  public static findChangeRequests(\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    changeFiles: ChangeFiles,\r\n    includeCommitDetails?: boolean,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): IChangeInfoHash {\r\n    const allChanges: IChangeInfoHash = {};\r\n    console.log(`Finding changes in: ${changeFiles.getChangesPath()}`);\r\n\r\n    const files: string[] = changeFiles.getFiles();\r\n\r\n    // Add the minimum changes defined by the change descriptions.\r\n    files.forEach((fullPath: string) => {\r\n      const changeRequest: IChangeInfo = JsonFile.load(fullPath);\r\n\r\n      if (includeCommitDetails) {\r\n        const git: Git = new Git(rushConfiguration);\r\n        PublishUtilities._updateCommitDetails(git, fullPath, changeRequest.changes);\r\n      }\r\n\r\n      for (const change of changeRequest.changes!) {\r\n        PublishUtilities._addChange(\r\n          change,\r\n          allChanges,\r\n          allPackages,\r\n          rushConfiguration,\r\n          prereleaseToken,\r\n          projectsToExclude\r\n        );\r\n      }\r\n    });\r\n\r\n    // For each requested package change, ensure downstream dependencies are also updated.\r\n    for (const packageName in allChanges) {\r\n      if (allChanges.hasOwnProperty(packageName)) {\r\n        PublishUtilities._updateDownstreamDependencies(\r\n          allChanges[packageName],\r\n          allChanges,\r\n          allPackages,\r\n          rushConfiguration,\r\n          prereleaseToken,\r\n          projectsToExclude\r\n        );\r\n      }\r\n    }\r\n\r\n    // Update orders so that downstreams are marked to come after upstreams.\r\n    for (const packageName in allChanges) {\r\n      if (allChanges.hasOwnProperty(packageName)) {\r\n        const change: IChangeInfo = allChanges[packageName];\r\n        const project: RushConfigurationProject = allPackages.get(packageName)!;\r\n        const pkg: IPackageJson = project.packageJson;\r\n        const deps: string[] = project.downstreamDependencyProjects;\r\n\r\n        // Write the new version expected for the change.\r\n        const skipVersionBump: boolean = PublishUtilities._shouldSkipVersionBump(\r\n          project,\r\n          prereleaseToken,\r\n          projectsToExclude\r\n        );\r\n        if (skipVersionBump) {\r\n          change.newVersion = pkg.version;\r\n        } else {\r\n          // For hotfix changes, do not re-write new version\r\n          change.newVersion =\r\n            change.changeType! >= ChangeType.patch\r\n              ? semver.inc(pkg.version, PublishUtilities._getReleaseType(change.changeType!))!\r\n              : change.changeType === ChangeType.hotfix\r\n              ? change.newVersion\r\n              : pkg.version;\r\n        }\r\n\r\n        if (deps) {\r\n          for (const depName of deps) {\r\n            const depChange: IChangeInfo = allChanges[depName];\r\n\r\n            if (depChange) {\r\n              depChange.order = Math.max(change.order! + 1, depChange.order!);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return allChanges;\r\n  }\r\n\r\n  /**\r\n   * Given the changes hash, flattens them into a sorted array based on their dependency order.\r\n   * @params allChanges - hash of change requests.\r\n   * @returns Sorted array of change requests.\r\n   */\r\n  public static sortChangeRequests(allChanges: IChangeInfoHash): IChangeInfo[] {\r\n    return Object.keys(allChanges)\r\n      .map((key) => allChanges[key])\r\n      .sort((a, b) =>\r\n        a.order! === b.order! ? a.packageName.localeCompare(b.packageName) : a.order! < b.order! ? -1 : 1\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Given a single change request, updates the package json file with updated versions on disk.\r\n   */\r\n  public static updatePackages(\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    shouldCommit: boolean,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): Map<string, IPackageJson> {\r\n    const updatedPackages: Map<string, IPackageJson> = new Map<string, IPackageJson>();\r\n\r\n    Object.keys(allChanges).forEach((packageName) => {\r\n      const updatedPackage: IPackageJson = PublishUtilities._writePackageChanges(\r\n        allChanges[packageName],\r\n        allChanges,\r\n        allPackages,\r\n        rushConfiguration,\r\n        shouldCommit,\r\n        prereleaseToken,\r\n        projectsToExclude\r\n      );\r\n      updatedPackages.set(updatedPackage.name, updatedPackage);\r\n    });\r\n\r\n    return updatedPackages;\r\n  }\r\n\r\n  /**\r\n   * Returns the generated tagname to use for a published commit, given package name and version.\r\n   */\r\n  public static createTagname(packageName: string, version: string): string {\r\n    return packageName + '_v' + version;\r\n  }\r\n\r\n  public static isRangeDependency(version: string): boolean {\r\n    const LOOSE_PKG_REGEX: RegExp = />=?(?:\\d+\\.){2}\\d+(\\-[0-9A-Za-z-.]*)?\\s+<(?:\\d+\\.){2}\\d+/;\r\n\r\n    return LOOSE_PKG_REGEX.test(version);\r\n  }\r\n\r\n  public static getEnvArgs(): { [key: string]: string | undefined } {\r\n    const env: { [key: string]: string | undefined } = {};\r\n\r\n    // Copy existing process.env values (for nodist)\r\n    Object.keys(process.env).forEach((key: string) => {\r\n      env[key] = process.env[key];\r\n    });\r\n    return env;\r\n  }\r\n\r\n  /**\r\n   * @param secretSubstring -- if specified, a substring to be replaced by `<<SECRET>>` to avoid printing secrets\r\n   * on the console\r\n   */\r\n  public static execCommand(\r\n    shouldExecute: boolean,\r\n    command: string,\r\n    args: string[] = [],\r\n    workingDirectory: string = process.cwd(),\r\n    environment?: IEnvironment,\r\n    secretSubstring?: string\r\n  ): void {\r\n    let relativeDirectory: string = path.relative(process.cwd(), workingDirectory);\r\n\r\n    if (relativeDirectory) {\r\n      relativeDirectory = `(${relativeDirectory})`;\r\n    }\r\n\r\n    let commandArgs: string = args.join(' ');\r\n\r\n    if (secretSubstring && secretSubstring.length > 0) {\r\n      // Avoid printing the NPM publish token on the console when displaying the commandArgs\r\n      commandArgs = Text.replaceAll(commandArgs, secretSubstring, '<<SECRET>>');\r\n    }\r\n\r\n    console.log(\r\n      `${EOL}* ${shouldExecute ? 'EXECUTING' : 'DRYRUN'}: ${command} ${commandArgs} ${relativeDirectory}`\r\n    );\r\n\r\n    if (shouldExecute) {\r\n      Utilities.executeCommand({\r\n        command,\r\n        args,\r\n        workingDirectory,\r\n        environment,\r\n        suppressOutput: false,\r\n        keepEnvironment: true\r\n      });\r\n    }\r\n  }\r\n\r\n  public static getNewDependencyVersion(\r\n    dependencies: { [key: string]: string },\r\n    dependencyName: string,\r\n    newProjectVersion: string\r\n  ): string {\r\n    const currentDependencySpecifier: DependencySpecifier = new DependencySpecifier(\r\n      dependencyName,\r\n      dependencies[dependencyName]\r\n    );\r\n    const currentDependencyVersion: string = currentDependencySpecifier.versionSpecifier;\r\n    let newDependencyVersion: string;\r\n\r\n    if (currentDependencyVersion === '*') {\r\n      newDependencyVersion = '*';\r\n    } else if (PublishUtilities.isRangeDependency(currentDependencyVersion)) {\r\n      newDependencyVersion = PublishUtilities._getNewRangeDependency(newProjectVersion);\r\n    } else if (currentDependencyVersion.lastIndexOf('~', 0) === 0) {\r\n      newDependencyVersion = '~' + newProjectVersion;\r\n    } else if (currentDependencyVersion.lastIndexOf('^', 0) === 0) {\r\n      newDependencyVersion = '^' + newProjectVersion;\r\n    } else {\r\n      newDependencyVersion = newProjectVersion;\r\n    }\r\n    return currentDependencySpecifier.specifierType === DependencySpecifierType.Workspace\r\n      ? `workspace:${newDependencyVersion}`\r\n      : newDependencyVersion;\r\n  }\r\n\r\n  private static _getReleaseType(changeType: ChangeType): semver.ReleaseType {\r\n    switch (changeType) {\r\n      case ChangeType.major:\r\n        return 'major';\r\n      case ChangeType.minor:\r\n        return 'minor';\r\n      case ChangeType.patch:\r\n        return 'patch';\r\n      case ChangeType.hotfix:\r\n        return 'prerelease';\r\n      default:\r\n        throw new Error(`Wrong change type ${changeType}`);\r\n    }\r\n  }\r\n\r\n  private static _getNewRangeDependency(newVersion: string): string {\r\n    let upperLimit: string = newVersion;\r\n    if (semver.prerelease(newVersion)) {\r\n      // Remove the prerelease first, then bump major.\r\n      upperLimit = semver.inc(newVersion, 'patch')!;\r\n    }\r\n    upperLimit = semver.inc(upperLimit, 'major')!;\r\n\r\n    return `>=${newVersion} <${upperLimit}`;\r\n  }\r\n\r\n  private static _shouldSkipVersionBump(\r\n    project: RushConfigurationProject,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): boolean {\r\n    // Suffix does not bump up the version.\r\n    // Excluded projects do not bump up version.\r\n    return (\r\n      (prereleaseToken && prereleaseToken.isSuffix) ||\r\n      (projectsToExclude && projectsToExclude.has(project.packageName)) ||\r\n      !project.shouldPublish\r\n    );\r\n  }\r\n\r\n  private static _updateCommitDetails(git: Git, filename: string, changes: IChangeInfo[] | undefined): void {\r\n    try {\r\n      const gitPath: string = git.getGitPathOrThrow();\r\n      const fileLog: string = execSync(`${gitPath} log -n 1 ${filename}`, {\r\n        cwd: path.dirname(filename)\r\n      }).toString();\r\n      const author: string = fileLog.match(/Author: (.*)/)![1];\r\n      const commit: string = fileLog.match(/commit (.*)/)![1];\r\n\r\n      changes!.forEach((change) => {\r\n        change.author = author;\r\n        change.commit = commit;\r\n      });\r\n    } catch (e) {\r\n      /* no-op, best effort. */\r\n    }\r\n  }\r\n\r\n  private static _writePackageChanges(\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    shouldCommit: boolean,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): IPackageJson {\r\n    const project: RushConfigurationProject = allPackages.get(change.packageName)!;\r\n    const pkg: IPackageJson = project.packageJson;\r\n\r\n    const shouldSkipVersionBump: boolean =\r\n      !project.shouldPublish || (!!projectsToExclude && projectsToExclude.has(change.packageName));\r\n\r\n    const newVersion: string = shouldSkipVersionBump\r\n      ? pkg.version\r\n      : PublishUtilities._getChangeInfoNewVersion(change, prereleaseToken);\r\n\r\n    if (!shouldSkipVersionBump) {\r\n      console.log(\r\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: ${ChangeType[change.changeType!]} update ` +\r\n          `for ${change.packageName} to ${newVersion}`\r\n      );\r\n    } else {\r\n      console.log(\r\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: update for ${change.packageName} at ${newVersion}`\r\n      );\r\n    }\r\n\r\n    const packagePath: string = path.join(project.projectFolder, FileConstants.PackageJson);\r\n\r\n    pkg.version = newVersion;\r\n\r\n    // Update the package's dependencies.\r\n    PublishUtilities._updateDependencies(\r\n      pkg.name,\r\n      pkg.dependencies,\r\n      allChanges,\r\n      allPackages,\r\n      rushConfiguration,\r\n      prereleaseToken,\r\n      projectsToExclude\r\n    );\r\n    // Update the package's dev dependencies.\r\n    PublishUtilities._updateDependencies(\r\n      pkg.name,\r\n      pkg.devDependencies,\r\n      allChanges,\r\n      allPackages,\r\n      rushConfiguration,\r\n      prereleaseToken,\r\n      projectsToExclude\r\n    );\r\n    // Update the package's peer dependencies.\r\n    PublishUtilities._updateDependencies(\r\n      pkg.name,\r\n      pkg.peerDependencies,\r\n      allChanges,\r\n      allPackages,\r\n      rushConfiguration,\r\n      prereleaseToken,\r\n      projectsToExclude\r\n    );\r\n\r\n    change.changes!.forEach((subChange) => {\r\n      if (subChange.comment) {\r\n        console.log(` - [${ChangeType[subChange.changeType!]}] ${subChange.comment}`);\r\n      }\r\n    });\r\n\r\n    if (shouldCommit) {\r\n      JsonFile.save(pkg, packagePath, { updateExistingFile: true });\r\n    }\r\n    return pkg;\r\n  }\r\n\r\n  private static _isCyclicDependency(\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    packageName: string,\r\n    dependencyName: string\r\n  ): boolean {\r\n    const packageConfig: RushConfigurationProject | undefined = allPackages.get(packageName);\r\n    return !!packageConfig && packageConfig.cyclicDependencyProjects.has(dependencyName);\r\n  }\r\n\r\n  private static _updateDependencies(\r\n    packageName: string,\r\n    dependencies: { [key: string]: string } | undefined,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    prereleaseToken: PrereleaseToken | undefined,\r\n    projectsToExclude?: Set<string>\r\n  ): void {\r\n    if (dependencies) {\r\n      Object.keys(dependencies).forEach((depName) => {\r\n        if (!PublishUtilities._isCyclicDependency(allPackages, packageName, depName)) {\r\n          const depChange: IChangeInfo = allChanges[depName];\r\n          if (!depChange) {\r\n            return;\r\n          }\r\n          const depProject: RushConfigurationProject = allPackages.get(depName)!;\r\n\r\n          if (!depProject.shouldPublish || (projectsToExclude && projectsToExclude.has(depName))) {\r\n            // No version change.\r\n            return;\r\n          } else if (\r\n            prereleaseToken &&\r\n            prereleaseToken.hasValue &&\r\n            prereleaseToken.isPartialPrerelease &&\r\n            depChange.changeType! < ChangeType.hotfix\r\n          ) {\r\n            // For partial prereleases, do not version bump dependencies with the `prereleaseToken`\r\n            // value unless an actual change (hotfix, patch, minor, major) has occurred\r\n            return;\r\n          } else if (depChange && prereleaseToken && prereleaseToken.hasValue) {\r\n            // TODO: treat prerelease version the same as non-prerelease version.\r\n            // For prerelease, the newVersion needs to be appended with prerelease name.\r\n            // And dependency should specify the specific prerelease version.\r\n            const currentSpecifier: DependencySpecifier = new DependencySpecifier(\r\n              depName,\r\n              dependencies[depName]\r\n            );\r\n            const newVersion: string = PublishUtilities._getChangeInfoNewVersion(depChange, prereleaseToken);\r\n            dependencies[depName] =\r\n              currentSpecifier.specifierType === DependencySpecifierType.Workspace\r\n                ? `workspace:${newVersion}`\r\n                : newVersion;\r\n          } else if (depChange && depChange.changeType! >= ChangeType.hotfix) {\r\n            PublishUtilities._updateDependencyVersion(\r\n              packageName,\r\n              dependencies,\r\n              depName,\r\n              depChange,\r\n              allChanges,\r\n              allPackages,\r\n              rushConfiguration\r\n            );\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the new version from the ChangeInfo.\r\n   * The value of newVersion in ChangeInfo remains unchanged when the change type is dependency,\r\n   * However, for pre-release build, it won't pick up the updated pre-released dependencies. That is why\r\n   * this function should return a pre-released patch for that case. The exception to this is when we're\r\n   * running a partial pre-release build. In this case, only user-changed packages should update.\r\n   */\r\n  private static _getChangeInfoNewVersion(\r\n    change: IChangeInfo,\r\n    prereleaseToken: PrereleaseToken | undefined\r\n  ): string {\r\n    let newVersion: string = change.newVersion!;\r\n    if (prereleaseToken && prereleaseToken.hasValue) {\r\n      if (prereleaseToken.isPartialPrerelease && change.changeType! <= ChangeType.hotfix) {\r\n        return newVersion;\r\n      }\r\n      if (prereleaseToken.isPrerelease && change.changeType === ChangeType.dependency) {\r\n        newVersion = semver.inc(newVersion, 'patch')!;\r\n      }\r\n      return `${newVersion}-${prereleaseToken.name}`;\r\n    } else {\r\n      return newVersion;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the given change to the allChanges map.\r\n   *\r\n   * @returns true if the change caused the dependency change type to increase.\r\n   */\r\n  private static _addChange(\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    prereleaseToken?: PrereleaseToken,\r\n    projectsToExclude?: Set<string>\r\n  ): boolean {\r\n    let hasChanged: boolean = false;\r\n    const packageName: string = change.packageName;\r\n    const project: RushConfigurationProject | undefined = allPackages.get(packageName);\r\n\r\n    if (!project) {\r\n      console.log(\r\n        `The package ${packageName} was requested for publishing but does not exist. Skip this change.`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    const pkg: IPackageJson = project.packageJson;\r\n    let currentChange: IChangeInfo;\r\n\r\n    // If the given change does not have a changeType, derive it from the \"type\" string.\r\n    if (change.changeType === undefined) {\r\n      change.changeType = Enum.tryGetValueByKey(ChangeType, change.type!);\r\n    }\r\n\r\n    if (!allChanges[packageName]) {\r\n      hasChanged = true;\r\n      currentChange = allChanges[packageName] = {\r\n        packageName,\r\n        changeType: change.changeType,\r\n        order: 0,\r\n        changes: [change]\r\n      };\r\n    } else {\r\n      currentChange = allChanges[packageName];\r\n\r\n      const oldChangeType: ChangeType = currentChange.changeType!;\r\n\r\n      if (oldChangeType === ChangeType.hotfix && change.changeType! > oldChangeType) {\r\n        throw new Error(\r\n          `Cannot apply ${this._getReleaseType(change.changeType!)} change after hotfix on same package`\r\n        );\r\n      }\r\n      if (change.changeType! === ChangeType.hotfix && oldChangeType > change.changeType!) {\r\n        throw new Error(\r\n          `Cannot apply hotfix alongside ${this._getReleaseType(oldChangeType!)} change on same package`\r\n        );\r\n      }\r\n\r\n      currentChange.changeType = Math.max(currentChange.changeType!, change.changeType!);\r\n      currentChange.changes!.push(change);\r\n\r\n      hasChanged = hasChanged || oldChangeType !== currentChange.changeType;\r\n    }\r\n    const skipVersionBump: boolean = PublishUtilities._shouldSkipVersionBump(\r\n      project,\r\n      prereleaseToken,\r\n      projectsToExclude\r\n    );\r\n\r\n    if (skipVersionBump) {\r\n      currentChange.newVersion = pkg.version;\r\n      hasChanged = false;\r\n      currentChange.changeType = ChangeType.none;\r\n    } else {\r\n      if (change.changeType === ChangeType.hotfix) {\r\n        const prereleaseComponents: ReadonlyArray<string> | null = semver.prerelease(pkg.version);\r\n        if (!rushConfiguration.hotfixChangeEnabled) {\r\n          throw new Error(`Cannot add hotfix change; hotfixChangeEnabled is false in configuration.`);\r\n        }\r\n\r\n        currentChange.newVersion = pkg.version;\r\n        if (!prereleaseComponents) {\r\n          currentChange.newVersion += '-hotfix';\r\n        }\r\n        currentChange.newVersion = semver.inc(currentChange.newVersion, 'prerelease')!;\r\n      } else {\r\n        // When there are multiple changes of this package, the final value of new version\r\n        // should not depend on the order of the changes.\r\n        let packageVersion: string = pkg.version;\r\n        if (currentChange.newVersion && semver.gt(currentChange.newVersion, pkg.version)) {\r\n          packageVersion = currentChange.newVersion;\r\n        }\r\n        currentChange.newVersion =\r\n          change.changeType! >= ChangeType.patch\r\n            ? semver.inc(pkg.version, PublishUtilities._getReleaseType(currentChange.changeType!))!\r\n            : packageVersion;\r\n      }\r\n\r\n      // If hotfix change, force new range dependency to be the exact new version\r\n      currentChange.newRangeDependency =\r\n        change.changeType === ChangeType.hotfix\r\n          ? currentChange.newVersion\r\n          : PublishUtilities._getNewRangeDependency(currentChange.newVersion!);\r\n    }\r\n    return hasChanged;\r\n  }\r\n\r\n  private static _updateDownstreamDependencies(\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    prereleaseToken: PrereleaseToken | undefined,\r\n    projectsToExclude?: Set<string>\r\n  ): void {\r\n    const packageName: string = change.packageName;\r\n    const downstreamNames: string[] = allPackages.get(packageName)!.downstreamDependencyProjects;\r\n\r\n    // Iterate through all downstream dependencies for the package.\r\n    if (downstreamNames) {\r\n      if (change.changeType! >= ChangeType.hotfix || (prereleaseToken && prereleaseToken.hasValue)) {\r\n        for (const depName of downstreamNames) {\r\n          const pkg: IPackageJson = allPackages.get(depName)!.packageJson;\r\n\r\n          PublishUtilities._updateDownstreamDependency(\r\n            pkg.name,\r\n            pkg.dependencies,\r\n            change,\r\n            allChanges,\r\n            allPackages,\r\n            rushConfiguration,\r\n            prereleaseToken,\r\n            projectsToExclude\r\n          );\r\n          PublishUtilities._updateDownstreamDependency(\r\n            pkg.name,\r\n            pkg.devDependencies,\r\n            change,\r\n            allChanges,\r\n            allPackages,\r\n            rushConfiguration,\r\n            prereleaseToken,\r\n            projectsToExclude\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _updateDownstreamDependency(\r\n    parentPackageName: string,\r\n    dependencies: { [packageName: string]: string } | undefined,\r\n    change: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    prereleaseToken: PrereleaseToken | undefined,\r\n    projectsToExclude?: Set<string>\r\n  ): void {\r\n    if (\r\n      dependencies &&\r\n      dependencies[change.packageName] &&\r\n      !PublishUtilities._isCyclicDependency(allPackages, parentPackageName, change.packageName)\r\n    ) {\r\n      const requiredVersion: DependencySpecifier = new DependencySpecifier(\r\n        change.packageName,\r\n        dependencies[change.packageName]\r\n      );\r\n      const isWorkspaceWildcardVersion: boolean =\r\n        requiredVersion.specifierType === DependencySpecifierType.Workspace &&\r\n        requiredVersion.versionSpecifier === '*';\r\n      const alwaysUpdate: boolean =\r\n        (!!prereleaseToken && prereleaseToken.hasValue && !allChanges.hasOwnProperty(parentPackageName)) ||\r\n        isWorkspaceWildcardVersion;\r\n\r\n      // If the version range exists and has not yet been updated to this version, update it.\r\n      if (requiredVersion.versionSpecifier !== change.newRangeDependency || alwaysUpdate) {\r\n        let changeType: ChangeType;\r\n        // Propagate hotfix changes to dependencies\r\n        if (change.changeType === ChangeType.hotfix) {\r\n          changeType = ChangeType.hotfix;\r\n        } else {\r\n          // Either it already satisfies the new version, or doesn't.\r\n          // If not, the downstream dep needs to be republished.\r\n          // The downstream dep will also need to be republished if using `workspace:*` as this will publish\r\n          // as the exact version.\r\n          changeType =\r\n            semver.satisfies(change.newVersion!, requiredVersion.versionSpecifier) &&\r\n            !isWorkspaceWildcardVersion\r\n              ? ChangeType.dependency\r\n              : ChangeType.patch;\r\n        }\r\n\r\n        const hasChanged: boolean = PublishUtilities._addChange(\r\n          {\r\n            packageName: parentPackageName,\r\n            changeType\r\n          },\r\n          allChanges,\r\n          allPackages,\r\n          rushConfiguration,\r\n          prereleaseToken,\r\n          projectsToExclude\r\n        );\r\n\r\n        if (hasChanged || alwaysUpdate) {\r\n          // Only re-evaluate downstream dependencies if updating the parent package's dependency\r\n          // caused a version bump.\r\n          PublishUtilities._updateDownstreamDependencies(\r\n            allChanges[parentPackageName],\r\n            allChanges,\r\n            allPackages,\r\n            rushConfiguration,\r\n            prereleaseToken,\r\n            projectsToExclude\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _updateDependencyVersion(\r\n    packageName: string,\r\n    dependencies: { [key: string]: string },\r\n    dependencyName: string,\r\n    dependencyChange: IChangeInfo,\r\n    allChanges: IChangeInfoHash,\r\n    allPackages: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration\r\n  ): void {\r\n    let currentDependencyVersion: string | undefined = dependencies[dependencyName];\r\n    let newDependencyVersion: string = PublishUtilities.getNewDependencyVersion(\r\n      dependencies,\r\n      dependencyName,\r\n      dependencyChange.newVersion!\r\n    );\r\n    dependencies[dependencyName] = newDependencyVersion;\r\n\r\n    // \"*\" is a special case for workspace ranges, since it will publish using the exact\r\n    // version of the local dependency, so we need to modify what we write for our change\r\n    // comment\r\n    const currentDependencySpecifier: DependencySpecifier = new DependencySpecifier(\r\n      dependencyName,\r\n      currentDependencyVersion\r\n    );\r\n    currentDependencyVersion =\r\n      currentDependencySpecifier.specifierType === DependencySpecifierType.Workspace &&\r\n      currentDependencySpecifier.versionSpecifier === '*'\r\n        ? undefined\r\n        : currentDependencySpecifier.versionSpecifier;\r\n\r\n    const newDependencySpecifier: DependencySpecifier = new DependencySpecifier(\r\n      dependencyName,\r\n      newDependencyVersion\r\n    );\r\n    newDependencyVersion =\r\n      newDependencySpecifier.specifierType === DependencySpecifierType.Workspace &&\r\n      newDependencySpecifier.versionSpecifier === '*'\r\n        ? dependencyChange.newVersion!\r\n        : newDependencySpecifier.versionSpecifier;\r\n\r\n    // Add dependency version update comment.\r\n    PublishUtilities._addChange(\r\n      {\r\n        packageName: packageName,\r\n        changeType: ChangeType.dependency,\r\n        comment:\r\n          `Updating dependency \"${dependencyName}\" ` +\r\n          (currentDependencyVersion ? `from \\`${currentDependencyVersion}\\` ` : '') +\r\n          `to \\`${newDependencyVersion}\\``\r\n      },\r\n      allChanges,\r\n      allPackages,\r\n      rushConfiguration\r\n    );\r\n  }\r\n}\r\n"]}