{"version":3,"file":"ChangelogGenerator.js","sourceRoot":"","sources":["../../src/logic/ChangelogGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\n\r\nimport { FileSystem, JsonFile } from '@rushstack/node-core-library';\r\n\r\nimport { PublishUtilities, IChangeInfoHash } from './PublishUtilities';\r\nimport { IChangeInfo, ChangeType } from '../api/ChangeManagement';\r\nimport { IChangelog, IChangeLogEntry, IChangeLogComment, IChangeLogEntryComments } from '../api/Changelog';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\n\r\nconst CHANGELOG_JSON: string = 'CHANGELOG.json';\r\nconst CHANGELOG_MD: string = 'CHANGELOG.md';\r\nconst EOL: string = '\\n';\r\n\r\nexport class ChangelogGenerator {\r\n  /**\r\n   * Updates the appropriate changelogs with the given changes.\r\n   */\r\n  public static updateChangelogs(\r\n    allChanges: IChangeInfoHash,\r\n    allProjects: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration,\r\n    shouldCommit: boolean\r\n  ): IChangelog[] {\r\n    const updatedChangeLogs: IChangelog[] = [];\r\n\r\n    for (const packageName in allChanges) {\r\n      if (allChanges.hasOwnProperty(packageName)) {\r\n        const project: RushConfigurationProject | undefined = allProjects.get(packageName);\r\n\r\n        if (project && ChangelogGenerator._shouldUpdateChangeLog(project, allChanges)) {\r\n          const changeLog: IChangelog | undefined = ChangelogGenerator.updateIndividualChangelog(\r\n            allChanges[packageName],\r\n            project.projectFolder,\r\n            shouldCommit,\r\n            rushConfiguration,\r\n            project.versionPolicy && project.versionPolicy.isLockstepped,\r\n            project.isMainProject\r\n          );\r\n\r\n          if (changeLog) {\r\n            updatedChangeLogs.push(changeLog);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return updatedChangeLogs;\r\n  }\r\n\r\n  /**\r\n   * Fully regenerate the markdown files based on the current json files.\r\n   */\r\n  public static regenerateChangelogs(\r\n    allProjects: Map<string, RushConfigurationProject>,\r\n    rushConfiguration: RushConfiguration\r\n  ): void {\r\n    allProjects.forEach((project) => {\r\n      const markdownPath: string = path.resolve(project.projectFolder, CHANGELOG_MD);\r\n      const markdownJSONPath: string = path.resolve(project.projectFolder, CHANGELOG_JSON);\r\n\r\n      if (FileSystem.exists(markdownPath)) {\r\n        console.log('Found: ' + markdownPath);\r\n        if (!FileSystem.exists(markdownJSONPath)) {\r\n          throw new Error('A CHANGELOG.md without json: ' + markdownPath);\r\n        }\r\n\r\n        const changelog: IChangelog = ChangelogGenerator._getChangelog(\r\n          project.packageName,\r\n          project.projectFolder\r\n        );\r\n        const isLockstepped: boolean = !!project.versionPolicy && project.versionPolicy.isLockstepped;\r\n\r\n        FileSystem.writeFile(\r\n          path.join(project.projectFolder, CHANGELOG_MD),\r\n          ChangelogGenerator._translateToMarkdown(changelog, rushConfiguration, isLockstepped)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates an individual changelog for a single project.\r\n   */\r\n  public static updateIndividualChangelog(\r\n    change: IChangeInfo,\r\n    projectFolder: string,\r\n    shouldCommit: boolean,\r\n    rushConfiguration: RushConfiguration,\r\n    isLockstepped: boolean = false,\r\n    isMain: boolean = true\r\n  ): IChangelog | undefined {\r\n    if (isLockstepped && !isMain) {\r\n      // Early return if the project is lockstepped and does not host change logs\r\n      return undefined;\r\n    }\r\n    const changelog: IChangelog = ChangelogGenerator._getChangelog(change.packageName, projectFolder);\r\n\r\n    if (!changelog.entries.some((entry) => entry.version === change.newVersion)) {\r\n      const changelogEntry: IChangeLogEntry = {\r\n        version: change.newVersion!,\r\n        tag: PublishUtilities.createTagname(change.packageName, change.newVersion!),\r\n        date: new Date().toUTCString(),\r\n        comments: {}\r\n      };\r\n\r\n      change.changes!.forEach((individualChange) => {\r\n        if (individualChange.comment) {\r\n          // Initialize the comments array only as necessary.\r\n          const changeTypeString: keyof IChangeLogEntryComments = ChangeType[\r\n            individualChange.changeType!\r\n          ] as keyof IChangeLogEntryComments;\r\n\r\n          changelogEntry.comments[changeTypeString] = changelogEntry.comments[changeTypeString] || [];\r\n          const comments: IChangeLogComment[] = changelogEntry.comments[changeTypeString]!;\r\n\r\n          const changeLogComment: IChangeLogComment = {\r\n            comment: individualChange.comment\r\n          };\r\n          if (individualChange.author) {\r\n            changeLogComment.author = individualChange.author;\r\n          }\r\n          if (individualChange.commit) {\r\n            changeLogComment.commit = individualChange.commit;\r\n          }\r\n          comments.push(changeLogComment);\r\n        }\r\n      });\r\n\r\n      // Add the changelog entry to the start of the list.\r\n      changelog.entries.unshift(changelogEntry);\r\n\r\n      const changelogFilename: string = path.join(projectFolder, CHANGELOG_JSON);\r\n\r\n      console.log(\r\n        `${EOL}* ${shouldCommit ? 'APPLYING' : 'DRYRUN'}: ` +\r\n          `Changelog update for \"${change.packageName}@${change.newVersion}\".`\r\n      );\r\n\r\n      if (shouldCommit) {\r\n        // Write markdown transform.\r\n        JsonFile.save(changelog, changelogFilename);\r\n\r\n        FileSystem.writeFile(\r\n          path.join(projectFolder, CHANGELOG_MD),\r\n          ChangelogGenerator._translateToMarkdown(changelog, rushConfiguration, isLockstepped)\r\n        );\r\n      }\r\n      return changelog;\r\n    }\r\n    // change log not updated.\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Loads the changelog json from disk, or creates a new one if there isn't one.\r\n   */\r\n  private static _getChangelog(packageName: string, projectFolder: string): IChangelog {\r\n    const changelogFilename: string = path.join(projectFolder, CHANGELOG_JSON);\r\n    let changelog: IChangelog | undefined = undefined;\r\n\r\n    // Try to read the existing changelog.\r\n    if (FileSystem.exists(changelogFilename)) {\r\n      changelog = JsonFile.load(changelogFilename);\r\n    }\r\n\r\n    if (!changelog) {\r\n      changelog = {\r\n        name: packageName,\r\n        entries: []\r\n      };\r\n    } else {\r\n      // Force the changelog name to be same as package name.\r\n      // In case the package has been renamed but change log name is not updated.\r\n      changelog.name = packageName;\r\n    }\r\n\r\n    return changelog;\r\n  }\r\n\r\n  /**\r\n   * Translates the given changelog json object into a markdown string.\r\n   */\r\n  private static _translateToMarkdown(\r\n    changelog: IChangelog,\r\n    rushConfiguration: RushConfiguration,\r\n    isLockstepped: boolean = false\r\n  ): string {\r\n    let markdown: string = [\r\n      `# Change Log - ${changelog.name}`,\r\n      '',\r\n      `This log was last generated on ${new Date().toUTCString()} and should not be manually modified.`,\r\n      '',\r\n      ''\r\n    ].join(EOL);\r\n\r\n    changelog.entries.forEach((entry, index) => {\r\n      markdown += `## ${entry.version}${EOL}`;\r\n\r\n      if (entry.date) {\r\n        markdown += `${entry.date}${EOL}`;\r\n      }\r\n\r\n      markdown += EOL;\r\n\r\n      let comments: string = '';\r\n\r\n      comments += ChangelogGenerator._getChangeComments('Breaking changes', entry.comments.major);\r\n\r\n      comments += ChangelogGenerator._getChangeComments('Minor changes', entry.comments.minor);\r\n\r\n      comments += ChangelogGenerator._getChangeComments('Patches', entry.comments.patch);\r\n\r\n      if (isLockstepped) {\r\n        // In lockstepped projects, all changes are of type ChangeType.none.\r\n        comments += ChangelogGenerator._getChangeComments('Updates', entry.comments.none);\r\n      }\r\n\r\n      if (rushConfiguration.hotfixChangeEnabled) {\r\n        comments += ChangelogGenerator._getChangeComments('Hotfixes', entry.comments.hotfix);\r\n      }\r\n\r\n      if (!comments) {\r\n        markdown +=\r\n          (changelog.entries.length === index + 1 ? '_Initial release_' : '_Version update only_') +\r\n          EOL +\r\n          EOL;\r\n      } else {\r\n        markdown += comments;\r\n      }\r\n    });\r\n\r\n    return markdown;\r\n  }\r\n\r\n  /**\r\n   * Helper to return the comments string to be appends to the markdown content.\r\n   */\r\n  private static _getChangeComments(title: string, commentsArray: IChangeLogComment[] | undefined): string {\r\n    let comments: string = '';\r\n\r\n    if (commentsArray) {\r\n      comments = `### ${title}${EOL + EOL}`;\r\n      commentsArray.forEach((comment) => {\r\n        comments += `- ${comment.comment}${EOL}`;\r\n      });\r\n      comments += EOL;\r\n    }\r\n\r\n    return comments;\r\n  }\r\n\r\n  /**\r\n   * Changelogs should only be generated for publishable projects.\r\n   * Do not update changelog or delete the change files for prerelease. Save them for the official release.\r\n   * Unless the package is a hotfix, in which case do delete the change files.\r\n   *\r\n   * @param project\r\n   * @param allChanges\r\n   */\r\n  private static _shouldUpdateChangeLog(\r\n    project: RushConfigurationProject,\r\n    allChanges: IChangeInfoHash\r\n  ): boolean {\r\n    return (\r\n      project.shouldPublish &&\r\n      (!semver.prerelease(project.packageJson.version) ||\r\n        allChanges[project.packageName].changeType === ChangeType.hotfix)\r\n    );\r\n  }\r\n}\r\n"]}