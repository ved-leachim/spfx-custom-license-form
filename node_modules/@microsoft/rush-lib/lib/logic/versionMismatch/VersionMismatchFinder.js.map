{"version":3,"file":"VersionMismatchFinder.js","sourceRoot":"","sources":["../../../src/logic/versionMismatch/VersionMismatchFinder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { PackageJsonDependency, DependencyType } from '../../api/PackageJsonEditor';\r\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\r\nimport { VersionMismatchFinderEntity } from './VersionMismatchFinderEntity';\r\nimport { VersionMismatchFinderProject } from './VersionMismatchFinderProject';\r\nimport { VersionMismatchFinderCommonVersions } from './VersionMismatchFinderCommonVersions';\r\n\r\nexport interface IVersionMismatchFinderRushCheckOptions {\r\n  variant?: string | undefined;\r\n  printAsJson?: boolean | undefined;\r\n}\r\n\r\nexport interface IVersionMismatchFinderEnsureConsistentVersionsOptions {\r\n  variant?: string | undefined;\r\n}\r\n\r\nexport interface IVersionMismatchFinderGetMismatchesOptions {\r\n  variant?: string | undefined;\r\n}\r\n\r\nexport interface IMismatchDependency {\r\n  dependencyName: string;\r\n  versions: IMismatchDependencyVersion[];\r\n}\r\n\r\nexport interface IMismatchDependencyVersion {\r\n  version: string;\r\n  projects: string[];\r\n}\r\n\r\nexport interface IMismatchDependencies {\r\n  mismatchedVersions: IMismatchDependency[];\r\n}\r\n\r\nexport class VersionMismatchFinder {\r\n  /* store it like this:\r\n   * {\r\n   *   \"@types/node\": {\r\n   *     \"1.0.0\": [ '@ms/rush' ]\r\n   *   }\r\n   * }\r\n   */\r\n  private _allowedAlternativeVersion: Map<string, ReadonlyArray<string>>;\r\n  private _mismatches: Map<string, Map<string, VersionMismatchFinderEntity[]>>;\r\n  private _projects: VersionMismatchFinderEntity[];\r\n\r\n  public constructor(\r\n    projects: VersionMismatchFinderEntity[],\r\n    allowedAlternativeVersions?: Map<string, ReadonlyArray<string>>\r\n  ) {\r\n    this._projects = projects;\r\n    this._mismatches = new Map<string, Map<string, VersionMismatchFinderEntity[]>>();\r\n    this._allowedAlternativeVersion = allowedAlternativeVersions || new Map<string, ReadonlyArray<string>>();\r\n    this._analyze();\r\n  }\r\n\r\n  public static rushCheck(\r\n    rushConfiguration: RushConfiguration,\r\n    options: IVersionMismatchFinderRushCheckOptions = {}\r\n  ): void {\r\n    VersionMismatchFinder._checkForInconsistentVersions(rushConfiguration, {\r\n      ...options,\r\n      isRushCheckCommand: true\r\n    });\r\n  }\r\n\r\n  public static ensureConsistentVersions(\r\n    rushConfiguration: RushConfiguration,\r\n    options: IVersionMismatchFinderEnsureConsistentVersionsOptions = {}\r\n  ): void {\r\n    VersionMismatchFinder._checkForInconsistentVersions(rushConfiguration, {\r\n      ...options,\r\n      isRushCheckCommand: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Populates a version mismatch finder object given a Rush Configuration.\r\n   * Intentionally considers preferred versions.\r\n   */\r\n  public static getMismatches(\r\n    rushConfiguration: RushConfiguration,\r\n    options: IVersionMismatchFinderRushCheckOptions = {}\r\n  ): VersionMismatchFinder {\r\n    const commonVersions: CommonVersionsConfiguration = rushConfiguration.getCommonVersions(options.variant);\r\n\r\n    const projects: VersionMismatchFinderEntity[] = rushConfiguration.projects.map((project) => {\r\n      return new VersionMismatchFinderProject(project);\r\n    });\r\n\r\n    // Create an object for the purposes of reporting conflicts with preferredVersions\r\n    // or xstitchPreferredVersions from common-versions.json\r\n    projects.push(new VersionMismatchFinderCommonVersions(commonVersions));\r\n\r\n    return new VersionMismatchFinder(projects, commonVersions.allowedAlternativeVersions);\r\n  }\r\n\r\n  private static _checkForInconsistentVersions(\r\n    rushConfiguration: RushConfiguration,\r\n    options: {\r\n      isRushCheckCommand: boolean;\r\n      variant?: string | undefined;\r\n      printAsJson?: boolean | undefined;\r\n    }\r\n  ): void {\r\n    if (rushConfiguration.ensureConsistentVersions || options.isRushCheckCommand) {\r\n      const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(\r\n        rushConfiguration,\r\n        options\r\n      );\r\n\r\n      if (options.printAsJson) {\r\n        mismatchFinder.printAsJson();\r\n      } else {\r\n        mismatchFinder.print();\r\n\r\n        if (mismatchFinder.numberOfMismatches > 0) {\r\n          console.log(colors.red(`Found ${mismatchFinder.numberOfMismatches} mis-matching dependencies!`));\r\n          throw new AlreadyReportedError();\r\n        } else {\r\n          if (options.isRushCheckCommand) {\r\n            console.log(colors.green(`Found no mis-matching dependencies!`));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public get numberOfMismatches(): number {\r\n    return this._mismatches.size;\r\n  }\r\n\r\n  public getMismatches(): string[] {\r\n    return this._getKeys(this._mismatches);\r\n  }\r\n\r\n  public getVersionsOfMismatch(mismatch: string): string[] | undefined {\r\n    return this._mismatches.has(mismatch) ? this._getKeys(this._mismatches.get(mismatch)) : undefined;\r\n  }\r\n\r\n  public getConsumersOfMismatch(\r\n    mismatch: string,\r\n    version: string\r\n  ): VersionMismatchFinderEntity[] | undefined {\r\n    const mismatchedPackage: Map<string, VersionMismatchFinderEntity[]> | undefined = this._mismatches.get(\r\n      mismatch\r\n    );\r\n    if (!mismatchedPackage) {\r\n      return undefined;\r\n    }\r\n\r\n    const mismatchedVersion: VersionMismatchFinderEntity[] | undefined = mismatchedPackage.get(version);\r\n    return mismatchedVersion;\r\n  }\r\n\r\n  public printAsJson(): void {\r\n    const mismatchDependencies: IMismatchDependency[] = [];\r\n\r\n    this.getMismatches().forEach((dependency: string) => {\r\n      const mismatchDependencyVersionArray: IMismatchDependencyVersion[] = [];\r\n      this.getVersionsOfMismatch(dependency)!.forEach((version: string) => {\r\n        const projects: string[] = [];\r\n        this.getConsumersOfMismatch(dependency, version)!.forEach((project: VersionMismatchFinderEntity) => {\r\n          projects.push(project.friendlyName);\r\n        });\r\n        const mismatchDependencyVersion: IMismatchDependencyVersion = {\r\n          version: version,\r\n          projects: projects\r\n        };\r\n        mismatchDependencyVersionArray.push(mismatchDependencyVersion);\r\n      });\r\n      const mismatchDependency: IMismatchDependency = {\r\n        dependencyName: dependency,\r\n        versions: mismatchDependencyVersionArray\r\n      };\r\n      mismatchDependencies.push(mismatchDependency);\r\n    });\r\n\r\n    const output: IMismatchDependencies = {\r\n      mismatchedVersions: mismatchDependencies\r\n    };\r\n\r\n    console.log(JSON.stringify(output, undefined, 2));\r\n  }\r\n\r\n  public print(): void {\r\n    // Iterate over the list. For any dependency with mismatching versions, print the projects\r\n    this.getMismatches().forEach((dependency: string) => {\r\n      console.log(colors.yellow(dependency));\r\n      this.getVersionsOfMismatch(dependency)!.forEach((version: string) => {\r\n        console.log(`  ${version}`);\r\n        this.getConsumersOfMismatch(dependency, version)!.forEach((project: VersionMismatchFinderEntity) => {\r\n          console.log(`   - ${project.friendlyName}`);\r\n        });\r\n      });\r\n      console.log();\r\n    });\r\n  }\r\n\r\n  private _analyze(): void {\r\n    this._projects.forEach((project: VersionMismatchFinderEntity) => {\r\n      if (!project.skipRushCheck) {\r\n        // NOTE: We do not consider peer dependencies here.  The purpose of \"rush check\" is\r\n        // mainly to avoid side-by-side duplicates in the node_modules folder, whereas\r\n        // peer dependencies are just a compatibility statement that will be satisfied by a\r\n        // regular dependency.  (It might be useful for Rush to help people keep their peer dependency\r\n        // patterns consistent, but on the other hand different projects may have different\r\n        // levels of compatibility -- we should wait for someone to actually request this feature\r\n        // before we get into that.)\r\n        project.allDependencies.forEach((dependency: PackageJsonDependency) => {\r\n          if (dependency.dependencyType !== DependencyType.Peer) {\r\n            const version: string = dependency.version!;\r\n\r\n            const isCyclic: boolean = project.cyclicDependencyProjects.has(dependency.name);\r\n\r\n            if (this._isVersionAllowedAlternative(dependency.name, version)) {\r\n              return;\r\n            }\r\n\r\n            const name: string = dependency.name + (isCyclic ? ' (cyclic)' : '');\r\n\r\n            if (!this._mismatches.has(name)) {\r\n              this._mismatches.set(name, new Map<string, VersionMismatchFinderEntity[]>());\r\n            }\r\n\r\n            const dependencyVersions: Map<string, VersionMismatchFinderEntity[]> = this._mismatches.get(\r\n              name\r\n            )!;\r\n\r\n            if (!dependencyVersions.has(version)) {\r\n              dependencyVersions.set(version, []);\r\n            }\r\n\r\n            dependencyVersions.get(version)!.push(project);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    this._mismatches.forEach((mismatches: Map<string, VersionMismatchFinderEntity[]>, project: string) => {\r\n      if (mismatches.size <= 1) {\r\n        this._mismatches.delete(project);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _isVersionAllowedAlternative(dependency: string, version: string): boolean {\r\n    const allowedAlternatives: ReadonlyArray<string> | undefined = this._allowedAlternativeVersion.get(\r\n      dependency\r\n    );\r\n    return Boolean(allowedAlternatives && allowedAlternatives.indexOf(version) > -1);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  private _getKeys(iterable: Map<string, any> | undefined): string[] {\r\n    const keys: string[] = [];\r\n    if (iterable) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      iterable.forEach((value: any, key: string) => {\r\n        keys.push(key);\r\n      });\r\n    }\r\n    return keys;\r\n  }\r\n}\r\n"]}