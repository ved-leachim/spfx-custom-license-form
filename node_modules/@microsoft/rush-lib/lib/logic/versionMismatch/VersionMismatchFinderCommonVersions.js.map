{"version":3,"file":"VersionMismatchFinderCommonVersions.js","sourceRoot":"","sources":["../../../src/logic/versionMismatch/VersionMismatchFinderCommonVersions.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oDAAiD;AACjD,mEAAoF;AAEpF,+EAA4E;AAE5E,MAAa,mCAAoC,SAAQ,yDAA2B;IAGlF,YAAmB,2BAAwD;QACzE,KAAK,CAAC;YACJ,YAAY,EAAE,2BAA2B,6BAAa,CAAC,sBAAsB,EAAE;YAC/E,wBAAwB,EAAE,IAAI,GAAG,EAAU;SAC5C,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,GAAG,2BAA2B,CAAC;IAClD,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;IACpC,CAAC;IAED,IAAW,eAAe;QACxB,MAAM,YAAY,GAA4B,EAAE,CAAC;QAEjD,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,cAAc,EAAE,EAAE;YAC9E,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAEM,gBAAgB,CAAC,WAAmB;QACzC,MAAM,OAAO,GAAuB,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjG,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,SAAS,CAAC;SAClB;aAAM;YACL,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SAC7D;IACH,CAAC;IAEM,mBAAmB,CAAC,WAAmB;QAC5C,OAAO,SAAS,CAAC,CAAC,uFAAuF;IAC3G,CAAC;IAEM,qBAAqB,CAC1B,WAAmB,EACnB,UAAkB,EAClB,cAA8B;QAE9B,IAAI,cAAc,iCAA2B,EAAE;YAC7C,MAAM,IAAI,KAAK,CACb,GAAG,6BAAa,CAAC,sBAAsB,kBAAkB,4BAAsB,gBAAgB,CAChG,CAAC;SACH;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;YAC/D,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;SACzE;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;SAClE;IACH,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAClC,CAAC;IAEO,yBAAyB,CAAC,cAAsB,EAAE,OAAe;QACvE,OAAO,IAAI,yCAAqB,CAAC,cAAc,EAAE,OAAO,gCAA0B,GAAG,EAAE,CACrF,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,OAAO,+BAAyB,CAC5E,CAAC;IACJ,CAAC;CACF;AAlED,kFAkEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { RushConstants } from '../RushConstants';\r\nimport { PackageJsonDependency, DependencyType } from '../../api/PackageJsonEditor';\r\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\r\nimport { VersionMismatchFinderEntity } from './VersionMismatchFinderEntity';\r\n\r\nexport class VersionMismatchFinderCommonVersions extends VersionMismatchFinderEntity {\r\n  private _fileManager: CommonVersionsConfiguration;\r\n\r\n  public constructor(commonVersionsConfiguration: CommonVersionsConfiguration) {\r\n    super({\r\n      friendlyName: `preferred versions from ${RushConstants.commonVersionsFilename}`,\r\n      cyclicDependencyProjects: new Set<string>()\r\n    });\r\n\r\n    this._fileManager = commonVersionsConfiguration;\r\n  }\r\n\r\n  public get filePath(): string {\r\n    return this._fileManager.filePath;\r\n  }\r\n\r\n  public get allDependencies(): ReadonlyArray<PackageJsonDependency> {\r\n    const dependencies: PackageJsonDependency[] = [];\r\n\r\n    this._fileManager.getAllPreferredVersions().forEach((version, dependencyName) => {\r\n      dependencies.push(this._getPackageJsonDependency(dependencyName, version));\r\n    });\r\n\r\n    return dependencies;\r\n  }\r\n\r\n  public tryGetDependency(packageName: string): PackageJsonDependency | undefined {\r\n    const version: string | undefined = this._fileManager.getAllPreferredVersions().get(packageName);\r\n    if (!version) {\r\n      return undefined;\r\n    } else {\r\n      return this._getPackageJsonDependency(packageName, version);\r\n    }\r\n  }\r\n\r\n  public tryGetDevDependency(packageName: string): PackageJsonDependency | undefined {\r\n    return undefined; // common-versions.json doesn't have a distinction between dev and non-dev dependencies\r\n  }\r\n\r\n  public addOrUpdateDependency(\r\n    packageName: string,\r\n    newVersion: string,\r\n    dependencyType: DependencyType\r\n  ): void {\r\n    if (dependencyType !== DependencyType.Regular) {\r\n      throw new Error(\r\n        `${RushConstants.commonVersionsFilename} only accepts \"${DependencyType.Regular}\" dependencies`\r\n      );\r\n    }\r\n\r\n    if (this._fileManager.xstitchPreferredVersions.has(packageName)) {\r\n      this._fileManager.xstitchPreferredVersions.set(packageName, newVersion);\r\n    } else {\r\n      this._fileManager.preferredVersions.set(packageName, newVersion);\r\n    }\r\n  }\r\n\r\n  public saveIfModified(): boolean {\r\n    return this._fileManager.save();\r\n  }\r\n\r\n  private _getPackageJsonDependency(dependencyName: string, version: string): PackageJsonDependency {\r\n    return new PackageJsonDependency(dependencyName, version, DependencyType.Regular, () =>\r\n      this.addOrUpdateDependency(dependencyName, version, DependencyType.Regular)\r\n    );\r\n  }\r\n}\r\n"]}