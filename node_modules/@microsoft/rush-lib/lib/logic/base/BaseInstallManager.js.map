{"version":3,"file":"BaseInstallManager.js","sourceRoot":"","sources":["../../../src/logic/base/BaseInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as fetch from 'node-fetch';\r\nimport * as fs from 'fs';\r\nimport * as http from 'http';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport {\r\n  FileSystem,\r\n  JsonFile,\r\n  PosixModeBits,\r\n  NewlineKind,\r\n  AlreadyReportedError,\r\n  Import\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { ApprovedPackagesChecker } from '../ApprovedPackagesChecker';\r\nimport { AsyncRecycler } from '../../utilities/AsyncRecycler';\r\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\r\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\r\nimport { Git } from '../Git';\r\nimport { LastInstallFlag, LastInstallFlagFactory } from '../../api/LastInstallFlag';\r\nimport { LastLinkFlag, LastLinkFlagFactory } from '../../api/LastLinkFlag';\r\nimport { PnpmPackageManager } from '../../api/packageManager/PnpmPackageManager';\r\nimport { PurgeManager } from '../PurgeManager';\r\nimport { RushConfiguration, ICurrentVariantJson } from '../../api/RushConfiguration';\r\nimport { Rush } from '../../api/Rush';\r\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\r\nimport { RushConstants } from '../RushConstants';\r\nimport { ShrinkwrapFileFactory } from '../ShrinkwrapFileFactory';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { InstallHelpers } from '../installManager/InstallHelpers';\r\nimport { PolicyValidator } from '../policy/PolicyValidator';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\n\r\nconst HttpsProxyAgent: typeof import('https-proxy-agent') = Import.lazy('https-proxy-agent', require);\r\n\r\nexport interface IInstallManagerOptions {\r\n  /**\r\n   * Whether the global \"--debug\" flag was specified.\r\n   */\r\n  debug: boolean;\r\n\r\n  /**\r\n   * Whether or not Rush will automatically update the shrinkwrap file.\r\n   * True for \"rush update\", false for \"rush install\".\r\n   */\r\n  allowShrinkwrapUpdates: boolean;\r\n\r\n  /**\r\n   * Whether to skip policy checks.\r\n   */\r\n  bypassPolicy: boolean;\r\n\r\n  /**\r\n   * Whether to skip linking, i.e. require \"rush link\" to be done manually later.\r\n   */\r\n  noLink: boolean;\r\n\r\n  /**\r\n   * Whether to delete the shrinkwrap file before installation, i.e. so that all dependencies\r\n   * will be upgraded to the latest SemVer-compatible version.\r\n   */\r\n  fullUpgrade: boolean;\r\n\r\n  /**\r\n   * Whether to force an update to the shrinkwrap file even if it appears to be unnecessary.\r\n   * Normally Rush uses heuristics to determine when \"pnpm install\" can be skipped,\r\n   * but sometimes the heuristics can be inaccurate due to external influences\r\n   * (pnpmfile.js script logic, registry changes, etc).\r\n   */\r\n  recheckShrinkwrap: boolean;\r\n\r\n  /**\r\n   * The value of the \"--network-concurrency\" command-line parameter, which\r\n   * is a diagnostic option used to troubleshoot network failures.\r\n   *\r\n   * Currently only supported for PNPM.\r\n   */\r\n  networkConcurrency: number | undefined;\r\n\r\n  /**\r\n   * Whether or not to collect verbose logs from the package manager.\r\n   * If specified when using PNPM, the logs will be in /common/temp/pnpm.log\r\n   */\r\n  collectLogFile: boolean;\r\n\r\n  /**\r\n   * The variant to consider when performing installations and validating shrinkwrap updates.\r\n   */\r\n  variant?: string | undefined;\r\n\r\n  /**\r\n   * Retry the install the specified number of times\r\n   */\r\n  maxInstallAttempts: number;\r\n\r\n  /**\r\n   * The list of projects that should be installed, along with project dependencies.\r\n   */\r\n  toProjects: ReadonlyArray<RushConfigurationProject>;\r\n}\r\n\r\n/**\r\n * This class implements common logic between \"rush install\" and \"rush update\".\r\n */\r\nexport abstract class BaseInstallManager {\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _rushGlobalFolder: RushGlobalFolder;\r\n  private _commonTempInstallFlag: LastInstallFlag;\r\n  private _commonTempLinkFlag: LastLinkFlag;\r\n  private _installRecycler: AsyncRecycler;\r\n\r\n  private _options: IInstallManagerOptions;\r\n\r\n  public constructor(\r\n    rushConfiguration: RushConfiguration,\r\n    rushGlobalFolder: RushGlobalFolder,\r\n    purgeManager: PurgeManager,\r\n    options: IInstallManagerOptions\r\n  ) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._rushGlobalFolder = rushGlobalFolder;\r\n    this._installRecycler = purgeManager.commonTempFolderRecycler;\r\n    this._options = options;\r\n\r\n    this._commonTempInstallFlag = LastInstallFlagFactory.getCommonTempFlag(rushConfiguration);\r\n    this._commonTempLinkFlag = LastLinkFlagFactory.getCommonTempFlag(rushConfiguration);\r\n  }\r\n\r\n  protected get rushConfiguration(): RushConfiguration {\r\n    return this._rushConfiguration;\r\n  }\r\n\r\n  protected get rushGlobalFolder(): RushGlobalFolder {\r\n    return this._rushGlobalFolder;\r\n  }\r\n\r\n  protected get installRecycler(): AsyncRecycler {\r\n    return this._installRecycler;\r\n  }\r\n\r\n  protected get options(): IInstallManagerOptions {\r\n    return this._options;\r\n  }\r\n\r\n  public async doInstall(): Promise<void> {\r\n    const isFilteredInstall: boolean = this.options.toProjects.length > 0;\r\n    const useWorkspaces: boolean =\r\n      this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\r\n\r\n    // Prevent filtered installs when workspaces is disabled\r\n    if (isFilteredInstall && !useWorkspaces) {\r\n      console.log();\r\n      console.log(\r\n        colors.red(\r\n          'Project filtering arguments can only be used when running in a workspace environment. Run the ' +\r\n            'command again without specifying these arguments.'\r\n        )\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    // Prevent update when using a filter, as modifications to the shrinkwrap shouldn't be saved\r\n    if (this.options.allowShrinkwrapUpdates && isFilteredInstall) {\r\n      console.log();\r\n      console.log(\r\n        colors.red(\r\n          'Project filtering arguments cannot be used when running \"rush update\". Run the command again ' +\r\n            'without specifying these arguments.'\r\n        )\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    const { shrinkwrapIsUpToDate, variantIsUpToDate } = await this.prepareAsync();\r\n\r\n    // This marker file indicates that the last \"rush install\" completed successfully.\r\n    // Always perform a clean install if filter flags were provided. Additionally, if\r\n    // \"--purge\" was specified, or if the last install was interrupted, then we will\r\n    // need to perform a clean install.  Otherwise, we can do an incremental install.\r\n    const cleanInstall: boolean =\r\n      isFilteredInstall || !this._commonTempInstallFlag.checkValidAndReportStoreIssues();\r\n\r\n    // Allow us to defer the file read until we need it\r\n    const canSkipInstall: () => boolean = () => {\r\n      // Based on timestamps, can we skip this install entirely?\r\n      const outputStats: fs.Stats = FileSystem.getStatistics(this._commonTempInstallFlag.path);\r\n      return this.canSkipInstall(outputStats.mtime);\r\n    };\r\n\r\n    if (cleanInstall || !shrinkwrapIsUpToDate || !variantIsUpToDate || !canSkipInstall()) {\r\n      let publishedRelease: boolean | undefined;\r\n      try {\r\n        publishedRelease = await this._checkIfReleaseIsPublished();\r\n      } catch {\r\n        // If the user is working in an environment that can't reach the registry,\r\n        // don't bother them with errors.\r\n      }\r\n\r\n      if (publishedRelease === false) {\r\n        console.log(\r\n          colors.yellow('Warning: This release of the Rush tool was unpublished; it may be unstable.')\r\n        );\r\n      }\r\n\r\n      // Delete the successful install file to indicate the install transaction has started\r\n      this._commonTempInstallFlag.clear();\r\n\r\n      // Since we're going to be tampering with common/node_modules, delete the \"rush link\" flag file if it exists;\r\n      // this ensures that a full \"rush link\" is required next time\r\n      this._commonTempLinkFlag.clear();\r\n\r\n      // Perform the actual install\r\n      await this.installAsync(cleanInstall);\r\n\r\n      const usePnpmFrozenLockfile: boolean =\r\n        this._rushConfiguration.packageManager === 'pnpm' &&\r\n        this._rushConfiguration.experimentsConfiguration.configuration.usePnpmFrozenLockfileForRushInstall ===\r\n          true;\r\n\r\n      if (this.options.allowShrinkwrapUpdates && (usePnpmFrozenLockfile || !shrinkwrapIsUpToDate)) {\r\n        // Copy (or delete) common\\temp\\pnpm-lock.yaml --> common\\config\\rush\\pnpm-lock.yaml\r\n        Utilities.syncFile(\r\n          this._rushConfiguration.tempShrinkwrapFilename,\r\n          this._rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant)\r\n        );\r\n      } else {\r\n        // TODO: Validate whether the package manager updated it in a nontrivial way\r\n      }\r\n\r\n      // Always update the state file if running \"rush update\"\r\n      if (this.options.allowShrinkwrapUpdates) {\r\n        if (this.rushConfiguration.getRepoState(this.options.variant).refreshState(this.rushConfiguration)) {\r\n          console.log(\r\n            colors.yellow(\r\n              `${RushConstants.repoStateFilename} has been modified and must be committed to source control.`\r\n            )\r\n          );\r\n        }\r\n      }\r\n\r\n      // Create the marker file to indicate a successful install if it's not a filtered install\r\n      if (!isFilteredInstall) {\r\n        this._commonTempInstallFlag.create();\r\n      }\r\n    }\r\n\r\n    // Perform any post-install work the install manager requires\r\n    await this.postInstallAsync();\r\n\r\n    console.log('');\r\n  }\r\n\r\n  protected abstract prepareCommonTempAsync(\r\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\r\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }>;\r\n\r\n  protected abstract canSkipInstall(lastInstallDate: Date): boolean;\r\n\r\n  protected abstract installAsync(cleanInstall: boolean): Promise<void>;\r\n\r\n  protected abstract postInstallAsync(): Promise<void>;\r\n\r\n  protected async prepareAsync(): Promise<{ variantIsUpToDate: boolean; shrinkwrapIsUpToDate: boolean }> {\r\n    // Check the policies\r\n    PolicyValidator.validatePolicy(this._rushConfiguration, this.options);\r\n\r\n    // Git hooks are only installed if the repo opts in by including files in /common/git-hooks\r\n    const hookSource: string = path.join(this._rushConfiguration.commonFolder, 'git-hooks');\r\n    const git: Git = new Git(this.rushConfiguration);\r\n    const hookDestination: string | undefined = git.getHooksFolder();\r\n\r\n    if (FileSystem.exists(hookSource) && hookDestination) {\r\n      const allHookFilenames: string[] = FileSystem.readFolder(hookSource);\r\n      // Ignore the \".sample\" file(s) in this folder.\r\n      const hookFilenames: string[] = allHookFilenames.filter((x) => !/\\.sample$/.test(x));\r\n      if (hookFilenames.length > 0) {\r\n        console.log(os.EOL + colors.bold('Found files in the \"common/git-hooks\" folder.'));\r\n\r\n        // Clear the currently installed git hooks and install fresh copies\r\n        FileSystem.ensureEmptyFolder(hookDestination);\r\n\r\n        // Only copy files that look like Git hook names\r\n        const filteredHookFilenames: string[] = hookFilenames.filter((x) => /^[a-z\\-]+/.test(x));\r\n        for (const filename of filteredHookFilenames) {\r\n          // Copy the file.  Important: For Bash scripts, the EOL must not be CRLF.\r\n          const hookFileContent: string = FileSystem.readFile(path.join(hookSource, filename));\r\n          FileSystem.writeFile(path.join(hookDestination, filename), hookFileContent, {\r\n            convertLineEndings: NewlineKind.Lf\r\n          });\r\n\r\n          FileSystem.changePosixModeBits(\r\n            path.join(hookDestination, filename),\r\n            // eslint-disable-next-line no-bitwise\r\n            PosixModeBits.UserRead | PosixModeBits.UserExecute\r\n          );\r\n        }\r\n\r\n        console.log(\r\n          'Successfully installed these Git hook scripts: ' + filteredHookFilenames.join(', ') + os.EOL\r\n        );\r\n      }\r\n    }\r\n\r\n    const approvedPackagesChecker: ApprovedPackagesChecker = new ApprovedPackagesChecker(\r\n      this._rushConfiguration\r\n    );\r\n    if (approvedPackagesChecker.approvedPackagesFilesAreOutOfDate) {\r\n      if (this._options.allowShrinkwrapUpdates) {\r\n        approvedPackagesChecker.rewriteConfigFiles();\r\n        console.log(\r\n          colors.yellow(\r\n            'Approved package files have been updated. These updates should be committed to source control'\r\n          )\r\n        );\r\n      } else {\r\n        throw new Error(`Approved packages files are out-of date. Run \"rush update\" to update them.`);\r\n      }\r\n    }\r\n\r\n    // Ensure that the package manager is installed\r\n    await InstallHelpers.ensureLocalPackageManager(\r\n      this._rushConfiguration,\r\n      this._rushGlobalFolder,\r\n      this._options.maxInstallAttempts\r\n    );\r\n\r\n    let shrinkwrapFile: BaseShrinkwrapFile | undefined = undefined;\r\n\r\n    // (If it's a full update, then we ignore the shrinkwrap from Git since it will be overwritten)\r\n    if (!this.options.fullUpgrade) {\r\n      try {\r\n        shrinkwrapFile = ShrinkwrapFileFactory.getShrinkwrapFile(\r\n          this._rushConfiguration.packageManager,\r\n          this._rushConfiguration.packageManagerOptions,\r\n          this._rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant)\r\n        );\r\n      } catch (ex) {\r\n        console.log();\r\n        console.log(`Unable to load the ${this._rushConfiguration.shrinkwrapFilePhrase}: ${ex.message}`);\r\n\r\n        if (!this.options.allowShrinkwrapUpdates) {\r\n          console.log();\r\n          console.log(colors.red('You need to run \"rush update\" to fix this problem'));\r\n          throw new AlreadyReportedError();\r\n        }\r\n\r\n        shrinkwrapFile = undefined;\r\n      }\r\n    }\r\n\r\n    // Write a file indicating which variant is being installed.\r\n    // This will be used by bulk scripts to determine the correct Shrinkwrap file to track.\r\n    const currentVariantJsonFilename: string = this._rushConfiguration.currentVariantJsonFilename;\r\n    const currentVariantJson: ICurrentVariantJson = {\r\n      variant: this.options.variant || null\r\n    };\r\n\r\n    // Determine if the variant is already current by updating current-variant.json.\r\n    // If nothing is written, the variant has not changed.\r\n    const variantIsUpToDate: boolean = !JsonFile.save(currentVariantJson, currentVariantJsonFilename, {\r\n      onlyIfChanged: true\r\n    });\r\n\r\n    if (this.options.variant) {\r\n      console.log();\r\n      console.log(colors.bold(`Using variant '${this.options.variant}' for installation.`));\r\n    } else if (!variantIsUpToDate && !this.options.variant) {\r\n      console.log();\r\n      console.log(colors.bold('Using the default variant for installation.'));\r\n    }\r\n\r\n    // Also copy down the committed .npmrc file, if there is one\r\n    // \"common\\config\\rush\\.npmrc\" --> \"common\\temp\\.npmrc\"\r\n    // Also ensure that we remove any old one that may be hanging around\r\n    Utilities.syncNpmrc(\r\n      this._rushConfiguration.commonRushConfigFolder,\r\n      this._rushConfiguration.commonTempFolder\r\n    );\r\n\r\n    // also, copy the pnpmfile.js if it exists\r\n    if (this._rushConfiguration.packageManager === 'pnpm') {\r\n      const committedPnpmFilePath: string = this._rushConfiguration.getPnpmfilePath(this._options.variant);\r\n      const tempPnpmFilePath: string = path.join(\r\n        this._rushConfiguration.commonTempFolder,\r\n        RushConstants.pnpmfileFilename\r\n      );\r\n\r\n      // ensure that we remove any old one that may be hanging around\r\n      Utilities.syncFile(committedPnpmFilePath, tempPnpmFilePath);\r\n    }\r\n\r\n    // Allow for package managers to do their own preparation and check that the shrinkwrap is up to date\r\n    // eslint-disable-next-line prefer-const\r\n    let { shrinkwrapIsUpToDate, shrinkwrapWarnings } = await this.prepareCommonTempAsync(shrinkwrapFile);\r\n    shrinkwrapIsUpToDate = shrinkwrapIsUpToDate && !this.options.recheckShrinkwrap;\r\n\r\n    // Write out the reported warnings\r\n    if (shrinkwrapWarnings.length > 0) {\r\n      console.log();\r\n      console.log(\r\n        colors.yellow(\r\n          Utilities.wrapWords(\r\n            `The ${this.rushConfiguration.shrinkwrapFilePhrase} contains the following issues:`\r\n          )\r\n        )\r\n      );\r\n\r\n      for (const shrinkwrapWarning of shrinkwrapWarnings) {\r\n        console.log(colors.yellow('  ' + shrinkwrapWarning));\r\n      }\r\n      console.log();\r\n    }\r\n\r\n    this._syncTempShrinkwrap(shrinkwrapFile);\r\n\r\n    // Force update if the shrinkwrap is out of date\r\n    if (!shrinkwrapIsUpToDate) {\r\n      if (!this.options.allowShrinkwrapUpdates) {\r\n        console.log();\r\n        console.log(\r\n          colors.red(\r\n            `The ${this.rushConfiguration.shrinkwrapFilePhrase} is out of date. You need to run \"rush update\".`\r\n          )\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n    }\r\n\r\n    return { shrinkwrapIsUpToDate, variantIsUpToDate };\r\n  }\r\n\r\n  /**\r\n   * Used when invoking the NPM tool.  Appends the common configuration options\r\n   * to the command-line.\r\n   */\r\n  protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void {\r\n    if (this._rushConfiguration.packageManager === 'npm') {\r\n      if (semver.lt(this._rushConfiguration.packageManagerToolVersion, '5.0.0')) {\r\n        // NOTE:\r\n        //\r\n        // When using an npm version older than v5.0.0, we do NOT install optional dependencies for\r\n        // Rush, because npm does not generate the shrinkwrap file consistently across platforms.\r\n        //\r\n        // Consider the \"fsevents\" package. This is a Mac specific package\r\n        // which is an optional second-order dependency. Optional dependencies work by attempting to install\r\n        // the package, but removes the package if the install failed.\r\n        // This means that someone running generate on a Mac WILL have fsevents included in their shrinkwrap.\r\n        // When someone using Windows attempts to install from the shrinkwrap, the install will fail.\r\n        //\r\n        // If someone generates the shrinkwrap using Windows, then fsevents will NOT be listed in the shrinkwrap.\r\n        // When someone using Mac attempts to install from the shrinkwrap, they will NOT have the\r\n        // optional dependency installed.\r\n        //\r\n        // This issue has been fixed as of npm v5.0.0: https://github.com/npm/npm/releases/tag/v5.0.0\r\n        //\r\n        // For more context, see https://github.com/microsoft/rushstack/issues/761#issuecomment-428689600\r\n        args.push('--no-optional');\r\n      }\r\n      args.push('--cache', this._rushConfiguration.npmCacheFolder);\r\n      args.push('--tmp', this._rushConfiguration.npmTmpFolder);\r\n\r\n      if (options.collectLogFile) {\r\n        args.push('--verbose');\r\n      }\r\n    } else if (this._rushConfiguration.packageManager === 'pnpm') {\r\n      // Only explicitly define the store path if `pnpmStore` is using the default, or has been set to\r\n      // 'local'.  If `pnpmStore` = 'global', then allow PNPM to use the system's default\r\n      // path.  In all cases, this will be overridden by RUSH_PNPM_STORE_PATH\r\n      if (\r\n        this._rushConfiguration.pnpmOptions.pnpmStore === 'local' ||\r\n        EnvironmentConfiguration.pnpmStorePathOverride\r\n      ) {\r\n        args.push('--store', this._rushConfiguration.pnpmOptions.pnpmStorePath);\r\n      }\r\n\r\n      // we are using the --no-lock flag for now, which unfortunately prints a warning, but should be OK\r\n      // since rush already has its own install lock file which will invalidate the cache for us.\r\n      // we theoretically could use the lock file, but we would need to clean the store if the\r\n      // lockfile existed, otherwise PNPM would hang indefinitely. it is simpler to rely on Rush's\r\n      // last install flag, which encapsulates the entire installation\r\n\r\n      // This setting was removed in 5.0.0. See https://github.com/pnpm/pnpm/releases/tag/v5.0.0\r\n      if (semver.lt(this._rushConfiguration.packageManagerToolVersion, '5.0.0')) {\r\n        args.push('--no-lock');\r\n      }\r\n\r\n      if (\r\n        this._rushConfiguration.experimentsConfiguration.configuration.usePnpmFrozenLockfileForRushInstall &&\r\n        !this._options.allowShrinkwrapUpdates\r\n      ) {\r\n        if (semver.gte(this._rushConfiguration.packageManagerToolVersion, '3.0.0')) {\r\n          args.push('--frozen-lockfile');\r\n        } else {\r\n          args.push('--frozen-shrinkwrap');\r\n        }\r\n      } else {\r\n        // Ensure that Rush's tarball dependencies get synchronized properly with the pnpm-lock.yaml file.\r\n        // See this GitHub issue: https://github.com/pnpm/pnpm/issues/1342\r\n        if (semver.gte(this._rushConfiguration.packageManagerToolVersion, '3.0.0')) {\r\n          args.push('--no-prefer-frozen-lockfile');\r\n        } else {\r\n          args.push('--no-prefer-frozen-shrinkwrap');\r\n        }\r\n      }\r\n\r\n      if (options.collectLogFile) {\r\n        args.push('--reporter', 'ndjson');\r\n      }\r\n\r\n      if (options.networkConcurrency) {\r\n        args.push('--network-concurrency', options.networkConcurrency.toString());\r\n      }\r\n\r\n      if (this._rushConfiguration.pnpmOptions.strictPeerDependencies) {\r\n        args.push('--strict-peer-dependencies');\r\n      }\r\n\r\n      if ((this._rushConfiguration.packageManagerWrapper as PnpmPackageManager).supportsResolutionStrategy) {\r\n        args.push(`--resolution-strategy=${this._rushConfiguration.pnpmOptions.resolutionStrategy}`);\r\n      }\r\n    } else if (this._rushConfiguration.packageManager === 'yarn') {\r\n      args.push('--link-folder', 'yarn-link');\r\n      args.push('--cache-folder', this._rushConfiguration.yarnCacheFolder);\r\n\r\n      // Without this option, Yarn will sometimes stop and ask for user input on STDIN\r\n      // (e.g. \"Which command would you like to run?\").\r\n      args.push('--non-interactive');\r\n\r\n      if (options.networkConcurrency) {\r\n        args.push('--network-concurrency', options.networkConcurrency.toString());\r\n      }\r\n\r\n      if (this._rushConfiguration.yarnOptions.ignoreEngines) {\r\n        args.push('--ignore-engines');\r\n      }\r\n    }\r\n  }\r\n\r\n  private async _checkIfReleaseIsPublished(): Promise<boolean> {\r\n    const lastCheckFile: string = path.join(\r\n      this._rushGlobalFolder.nodeSpecificPath,\r\n      'rush-' + Rush.version,\r\n      'last-check.flag'\r\n    );\r\n\r\n    if (FileSystem.exists(lastCheckFile)) {\r\n      let cachedResult: boolean | 'error' | undefined = undefined;\r\n      try {\r\n        // NOTE: mtimeMs is not supported yet in Node.js 6.x\r\n        const nowMs: number = new Date().getTime();\r\n        const ageMs: number = nowMs - FileSystem.getStatistics(lastCheckFile).mtime.getTime();\r\n        const HOUR: number = 60 * 60 * 1000;\r\n\r\n        // Is the cache too old?\r\n        if (ageMs < 24 * HOUR) {\r\n          // No, read the cached result\r\n          cachedResult = JsonFile.load(lastCheckFile);\r\n        }\r\n      } catch (e) {\r\n        // Unable to parse file\r\n      }\r\n      if (cachedResult === 'error') {\r\n        throw new Error('Unable to contact server');\r\n      }\r\n      if (cachedResult === true || cachedResult === false) {\r\n        return cachedResult;\r\n      }\r\n    }\r\n\r\n    // Before we start the network operation, record a failed state.  If the process exits for some reason,\r\n    // this will record the error.  It will also update the timestamp to prevent other Rush instances\r\n    // from attempting to update the file.\r\n    await JsonFile.saveAsync('error', lastCheckFile, { ensureFolderExists: true });\r\n\r\n    try {\r\n      // For this check we use the official registry, not the private registry\r\n      const publishedRelease: boolean = await this._queryIfReleaseIsPublishedAsync(\r\n        'https://registry.npmjs.org:443'\r\n      );\r\n      // Cache the result\r\n      await JsonFile.saveAsync(publishedRelease, lastCheckFile, { ensureFolderExists: true });\r\n      return publishedRelease;\r\n    } catch (error) {\r\n      await JsonFile.saveAsync('error', lastCheckFile, { ensureFolderExists: true });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper for checkIfReleaseIsPublished()\r\n  private async _queryIfReleaseIsPublishedAsync(registryUrl: string): Promise<boolean> {\r\n    let queryUrl: string = registryUrl;\r\n    if (queryUrl[-1] !== '/') {\r\n      queryUrl += '/';\r\n    }\r\n    // Note that the \"@\" symbol does not normally get URL-encoded\r\n    queryUrl += RushConstants.rushPackageName.replace('/', '%2F');\r\n\r\n    const userAgent: string = `pnpm/? npm/? node/${process.version} ${os.platform()} ${os.arch()}`;\r\n\r\n    const headers: fetch.Headers = new fetch.Headers();\r\n    headers.append('user-agent', userAgent);\r\n    headers.append('accept', 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*');\r\n\r\n    let agent: http.Agent | undefined = undefined;\r\n    if (process.env.HTTP_PROXY) {\r\n      agent = new HttpsProxyAgent(process.env.HTTP_PROXY);\r\n    }\r\n\r\n    const response: fetch.Response = await fetch.default(queryUrl, {\r\n      headers: headers,\r\n      agent: agent\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to query');\r\n    }\r\n\r\n    const data: { versions: { [version: string]: { dist: { tarball: string } } } } = await response.json();\r\n    let url: string;\r\n    try {\r\n      if (!data.versions[Rush.version]) {\r\n        // Version was not published\r\n        return false;\r\n      }\r\n\r\n      url = data.versions[Rush.version].dist.tarball;\r\n      if (!url) {\r\n        throw new Error(`URL not found`);\r\n      }\r\n    } catch (e) {\r\n      throw new Error('Error parsing response');\r\n    }\r\n\r\n    // Make sure the tarball wasn't deleted from the CDN\r\n    headers.set('accept', '*/*');\r\n    const response2: fetch.Response = await fetch.default(url, {\r\n      headers: headers,\r\n      agent: agent\r\n    });\r\n\r\n    if (!response2.ok) {\r\n      if (response2.status === 404) {\r\n        return false;\r\n      } else {\r\n        throw new Error('Failed to fetch');\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private _syncTempShrinkwrap(shrinkwrapFile: BaseShrinkwrapFile | undefined): void {\r\n    if (shrinkwrapFile) {\r\n      // If we have a (possibly incomplete) shrinkwrap file, save it as the temporary file.\r\n      shrinkwrapFile.save(this.rushConfiguration.tempShrinkwrapFilename);\r\n      shrinkwrapFile.save(this.rushConfiguration.tempShrinkwrapPreinstallFilename);\r\n    } else {\r\n      // Otherwise delete the temporary file\r\n      FileSystem.deleteFile(this.rushConfiguration.tempShrinkwrapFilename);\r\n\r\n      if (this.rushConfiguration.packageManager === 'pnpm') {\r\n        // Workaround for https://github.com/pnpm/pnpm/issues/1890\r\n        //\r\n        // When \"rush update --full\" is run, rush deletes common/temp/pnpm-lock.yaml so that\r\n        // a new lockfile can be generated. But because of the above bug \"pnpm install\" would\r\n        // respect \"common/temp/node_modules/.pnpm-lock.yaml\" and thus would not generate a\r\n        // new lockfile. Deleting this file in addition to deleting common/temp/pnpm-lock.yaml\r\n        // ensures that a new lockfile will be generated with \"rush update --full\".\r\n\r\n        const pnpmPackageManager: PnpmPackageManager = this.rushConfiguration\r\n          .packageManagerWrapper as PnpmPackageManager;\r\n\r\n        FileSystem.deleteFile(\r\n          path.join(\r\n            this.rushConfiguration.commonTempFolder,\r\n            pnpmPackageManager.internalShrinkwrapRelativePath\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}