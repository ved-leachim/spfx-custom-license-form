import { DependencySpecifier } from '../DependencySpecifier';
import { IShrinkwrapFilePolicyValidatorOptions } from '../policy/ShrinkwrapFilePolicy';
import { PackageManagerOptionsConfigurationBase } from '../../api/RushConfiguration';
/**
 * This class is a parser for both npm's npm-shrinkwrap.json and pnpm's pnpm-lock.yaml file formats.
 */
export declare abstract class BaseShrinkwrapFile {
    protected _alreadyWarnedSpecs: Set<string>;
    protected static tryGetValue<T>(dictionary: {
        [key2: string]: T;
    }, key: string): T | undefined;
    /**
     * Serializes and saves the shrinkwrap file to specified location
     */
    save(filePath: string): void;
    /**
     * Validate the shrinkwrap using the provided policy options.
     *
     * @virtual
     */
    validate(packageManagerOptionsConfig: PackageManagerOptionsConfigurationBase, policyOptions: IShrinkwrapFilePolicyValidatorOptions): void;
    /**
     * Returns true if the shrinkwrap file includes a top-level package that would satisfy the specified
     * package name and SemVer version range
     *
     * @virtual
     */
    hasCompatibleTopLevelDependency(dependencySpecifier: DependencySpecifier): boolean;
    /**
     * Returns true if the shrinkwrap file includes a package that would satisfying the specified
     * package name and SemVer version range.  By default, the dependencies are resolved by looking
     * at the root of the node_modules folder described by the shrinkwrap file.  However, if
     * tempProjectName is specified, then the resolution will start in that subfolder.
     *
     * Consider this example:
     *
     * - node_modules\
     *   - temp-project\
     *     - lib-a@1.2.3
     *     - lib-b@1.0.0
     *   - lib-b@2.0.0
     *
     * In this example, hasCompatibleDependency("lib-b", ">= 1.1.0", "temp-project") would fail
     * because it finds lib-b@1.0.0 which does not satisfy the pattern ">= 1.1.0".
     *
     * @virtual
     */
    tryEnsureCompatibleDependency(dependencySpecifier: DependencySpecifier, tempProjectName: string, tryReusingPackageVersionsFromShrinkwrap?: boolean): boolean;
    /**
     * Returns the list of temp projects defined in this file.
     * Example: [ '@rush-temp/project1', '@rush-temp/project2' ]
     *
     * @virtual
     */
    abstract getTempProjectNames(): ReadonlyArray<string>;
    /** @virtual */
    protected abstract tryEnsureDependencyVersion(dependencySpecifier: DependencySpecifier, tempProjectName: string, tryReusingPackageVersionsFromShrinkwrap: boolean): DependencySpecifier | undefined;
    /** @virtual */
    protected abstract getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined;
    /**
     * Returns true if the specified workspace in the shrinkwrap file includes a package that would
     * satisfy the specified SemVer version range.
     *
     * Consider this example:
     *
     * - project-a\
     *   - lib-a@1.2.3
     *   - lib-b@1.0.0
     * - lib-b@2.0.0
     *
     * In this example, hasCompatibleWorkspaceDependency("lib-b", ">= 1.1.0", "workspace-key-for-project-a")
     * would fail because it finds lib-b@1.0.0 which does not satisfy the pattern ">= 1.1.0".
     *
     * @virtual
     */
    hasCompatibleWorkspaceDependency(dependencySpecifier: DependencySpecifier, workspaceKey: string): boolean;
    /**
     * Returns the list of keys to workspace projects specified in the shrinkwrap.
     * Example: [ '../../apps/project1', '../../apps/project2' ]
     *
     * @virtual
     */
    abstract getWorkspaceKeys(): ReadonlyArray<string>;
    /**
     * Returns the key to the project in the workspace specified by the shrinkwrap.
     * Example: '../../apps/project1'
     *
     * @virtual
     */
    abstract getWorkspaceKeyByPath(workspaceRoot: string, projectFolder: string): string;
    /** @virtual */
    protected abstract getWorkspaceDependencyVersion(dependencySpecifier: DependencySpecifier, workspaceKey: string): DependencySpecifier | undefined;
    /** @virtual */
    protected abstract serialize(): string;
    protected _getTempProjectNames(dependencies: {
        [key: string]: {};
    }): ReadonlyArray<string>;
    private _checkDependencyVersion;
}
//# sourceMappingURL=BaseShrinkwrapFile.d.ts.map