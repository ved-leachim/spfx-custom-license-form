{"version":3,"file":"ProjectLogWritable.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/ProjectLogWritable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAqF;AACrF,kDAA0F;AAI1F,qEAAkE;AAElE,MAAa,kBAAmB,SAAQ,2BAAgB;IAUtD,YAAmB,OAAiC,EAAE,QAA0B;QAC9E,KAAK,EAAE,CAAC;QAJF,oBAAe,GAA2B,SAAS,CAAC;QACpD,oBAAe,GAA2B,SAAS,CAAC;QAI1D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,MAAM,mBAAmB,GAAW,uCAAkB,CAAC,UAAU,CAAC,eAAe,CAC/E,IAAI,CAAC,QAAQ,CAAC,WAAW,CAC1B,CAAC;QAEF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,mBAAmB,YAAY,CAAC,CAAC;QAChG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,mBAAmB,kBAAkB,CAAC,CAAC;QAEtG,8BAAU,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1C,8BAAU,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE1C,IAAI,CAAC,eAAe,GAAG,8BAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7D,CAAC;IAES,YAAY,CAAC,KAAqB;QAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,MAAM,IAAI,iCAAa,CAAC,wBAAwB,CAAC,CAAC;SACnD;QACD,oDAAoD;QACpD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEvC,IAAI,KAAK,CAAC,IAAI,qBAA6B,EAAE;YAC3C,gDAAgD;YAChD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACzB,IAAI,CAAC,eAAe,GAAG,8BAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC5D;YACD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACxC;IACH,CAAC;IAES,OAAO;QACf,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,IAAI;gBACF,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;aAC9B;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,kCAAkC,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aACpG;YACD,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;SAClC;QAED,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,IAAI;gBACF,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;aAC9B;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,kCAAkC,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aACpG;YACD,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;SAClC;IACH,CAAC;CACF;AA/DD,gDA+DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem, FileWriter, InternalError } from '@rushstack/node-core-library';\r\nimport { TerminalChunkKind, TerminalWritable, ITerminalChunk } from '@rushstack/terminal';\r\nimport { CollatedTerminal } from '@rushstack/stream-collator';\r\n\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { PackageNameParsers } from '../../api/PackageNameParsers';\r\n\r\nexport class ProjectLogWritable extends TerminalWritable {\r\n  private readonly _project: RushConfigurationProject;\r\n  private readonly _terminal: CollatedTerminal;\r\n\r\n  private _buildLogPath: string;\r\n  private _errorLogPath: string;\r\n\r\n  private _buildLogWriter: FileWriter | undefined = undefined;\r\n  private _errorLogWriter: FileWriter | undefined = undefined;\r\n\r\n  public constructor(project: RushConfigurationProject, terminal: CollatedTerminal) {\r\n    super();\r\n    this._project = project;\r\n    this._terminal = terminal;\r\n\r\n    const unscopedProjectName: string = PackageNameParsers.permissive.getUnscopedName(\r\n      this._project.packageName\r\n    );\r\n\r\n    this._buildLogPath = path.join(this._project.projectFolder, `${unscopedProjectName}.build.log`);\r\n    this._errorLogPath = path.join(this._project.projectFolder, `${unscopedProjectName}.build.error.log`);\r\n\r\n    FileSystem.deleteFile(this._buildLogPath);\r\n    FileSystem.deleteFile(this._errorLogPath);\r\n\r\n    this._buildLogWriter = FileWriter.open(this._buildLogPath);\r\n  }\r\n\r\n  protected onWriteChunk(chunk: ITerminalChunk): void {\r\n    if (!this._buildLogWriter) {\r\n      throw new InternalError('Output file was closed');\r\n    }\r\n    // Both stderr and stdout get written to *.build.log\r\n    this._buildLogWriter.write(chunk.text);\r\n\r\n    if (chunk.kind === TerminalChunkKind.Stderr) {\r\n      // Only stderr gets written to *.build.error.log\r\n      if (!this._errorLogWriter) {\r\n        this._errorLogWriter = FileWriter.open(this._errorLogPath);\r\n      }\r\n      this._errorLogWriter.write(chunk.text);\r\n    }\r\n  }\r\n\r\n  protected onClose(): void {\r\n    if (this._buildLogWriter) {\r\n      try {\r\n        this._buildLogWriter.close();\r\n      } catch (error) {\r\n        this._terminal.writeStderrLine('Failed to close file handle for ' + this._buildLogWriter.filePath);\r\n      }\r\n      this._buildLogWriter = undefined;\r\n    }\r\n\r\n    if (this._errorLogWriter) {\r\n      try {\r\n        this._errorLogWriter.close();\r\n      } catch (error) {\r\n        this._terminal.writeStderrLine('Failed to close file handle for ' + this._errorLogWriter.filePath);\r\n      }\r\n      this._errorLogWriter = undefined;\r\n    }\r\n  }\r\n}\r\n"]}