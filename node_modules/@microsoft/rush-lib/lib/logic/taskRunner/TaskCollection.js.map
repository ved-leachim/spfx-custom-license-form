{"version":3,"file":"TaskCollection.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/TaskCollection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Sort } from '@rushstack/node-core-library';\r\n\r\nimport { Task } from './Task';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { BaseBuilder } from './BaseBuilder';\r\n\r\n/**\r\n * This class represents a set of tasks with interdependencies.  Any class of task definition\r\n * may be registered, and dependencies between tasks are easily specified. There is a check for\r\n * cyclic dependencies and tasks are ordered based on critical path.\r\n */\r\nexport class TaskCollection {\r\n  private _tasks: Map<string, Task>;\r\n\r\n  public constructor() {\r\n    this._tasks = new Map<string, Task>();\r\n  }\r\n\r\n  /**\r\n   * Registers a task definition to the map of defined tasks\r\n   */\r\n  public addTask(builder: BaseBuilder): void {\r\n    if (this._tasks.has(builder.name)) {\r\n      throw new Error('A task with that name has already been registered.');\r\n    }\r\n\r\n    const task: Task = new Task(builder, TaskStatus.Ready);\r\n    task.criticalPathLength = undefined;\r\n    this._tasks.set(task.name, task);\r\n  }\r\n\r\n  /**\r\n   * Returns true if a task with that name has been registered\r\n   */\r\n  public hasTask(taskName: string): boolean {\r\n    return this._tasks.has(taskName);\r\n  }\r\n\r\n  /**\r\n   * Defines the list of dependencies for an individual task.\r\n   * @param taskName - the string name of the task for which we are defining dependencies. A task with this\r\n   * name must already have been registered.\r\n   */\r\n  public addDependencies(taskName: string, taskDependencies: string[]): void {\r\n    const task: Task | undefined = this._tasks.get(taskName);\r\n\r\n    if (!task) {\r\n      throw new Error(`The task '${taskName}' has not been registered`);\r\n    }\r\n    if (!taskDependencies) {\r\n      throw new Error('The list of dependencies must be defined');\r\n    }\r\n\r\n    for (const dependencyName of taskDependencies) {\r\n      if (!this._tasks.has(dependencyName)) {\r\n        throw new Error(`The project '${dependencyName}' has not been registered.`);\r\n      }\r\n      const dependency: Task = this._tasks.get(dependencyName)!;\r\n      task.dependencies.add(dependency);\r\n      dependency.dependents.add(task);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the tasks registered with the collection ordered by the critical path.\r\n   * It also makes sure there are no cyclic dependencies in the tasks.\r\n   */\r\n  public getOrderedTasks(): Task[] {\r\n    this._checkForCyclicDependencies(this._tasks.values(), [], new Set<string>());\r\n\r\n    // Precalculate the number of dependent packages\r\n    this._tasks.forEach((task: Task) => {\r\n      this._calculateCriticalPaths(task);\r\n    });\r\n\r\n    const buildQueue: Task[] = [];\r\n    // Add everything to the buildQueue\r\n    this._tasks.forEach((task: Task) => {\r\n      buildQueue.push(task);\r\n    });\r\n\r\n    // Sort the queue in descending order, nothing will mess with the order\r\n    Sort.sortBy(buildQueue, (task: Task): number => -task.criticalPathLength!);\r\n\r\n    return buildQueue;\r\n  }\r\n\r\n  /**\r\n   * Checks for projects that indirectly depend on themselves.\r\n   */\r\n  private _checkForCyclicDependencies(\r\n    tasks: Iterable<Task>,\r\n    dependencyChain: string[],\r\n    alreadyCheckedProjects: Set<string>\r\n  ): void {\r\n    for (const task of tasks) {\r\n      if (dependencyChain.indexOf(task.name) >= 0) {\r\n        throw new Error(\r\n          'A cyclic dependency was encountered:\\n' +\r\n            '  ' +\r\n            [...dependencyChain, task.name].reverse().join('\\n  -> ') +\r\n            '\\nConsider using the cyclicDependencyProjects option for rush.json.'\r\n        );\r\n      }\r\n\r\n      if (!alreadyCheckedProjects.has(task.name)) {\r\n        alreadyCheckedProjects.add(task.name);\r\n        dependencyChain.push(task.name);\r\n        this._checkForCyclicDependencies(task.dependents, dependencyChain, alreadyCheckedProjects);\r\n        dependencyChain.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the number of packages which must be built before we reach\r\n   * the furthest away \"root\" node\r\n   */\r\n  private _calculateCriticalPaths(task: Task): number {\r\n    // Return the memoized value\r\n    if (task.criticalPathLength !== undefined) {\r\n      return task.criticalPathLength;\r\n    }\r\n\r\n    // If no dependents, we are in a \"root\"\r\n    if (task.dependents.size === 0) {\r\n      task.criticalPathLength = 0;\r\n      return task.criticalPathLength;\r\n    } else {\r\n      // Otherwise we are as long as the longest package + 1\r\n      const depsLengths: number[] = [];\r\n      task.dependents.forEach((dep) => depsLengths.push(this._calculateCriticalPaths(dep)));\r\n      task.criticalPathLength = Math.max(...depsLengths) + 1;\r\n      return task.criticalPathLength;\r\n    }\r\n  }\r\n}\r\n"]}