{"version":3,"file":"ProjectBuilder.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/ProjectBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["ï»¿// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as path from 'path';\r\nimport {\r\n  JsonFile,\r\n  Text,\r\n  FileSystem,\r\n  JsonObject,\r\n  NewlineKind,\r\n  InternalError,\r\n  Terminal\r\n} from '@rushstack/node-core-library';\r\nimport {\r\n  TerminalChunkKind,\r\n  TextRewriterTransform,\r\n  StderrLineTransform,\r\n  SplitterTransform,\r\n  DiscardStdoutTransform\r\n} from '@rushstack/terminal';\r\nimport { CollatedTerminal } from '@rushstack/stream-collator';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\nimport { PackageChangeAnalyzer } from '../PackageChangeAnalyzer';\r\nimport { BaseBuilder, IBuilderContext } from './BaseBuilder';\r\nimport { ProjectLogWritable } from './ProjectLogWritable';\r\nimport { ProjectBuildCache } from '../buildCache/ProjectBuildCache';\r\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\r\nimport { RushProjectConfiguration } from '../../api/RushProjectConfiguration';\r\nimport { CollatedTerminalProvider } from '../../utilities/CollatedTerminalProvider';\r\n\r\nexport interface IProjectBuildDeps {\r\n  files: { [filePath: string]: string };\r\n  arguments: string;\r\n}\r\n\r\nexport interface IProjectBuilderOptions {\r\n  rushProject: RushConfigurationProject;\r\n  rushConfiguration: RushConfiguration;\r\n  buildCacheConfiguration: BuildCacheConfiguration | undefined;\r\n  commandToRun: string;\r\n  isIncrementalBuildAllowed: boolean;\r\n  packageChangeAnalyzer: PackageChangeAnalyzer;\r\n  packageDepsFilename: string;\r\n}\r\n\r\nfunction _areShallowEqual(object1: JsonObject, object2: JsonObject): boolean {\r\n  for (const n in object1) {\r\n    if (!(n in object2) || object1[n] !== object2[n]) {\r\n      return false;\r\n    }\r\n  }\r\n  for (const n in object2) {\r\n    if (!(n in object1)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * A `BaseBuilder` subclass that builds a Rush project and updates its package-deps-hash\r\n * incremental state.\r\n */\r\nexport class ProjectBuilder extends BaseBuilder {\r\n  public get name(): string {\r\n    return ProjectBuilder.getTaskName(this._rushProject);\r\n  }\r\n\r\n  public isIncrementalBuildAllowed: boolean;\r\n  public hadEmptyScript: boolean = false;\r\n\r\n  private _rushProject: RushConfigurationProject;\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _buildCacheConfiguration: BuildCacheConfiguration | undefined;\r\n  private _commandToRun: string;\r\n  private _packageChangeAnalyzer: PackageChangeAnalyzer;\r\n  private _packageDepsFilename: string;\r\n  private _projectBuildCache: ProjectBuildCache | undefined;\r\n\r\n  public constructor(options: IProjectBuilderOptions) {\r\n    super();\r\n    this._rushProject = options.rushProject;\r\n    this._rushConfiguration = options.rushConfiguration;\r\n    this._buildCacheConfiguration = options.buildCacheConfiguration;\r\n    this._commandToRun = options.commandToRun;\r\n    this.isIncrementalBuildAllowed = options.isIncrementalBuildAllowed;\r\n    this._packageChangeAnalyzer = options.packageChangeAnalyzer;\r\n    this._packageDepsFilename = options.packageDepsFilename;\r\n  }\r\n\r\n  /**\r\n   * A helper method to determine the task name of a ProjectBuilder. Used when the task\r\n   * name is required before a task is created.\r\n   */\r\n  public static getTaskName(rushProject: RushConfigurationProject): string {\r\n    return rushProject.packageName;\r\n  }\r\n\r\n  public async executeAsync(context: IBuilderContext): Promise<TaskStatus> {\r\n    try {\r\n      if (!this._commandToRun) {\r\n        this.hadEmptyScript = true;\r\n      }\r\n      return await this._executeTaskAsync(context);\r\n    } catch (error) {\r\n      throw new TaskError('executing', error.message);\r\n    }\r\n  }\r\n\r\n  public async tryWriteCacheEntryAsync(\r\n    terminal: Terminal,\r\n    trackedFilePaths: string[]\r\n  ): Promise<boolean | undefined> {\r\n    const projectBuildCache: ProjectBuildCache | undefined = await this._getProjectBuildCacheAsync(\r\n      terminal,\r\n      trackedFilePaths\r\n    );\r\n    return projectBuildCache?.trySetCacheEntryAsync(terminal);\r\n  }\r\n\r\n  private async _executeTaskAsync(context: IBuilderContext): Promise<TaskStatus> {\r\n    // TERMINAL PIPELINE:\r\n    //\r\n    //                             +--> quietModeTransform? --> collatedWriter\r\n    //                             |\r\n    // normalizeNewlineTransform --1--> stderrLineTransform --2--> removeColorsTransform --> projectLogWritable\r\n    //                                                        |\r\n    //                                                        +--> stdioSummarizer\r\n    const projectLogWritable: ProjectLogWritable = new ProjectLogWritable(\r\n      this._rushProject,\r\n      context.collatedWriter.terminal\r\n    );\r\n\r\n    try {\r\n      const removeColorsTransform: TextRewriterTransform = new TextRewriterTransform({\r\n        destination: projectLogWritable,\r\n        removeColors: true,\r\n        normalizeNewlines: NewlineKind.OsDefault\r\n      });\r\n\r\n      const splitterTransform2: SplitterTransform = new SplitterTransform({\r\n        destinations: [removeColorsTransform, context.stdioSummarizer]\r\n      });\r\n\r\n      const stderrLineTransform: StderrLineTransform = new StderrLineTransform({\r\n        destination: splitterTransform2,\r\n        newlineKind: NewlineKind.Lf // for StdioSummarizer\r\n      });\r\n\r\n      const quietModeTransform: DiscardStdoutTransform = new DiscardStdoutTransform({\r\n        destination: context.collatedWriter\r\n      });\r\n\r\n      const splitterTransform1: SplitterTransform = new SplitterTransform({\r\n        destinations: [context.quietMode ? quietModeTransform : context.collatedWriter, stderrLineTransform]\r\n      });\r\n\r\n      const normalizeNewlineTransform: TextRewriterTransform = new TextRewriterTransform({\r\n        destination: splitterTransform1,\r\n        normalizeNewlines: NewlineKind.Lf,\r\n        ensureNewlineAtEnd: true\r\n      });\r\n\r\n      const collatedTerminal: CollatedTerminal = new CollatedTerminal(normalizeNewlineTransform);\r\n      const terminalProvider: CollatedTerminalProvider = new CollatedTerminalProvider(collatedTerminal);\r\n      const terminal: Terminal = new Terminal(terminalProvider);\r\n\r\n      let hasWarningOrError: boolean = false;\r\n      const projectFolder: string = this._rushProject.projectFolder;\r\n      let lastProjectBuildDeps: IProjectBuildDeps | undefined = undefined;\r\n\r\n      const currentDepsPath: string = path.join(\r\n        this._rushProject.projectRushTempFolder,\r\n        this._packageDepsFilename\r\n      );\r\n\r\n      if (FileSystem.exists(currentDepsPath)) {\r\n        try {\r\n          lastProjectBuildDeps = JsonFile.load(currentDepsPath);\r\n        } catch (e) {\r\n          // Warn and ignore - treat failing to load the file as the project being not built.\r\n          terminal.writeWarningLine(\r\n            `Warning: error parsing ${this._packageDepsFilename}: ${e}. Ignoring and ` +\r\n              `treating the command \"${this._commandToRun}\" as not run.`\r\n          );\r\n        }\r\n      }\r\n\r\n      let projectBuildDeps: IProjectBuildDeps | undefined;\r\n      let trackedFiles: string[] | undefined;\r\n      try {\r\n        const fileHashes: Map<string, string> = this._packageChangeAnalyzer.getPackageDeps(\r\n          this._rushProject.packageName\r\n        )!;\r\n\r\n        const files: { [filePath: string]: string } = {};\r\n        trackedFiles = [];\r\n        for (const [filePath, fileHash] of fileHashes) {\r\n          files[filePath] = fileHash;\r\n          trackedFiles.push(filePath);\r\n        }\r\n\r\n        projectBuildDeps = {\r\n          files,\r\n          arguments: this._commandToRun\r\n        };\r\n      } catch (error) {\r\n        terminal.writeLine(\r\n          'Unable to calculate incremental build state. Instead running full rebuild. ' + error.toString()\r\n        );\r\n      }\r\n\r\n      const isPackageUnchanged: boolean = !!(\r\n        lastProjectBuildDeps &&\r\n        projectBuildDeps &&\r\n        projectBuildDeps.arguments === lastProjectBuildDeps.arguments &&\r\n        _areShallowEqual(projectBuildDeps.files, lastProjectBuildDeps.files)\r\n      );\r\n\r\n      const projectBuildCache: ProjectBuildCache | undefined = await this._getProjectBuildCacheAsync(\r\n        terminal,\r\n        trackedFiles\r\n      );\r\n      const restoreFromCacheSuccess: boolean | undefined = await projectBuildCache?.tryRestoreFromCacheAsync(\r\n        terminal\r\n      );\r\n\r\n      if (restoreFromCacheSuccess) {\r\n        return TaskStatus.FromCache;\r\n      } else if (isPackageUnchanged && this.isIncrementalBuildAllowed) {\r\n        return TaskStatus.Skipped;\r\n      } else {\r\n        // If the deps file exists, remove it before starting a build.\r\n        FileSystem.deleteFile(currentDepsPath);\r\n\r\n        // TODO: Remove legacyDepsPath with the next major release of Rush\r\n        const legacyDepsPath: string = path.join(this._rushProject.projectFolder, 'package-deps.json');\r\n        // Delete the legacy package-deps.json\r\n        FileSystem.deleteFile(legacyDepsPath);\r\n\r\n        if (!this._commandToRun) {\r\n          // Write deps on success.\r\n          if (projectBuildDeps) {\r\n            JsonFile.save(projectBuildDeps, currentDepsPath, {\r\n              ensureFolderExists: true\r\n            });\r\n          }\r\n\r\n          return TaskStatus.Success;\r\n        }\r\n\r\n        // Run the task\r\n        terminal.writeLine('Invoking: ' + this._commandToRun);\r\n\r\n        const task: child_process.ChildProcess = Utilities.executeLifecycleCommandAsync(this._commandToRun, {\r\n          rushConfiguration: this._rushConfiguration,\r\n          workingDirectory: projectFolder,\r\n          initCwd: this._rushConfiguration.commonTempFolder,\r\n          handleOutput: true,\r\n          environmentPathOptions: {\r\n            includeProjectBin: true\r\n          }\r\n        });\r\n\r\n        // Hook into events, in order to get live streaming of build log\r\n        if (task.stdout !== null) {\r\n          task.stdout.on('data', (data: Buffer) => {\r\n            const text: string = data.toString();\r\n            collatedTerminal.writeChunk({ text, kind: TerminalChunkKind.Stdout });\r\n          });\r\n        }\r\n        if (task.stderr !== null) {\r\n          task.stderr.on('data', (data: Buffer) => {\r\n            const text: string = data.toString();\r\n            collatedTerminal.writeChunk({ text, kind: TerminalChunkKind.Stderr });\r\n            hasWarningOrError = true;\r\n          });\r\n        }\r\n\r\n        let status: TaskStatus = await new Promise(\r\n          (resolve: (status: TaskStatus) => void, reject: (error: TaskError) => void) => {\r\n            task.on('close', (code: number) => {\r\n              try {\r\n                if (code !== 0) {\r\n                  reject(new TaskError('error', `Returned error code: ${code}`));\r\n                } else if (hasWarningOrError) {\r\n                  resolve(TaskStatus.SuccessWithWarning);\r\n                } else {\r\n                  resolve(TaskStatus.Success);\r\n                }\r\n              } catch (error) {\r\n                reject(error);\r\n              }\r\n            });\r\n          }\r\n        );\r\n\r\n        if (status === TaskStatus.Success && projectBuildDeps) {\r\n          // Write deps on success.\r\n          const writeProjectStatePromise: Promise<boolean> = JsonFile.saveAsync(\r\n            projectBuildDeps,\r\n            currentDepsPath,\r\n            {\r\n              ensureFolderExists: true\r\n            }\r\n          );\r\n\r\n          const setCacheEntryPromise: Promise<boolean | undefined> = this.tryWriteCacheEntryAsync(\r\n            terminal,\r\n            trackedFiles!\r\n          );\r\n\r\n          const [, cacheWriteSuccess] = await Promise.all([writeProjectStatePromise, setCacheEntryPromise]);\r\n\r\n          if (terminalProvider.hasErrors) {\r\n            status = TaskStatus.Failure;\r\n          } else if (cacheWriteSuccess === false || terminalProvider.hasWarnings) {\r\n            status = TaskStatus.SuccessWithWarning;\r\n          }\r\n        }\r\n\r\n        normalizeNewlineTransform.close();\r\n\r\n        // If the pipeline is wired up correctly, then closing normalizeNewlineTransform should\r\n        // have closed projectLogWritable.\r\n        if (projectLogWritable.isOpen) {\r\n          throw new InternalError('The output file handle was not closed');\r\n        }\r\n\r\n        return status;\r\n      }\r\n    } finally {\r\n      projectLogWritable.close();\r\n    }\r\n  }\r\n\r\n  private async _getProjectBuildCacheAsync(\r\n    terminal: Terminal,\r\n    trackedProjectFiles: string[] | undefined\r\n  ): Promise<ProjectBuildCache | undefined> {\r\n    if (!this._projectBuildCache) {\r\n      if (this._buildCacheConfiguration) {\r\n        const projectConfiguration:\r\n          | RushProjectConfiguration\r\n          | undefined = await RushProjectConfiguration.tryLoadForProjectAsync(this._rushProject, terminal);\r\n        if (projectConfiguration) {\r\n          this._projectBuildCache = ProjectBuildCache.tryGetProjectBuildCache({\r\n            projectConfiguration,\r\n            buildCacheConfiguration: this._buildCacheConfiguration,\r\n            terminal,\r\n            command: this._commandToRun,\r\n            trackedProjectFiles: trackedProjectFiles,\r\n            packageChangeAnalyzer: this._packageChangeAnalyzer\r\n          });\r\n        } else {\r\n          terminal.writeVerboseLine(\r\n            'Project does not have a build-cache.json configuration file, or one provided by a rig, ' +\r\n              'so it does not support caching.'\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._projectBuildCache;\r\n  }\r\n}\r\n\r\n/**\r\n * When running a command from the \"scripts\" block in package.json, if the command\r\n * contains Unix-style path slashes and the OS is Windows, the package managers will\r\n * convert slashes to backslashes.  This is a complicated undertaking.  For example, they\r\n * need to convert \"node_modules/bin/this && ./scripts/that --name keep/this\"\r\n * to \"node_modules\\bin\\this && .\\scripts\\that --name keep/this\", and they don't want to\r\n * convert ANY of the slashes in \"cmd.exe /c echo a/b\".  NPM and PNPM use npm-lifecycle for this,\r\n * but it unfortunately has a dependency on the entire node-gyp kitchen sink.  Yarn has a\r\n * simplified implementation in fix-cmd-win-slashes.js, but it's not exposed as a library.\r\n *\r\n * Fundamentally NPM's whole feature seems misguided:  They start by inviting people to write\r\n * shell scripts that will be executed by wildly different shell languages (e.g. cmd.exe and Bash).\r\n * It's very tricky for a developer to guess what's safe to do without testing every OS.\r\n * Even simple path separators are not portable, so NPM added heuristics to figure out which\r\n * slashes are part of a path or not, and convert them.  These workarounds end up having tons\r\n * of special cases.  They probably could have implemented their own entire minimal cross-platform\r\n * shell language with less code and less confusion than npm-lifecycle's approach.\r\n *\r\n * We've deprecated shell operators inside package.json.  Instead, we advise people to move their\r\n * scripts into conventional script files, and put only a file path in package.json.  So, for\r\n * Rush's workaround here, we really only care about supporting the small set of cases seen in the\r\n * unit tests.  For anything that doesn't fit those patterns, we leave the string untouched\r\n * (i.e. err on the side of not breaking anything).  We could revisit this later if someone\r\n * complains about it, but so far nobody has.  :-)\r\n */\r\nexport function convertSlashesForWindows(command: string): string {\r\n  // The first group will match everything up to the first space, \"&\", \"|\", \"<\", \">\", or quote.\r\n  // The second group matches the remainder.\r\n  const commandRegExp: RegExp = /^([^\\s&|<>\"]+)(.*)$/;\r\n\r\n  const match: RegExpMatchArray | null = commandRegExp.exec(command);\r\n  if (match) {\r\n    // Example input: \"bin/blarg --path ./config/blah.json && a/b\"\r\n    // commandPart=\"bin/blarg\"\r\n    // remainder=\" --path ./config/blah.json && a/b\"\r\n    const commandPart: string = match[1];\r\n    const remainder: string = match[2];\r\n\r\n    // If the command part already contains a backslash, then leave it alone\r\n    if (commandPart.indexOf('\\\\') < 0) {\r\n      // Replace all the slashes with backslashes, e.g. to produce:\r\n      // \"bin\\blarg --path ./config/blah.json && a/b\"\r\n      //\r\n      // NOTE: we don't attempt to process the path parameter or stuff after \"&&\"\r\n      return Text.replaceAll(commandPart, '/', '\\\\') + remainder;\r\n    }\r\n  }\r\n\r\n  // Don't change anything\r\n  return command;\r\n}\r\n"]}