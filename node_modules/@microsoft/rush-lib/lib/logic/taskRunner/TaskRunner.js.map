{"version":3,"file":"TaskRunner.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/TaskRunner.ts"],"names":[],"mappings":"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","sourcesContent":["﻿// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport colors from 'colors';\r\nimport {\r\n  StdioSummarizer,\r\n  TerminalWritable,\r\n  StdioWritable,\r\n  TerminalChunkKind,\r\n  TextRewriterTransform\r\n} from '@rushstack/terminal';\r\nimport { StreamCollator, CollatedTerminal, CollatedWriter } from '@rushstack/stream-collator';\r\nimport { AlreadyReportedError, NewlineKind, InternalError, Sort } from '@rushstack/node-core-library';\r\n\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { Task } from './Task';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { IBuilderContext } from './BaseBuilder';\r\n\r\nexport interface ITaskRunnerOptions {\r\n  quietMode: boolean;\r\n  parallelism: string | undefined;\r\n  changedProjectsOnly: boolean;\r\n  allowWarningsInSuccessfulBuild: boolean;\r\n  destination?: TerminalWritable;\r\n}\r\n\r\n/**\r\n * A class which manages the execution of a set of tasks with interdependencies.\r\n * Initially, and at the end of each task execution, all unblocked tasks\r\n * are added to a ready queue which is then executed. This is done continually until all\r\n * tasks are complete, or prematurely fails if any of the tasks fail.\r\n */\r\nexport class TaskRunner {\r\n  // Format \"======\" lines for a shell window with classic 80 columns\r\n  private static readonly _ASCII_HEADER_WIDTH: number = 79;\r\n\r\n  private _tasks: Task[];\r\n  private _changedProjectsOnly: boolean;\r\n  private _allowWarningsInSuccessfulBuild: boolean;\r\n  private _buildQueue: Task[];\r\n  private _quietMode: boolean;\r\n  private _hasAnyFailures: boolean;\r\n  private _hasAnyWarnings: boolean;\r\n  private _parallelism: number;\r\n  private _currentActiveTasks!: number;\r\n  private _totalTasks!: number;\r\n  private _completedTasks!: number;\r\n\r\n  private readonly _outputWritable: TerminalWritable;\r\n  private readonly _colorsNewlinesTransform: TextRewriterTransform;\r\n  private readonly _streamCollator: StreamCollator;\r\n\r\n  private _terminal: CollatedTerminal;\r\n\r\n  public constructor(orderedTasks: Task[], options: ITaskRunnerOptions) {\r\n    const { quietMode, parallelism, changedProjectsOnly, allowWarningsInSuccessfulBuild } = options;\r\n    this._tasks = orderedTasks;\r\n    this._buildQueue = orderedTasks.slice(0);\r\n    this._quietMode = quietMode;\r\n    this._hasAnyFailures = false;\r\n    this._hasAnyWarnings = false;\r\n    this._changedProjectsOnly = changedProjectsOnly;\r\n    this._allowWarningsInSuccessfulBuild = allowWarningsInSuccessfulBuild;\r\n\r\n    // TERMINAL PIPELINE:\r\n    //\r\n    // streamCollator --> colorsNewlinesTransform --> StdioWritable\r\n    //\r\n    this._outputWritable = options.destination ? options.destination : StdioWritable.instance;\r\n    this._colorsNewlinesTransform = new TextRewriterTransform({\r\n      destination: this._outputWritable,\r\n      normalizeNewlines: NewlineKind.OsDefault,\r\n      removeColors: !colors.enabled\r\n    });\r\n    this._streamCollator = new StreamCollator({\r\n      destination: this._colorsNewlinesTransform,\r\n      onWriterActive: this._streamCollator_onWriterActive\r\n    });\r\n    this._terminal = this._streamCollator.terminal;\r\n\r\n    const numberOfCores: number = os.cpus().length;\r\n\r\n    if (parallelism) {\r\n      if (parallelism === 'max') {\r\n        this._parallelism = numberOfCores;\r\n      } else {\r\n        const parallelismInt: number = parseInt(parallelism, 10);\r\n\r\n        if (isNaN(parallelismInt)) {\r\n          throw new Error(`Invalid parallelism value of '${parallelism}', expected a number or 'max'`);\r\n        }\r\n\r\n        this._parallelism = parallelismInt;\r\n      }\r\n    } else {\r\n      // If an explicit parallelism number wasn't provided, then choose a sensible\r\n      // default.\r\n      if (os.platform() === 'win32') {\r\n        // On desktop Windows, some people have complained that their system becomes\r\n        // sluggish if Rush is using all the CPU cores.  Leave one thread for\r\n        // other operations. For CI environments, you can use the \"max\" argument to use all available cores.\r\n        this._parallelism = Math.max(numberOfCores - 1, 1);\r\n      } else {\r\n        // Unix-like operating systems have more balanced scheduling, so default\r\n        // to the number of CPU cores\r\n        this._parallelism = numberOfCores;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _streamCollator_onWriterActive = (writer: CollatedWriter | undefined): void => {\r\n    if (writer) {\r\n      this._completedTasks++;\r\n\r\n      // Format a header like this\r\n      //\r\n      // ==[ @rushstack/the-long-thing ]=================[ 1 of 1000 ]==\r\n\r\n      // leftPart: \"==[ @rushstack/the-long-thing \"\r\n      const leftPart: string = colors.gray('==[') + ' ' + colors.cyan(writer.taskName) + ' ';\r\n      const leftPartLength: number = 4 + writer.taskName.length + 1;\r\n\r\n      // rightPart: \" 1 of 1000 ]==\"\r\n      const completedOfTotal: string = `${this._completedTasks} of ${this._totalTasks}`;\r\n      const rightPart: string = ' ' + colors.white(completedOfTotal) + ' ' + colors.gray(']==');\r\n      const rightPartLength: number = 1 + completedOfTotal.length + 4;\r\n\r\n      // middlePart: \"]=================[\"\r\n      const twoBracketsLength: number = 2;\r\n      const middlePartLengthMinusTwoBrackets: number = Math.max(\r\n        TaskRunner._ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\r\n        0\r\n      );\r\n\r\n      const middlePart: string = colors.gray(']' + '='.repeat(middlePartLengthMinusTwoBrackets) + '[');\r\n\r\n      this._terminal.writeStdoutLine('\\n' + leftPart + middlePart + rightPart);\r\n\r\n      if (!this._quietMode) {\r\n        this._terminal.writeStdoutLine('');\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Executes all tasks which have been registered, returning a promise which is resolved when all the\r\n   * tasks are completed successfully, or rejects when any task fails.\r\n   */\r\n  public async executeAsync(): Promise<void> {\r\n    this._currentActiveTasks = 0;\r\n    this._completedTasks = 0;\r\n    this._totalTasks = this._tasks.length;\r\n\r\n    if (!this._quietMode) {\r\n      const plural: string = this._tasks.length === 1 ? '' : 's';\r\n      this._terminal.writeStdoutLine(`Selected ${this._tasks.length} project${plural}:`);\r\n      this._terminal.writeStdoutLine(\r\n        this._tasks\r\n          .map((x) => `  ${x.name}`)\r\n          .sort()\r\n          .join('\\n')\r\n      );\r\n      this._terminal.writeStdoutLine('');\r\n    }\r\n\r\n    this._terminal.writeStdoutLine(`Executing a maximum of ${this._parallelism} simultaneous processes...`);\r\n\r\n    await this._startAvailableTasksAsync();\r\n\r\n    this._printTaskStatus();\r\n\r\n    if (this._hasAnyFailures) {\r\n      this._terminal.writeStderrLine(colors.red('Projects failed to build.') + '\\n');\r\n      throw new AlreadyReportedError();\r\n    } else if (this._hasAnyWarnings && !this._allowWarningsInSuccessfulBuild) {\r\n      this._terminal.writeStderrLine(colors.yellow('Projects succeeded with warnings.') + '\\n');\r\n      throw new AlreadyReportedError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pulls the next task with no dependencies off the build queue\r\n   * Removes any non-ready tasks from the build queue (this should only be blocked tasks)\r\n   */\r\n  private _getNextTask(): Task | undefined {\r\n    for (let i: number = 0; i < this._buildQueue.length; i++) {\r\n      const task: Task = this._buildQueue[i];\r\n\r\n      if (task.status !== TaskStatus.Ready) {\r\n        // It shouldn't be on the queue, remove it\r\n        this._buildQueue.splice(i, 1);\r\n        // Decrement since we modified the array\r\n        i--;\r\n      } else if (task.dependencies.size === 0 && task.status === TaskStatus.Ready) {\r\n        // this is a task which is ready to go. remove it and return it\r\n        return this._buildQueue.splice(i, 1)[0];\r\n      }\r\n      // Otherwise task is still waiting\r\n    }\r\n    return undefined; // There are no tasks ready to go at this time\r\n  }\r\n\r\n  /**\r\n   * Helper function which finds any tasks which are available to run and begins executing them.\r\n   * It calls the complete callback when all tasks are completed, or rejects if any task fails.\r\n   */\r\n  private async _startAvailableTasksAsync(): Promise<void> {\r\n    const taskPromises: Promise<void>[] = [];\r\n    let ctask: Task | undefined;\r\n    while (this._currentActiveTasks < this._parallelism && (ctask = this._getNextTask())) {\r\n      this._currentActiveTasks++;\r\n      const task: Task = ctask;\r\n      task.status = TaskStatus.Executing;\r\n\r\n      task.stopwatch = Stopwatch.start();\r\n      task.collatedWriter = this._streamCollator.registerTask(task.name);\r\n      task.stdioSummarizer = new StdioSummarizer();\r\n\r\n      taskPromises.push(this._executeTaskAndChainAsync(task));\r\n    }\r\n\r\n    await Promise.all(taskPromises);\r\n  }\r\n\r\n  private async _executeTaskAndChainAsync(task: Task): Promise<void> {\r\n    const context: IBuilderContext = {\r\n      stdioSummarizer: task.stdioSummarizer,\r\n      collatedWriter: task.collatedWriter,\r\n      quietMode: this._quietMode\r\n    };\r\n\r\n    try {\r\n      const result: TaskStatus = await task.builder.executeAsync(context);\r\n\r\n      task.stopwatch.stop();\r\n      task.stdioSummarizer.close();\r\n\r\n      this._currentActiveTasks--;\r\n      switch (result) {\r\n        case TaskStatus.Success:\r\n          this._markTaskAsSuccess(task);\r\n          break;\r\n        case TaskStatus.SuccessWithWarning:\r\n          this._hasAnyWarnings = true;\r\n          this._markTaskAsSuccessWithWarning(task);\r\n          break;\r\n        case TaskStatus.FromCache:\r\n          this._markTaskAsFromCache(task);\r\n          break;\r\n        case TaskStatus.Skipped:\r\n          this._markTaskAsSkipped(task);\r\n          break;\r\n        case TaskStatus.Failure:\r\n          this._hasAnyFailures = true;\r\n          this._markTaskAsFailed(task);\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      task.stdioSummarizer.close();\r\n\r\n      this._currentActiveTasks--;\r\n\r\n      this._hasAnyFailures = true;\r\n\r\n      // eslint-disable-next-line require-atomic-updates\r\n      task.error = error;\r\n\r\n      this._markTaskAsFailed(task);\r\n    }\r\n\r\n    task.collatedWriter.close();\r\n\r\n    await this._startAvailableTasksAsync();\r\n  }\r\n\r\n  /**\r\n   * Marks a task as having failed and marks each of its dependents as blocked\r\n   */\r\n  private _markTaskAsFailed(task: Task): void {\r\n    if (task.error) {\r\n      task.collatedWriter.terminal.writeStderrLine(task.error.message);\r\n    }\r\n    task.collatedWriter.terminal.writeStderrLine(colors.red(`\"${task.name}\" failed to build.`));\r\n    task.status = TaskStatus.Failure;\r\n    task.dependents.forEach((dependent: Task) => {\r\n      this._markTaskAsBlocked(dependent, task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task and all its dependents as blocked\r\n   */\r\n  private _markTaskAsBlocked(blockedTask: Task, failedTask: Task): void {\r\n    if (blockedTask.status === TaskStatus.Ready) {\r\n      this._completedTasks++;\r\n\r\n      // Note: We cannot write to task.collatedWriter because \"blockedTask\" will be skipped\r\n      failedTask.collatedWriter.terminal.writeStdoutLine(\r\n        `\"${blockedTask.name}\" is blocked by \"${failedTask.name}\".`\r\n      );\r\n      blockedTask.status = TaskStatus.Blocked;\r\n      blockedTask.dependents.forEach((dependent: Task) => {\r\n        this._markTaskAsBlocked(dependent, failedTask);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks a task as being completed, and removes it from the dependencies list of all its dependents\r\n   */\r\n  private _markTaskAsSuccess(task: Task): void {\r\n    if (task.builder.hadEmptyScript) {\r\n      task.collatedWriter.terminal.writeStdoutLine(colors.green(`\"${task.name}\" had an empty script.`));\r\n    } else {\r\n      task.collatedWriter.terminal.writeStdoutLine(\r\n        colors.green(`\"${task.name}\" completed successfully in ${task.stopwatch.toString()}.`)\r\n      );\r\n    }\r\n    task.status = TaskStatus.Success;\r\n\r\n    task.dependents.forEach((dependent: Task) => {\r\n      if (!this._changedProjectsOnly) {\r\n        dependent.builder.isIncrementalBuildAllowed = false;\r\n      }\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as being completed, but with warnings written to stderr, and removes it from the dependencies\r\n   * list of all its dependents\r\n   */\r\n  private _markTaskAsSuccessWithWarning(task: Task): void {\r\n    task.collatedWriter.terminal.writeStderrLine(\r\n      colors.yellow(`\"${task.name}\" completed with warnings in ${task.stopwatch.toString()}.`)\r\n    );\r\n    task.status = TaskStatus.SuccessWithWarning;\r\n    task.dependents.forEach((dependent: Task) => {\r\n      if (!this._changedProjectsOnly) {\r\n        dependent.builder.isIncrementalBuildAllowed = false;\r\n      }\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as skipped.\r\n   */\r\n  private _markTaskAsSkipped(task: Task): void {\r\n    task.collatedWriter.terminal.writeStdoutLine(colors.green(`${task.name} was skipped.`));\r\n    task.status = TaskStatus.Skipped;\r\n    task.dependents.forEach((dependent: Task) => {\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as provided by cache.\r\n   */\r\n  private _markTaskAsFromCache(task: Task): void {\r\n    task.collatedWriter.terminal.writeStdoutLine(colors.green(`${task.name} was provided by cache.`));\r\n    task.status = TaskStatus.FromCache;\r\n    task.dependents.forEach((dependent: Task) => {\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Prints out a report of the status of each project\r\n   */\r\n  private _printTaskStatus(): void {\r\n    const tasksByStatus: { [status: string]: Task[] } = {};\r\n    for (const task of this._tasks) {\r\n      switch (task.status) {\r\n        // These are the sections that we will report below\r\n        case TaskStatus.Skipped:\r\n        case TaskStatus.FromCache:\r\n        case TaskStatus.Success:\r\n        case TaskStatus.SuccessWithWarning:\r\n        case TaskStatus.Blocked:\r\n        case TaskStatus.Failure:\r\n          break;\r\n        default:\r\n          // This should never happen\r\n          throw new InternalError('Unexpected task status: ' + task.status);\r\n      }\r\n\r\n      if (tasksByStatus[task.status]) {\r\n        tasksByStatus[task.status].push(task);\r\n      } else {\r\n        tasksByStatus[task.status] = [task];\r\n      }\r\n    }\r\n\r\n    // Skip a few lines before we start the summary\r\n    this._terminal.writeStdoutLine('');\r\n    this._terminal.writeStdoutLine('');\r\n    this._terminal.writeStdoutLine('');\r\n\r\n    // These are ordered so that the most interesting statuses appear last:\r\n    this._writeCondensedSummary(\r\n      TaskStatus.Skipped,\r\n      tasksByStatus,\r\n      colors.green,\r\n      'These projects were already up to date:'\r\n    );\r\n\r\n    this._writeCondensedSummary(\r\n      TaskStatus.FromCache,\r\n      tasksByStatus,\r\n      colors.green,\r\n      'These projects were restored from the build cache:'\r\n    );\r\n\r\n    this._writeCondensedSummary(\r\n      TaskStatus.Success,\r\n      tasksByStatus,\r\n      colors.green,\r\n      'These projects completed successfully:'\r\n    );\r\n\r\n    this._writeDetailedSummary(TaskStatus.SuccessWithWarning, tasksByStatus, colors.yellow, 'WARNING');\r\n\r\n    this._writeCondensedSummary(\r\n      TaskStatus.Blocked,\r\n      tasksByStatus,\r\n      colors.white,\r\n      'These projects were blocked by dependencies that failed:'\r\n    );\r\n\r\n    this._writeDetailedSummary(TaskStatus.Failure, tasksByStatus, colors.red);\r\n\r\n    this._terminal.writeStdoutLine('');\r\n  }\r\n\r\n  private _writeCondensedSummary(\r\n    status: TaskStatus,\r\n    tasksByStatus: { [status: string]: Task[] },\r\n    headingColor: (text: string) => string,\r\n    preamble: string\r\n  ): void {\r\n    // Example:\r\n    //\r\n    // ==[ BLOCKED: 4 projects ]==============================================================\r\n    //\r\n    // These projects were blocked by dependencies that failed:\r\n    //   @scope/name\r\n    //   e\r\n    //   k\r\n\r\n    const tasks: Task[] | undefined = tasksByStatus[status];\r\n    if (!tasks || tasks.length === 0) {\r\n      return;\r\n    }\r\n    Sort.sortBy(tasks, (x) => x.name);\r\n\r\n    this._writeSummaryHeader(status, tasks, headingColor);\r\n    this._terminal.writeStdoutLine(preamble);\r\n\r\n    const longestTaskName: number = Math.max(...tasks.map((x) => x.name.length));\r\n\r\n    for (const task of tasks) {\r\n      if (task.stopwatch && !task.builder.hadEmptyScript && task.status !== TaskStatus.Skipped) {\r\n        const time: string = task.stopwatch.toString();\r\n        const padding: string = ' '.repeat(longestTaskName - task.name.length);\r\n        this._terminal.writeStdoutLine(`  ${task.name}${padding}    ${time}`);\r\n      } else {\r\n        this._terminal.writeStdoutLine(`  ${task.name}`);\r\n      }\r\n    }\r\n    this._terminal.writeStdoutLine('');\r\n  }\r\n\r\n  private _writeDetailedSummary(\r\n    status: TaskStatus,\r\n    tasksByStatus: { [status: string]: Task[] },\r\n    headingColor: (text: string) => string,\r\n    shortStatusName?: string\r\n  ): void {\r\n    // Example:\r\n    //\r\n    // ==[ SUCCESS WITH WARNINGS: 2 projects ]================================\r\n    //\r\n    // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\r\n    //\r\n    // [eslint] Warning: src/logic/taskRunner/TaskRunner.ts:393:3 ...\r\n\r\n    const tasks: Task[] | undefined = tasksByStatus[status];\r\n    if (!tasks || tasks.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this._writeSummaryHeader(status, tasks, headingColor);\r\n\r\n    if (shortStatusName === undefined) {\r\n      shortStatusName = status;\r\n    }\r\n\r\n    for (const task of tasks) {\r\n      // Format a header like this\r\n      //\r\n      // --[ WARNINGS: f ]------------------------------------[ 5.07 seconds ]--\r\n\r\n      // leftPart: \"--[ WARNINGS: f \"\r\n      const subheadingText: string = `${shortStatusName}: ${task.name}`;\r\n\r\n      const leftPart: string = colors.gray('--[') + ' ' + headingColor(subheadingText) + ' ';\r\n      const leftPartLength: number = 4 + subheadingText.length + 1;\r\n\r\n      // rightPart: \" 5.07 seconds ]--\"\r\n      const time: string = task.stopwatch.toString();\r\n      const rightPart: string = ' ' + colors.white(time) + ' ' + colors.gray(']--');\r\n      const rightPartLength: number = 1 + time.length + 1 + 3;\r\n\r\n      // middlePart: \"]----------------------[\"\r\n      const twoBracketsLength: number = 2;\r\n      const middlePartLengthMinusTwoBrackets: number = Math.max(\r\n        TaskRunner._ASCII_HEADER_WIDTH - (leftPartLength + rightPartLength + twoBracketsLength),\r\n        0\r\n      );\r\n\r\n      const middlePart: string = colors.gray(']' + '-'.repeat(middlePartLengthMinusTwoBrackets) + '[');\r\n\r\n      this._terminal.writeStdoutLine(leftPart + middlePart + rightPart + '\\n');\r\n\r\n      const details: string = task.stdioSummarizer.getReport();\r\n      if (details) {\r\n        // Don't write a newline, because the report will always end with a newline\r\n        this._terminal.writeChunk({ text: details, kind: TerminalChunkKind.Stdout });\r\n      }\r\n\r\n      this._terminal.writeStdoutLine('');\r\n    }\r\n  }\r\n\r\n  private _writeSummaryHeader(\r\n    status: TaskStatus,\r\n    tasks: Task[],\r\n    headingColor: (text: string) => string\r\n  ): void {\r\n    // Format a header like this\r\n    //\r\n    // ==[ FAILED: 2 projects ]================================================\r\n\r\n    // \"2 projects\"\r\n    const projectsText: string = tasks.length.toString() + (tasks.length === 1 ? ' project' : ' projects');\r\n    const headingText: string = `${status}: ${projectsText}`;\r\n\r\n    // leftPart: \"==[ FAILED: 2 projects \"\r\n    const leftPart: string = colors.gray('==[') + ' ' + headingColor(headingText) + ' ';\r\n    const leftPartLength: number = 3 + 1 + headingText.length + 1;\r\n\r\n    const rightPartLengthMinusBracket: number = Math.max(\r\n      TaskRunner._ASCII_HEADER_WIDTH - (leftPartLength + 1),\r\n      0\r\n    );\r\n\r\n    // rightPart: \"]======================\"\r\n    const rightPart: string = colors.gray(']' + '='.repeat(rightPartLengthMinusBracket));\r\n\r\n    this._terminal.writeStdoutLine(leftPart + rightPart);\r\n    this._terminal.writeStdoutLine('');\r\n  }\r\n}\r\n"]}