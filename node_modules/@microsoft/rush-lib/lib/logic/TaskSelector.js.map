{"version":3,"file":"TaskSelector.js","sourceRoot":"","sources":["../../src/logic/TaskSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { BuildCacheConfiguration } from '../api/BuildCacheConfiguration';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { ProjectBuilder, convertSlashesForWindows } from '../logic/taskRunner/ProjectBuilder';\r\nimport { PackageChangeAnalyzer } from './PackageChangeAnalyzer';\r\nimport { TaskCollection } from './taskRunner/TaskCollection';\r\n\r\nexport interface ITaskSelectorConstructor {\r\n  rushConfiguration: RushConfiguration;\r\n  buildCacheConfiguration: BuildCacheConfiguration | undefined;\r\n  toProjects: ReadonlyArray<RushConfigurationProject>;\r\n  fromProjects: ReadonlyArray<RushConfigurationProject>;\r\n  commandToRun: string;\r\n  customParameterValues: string[];\r\n  isQuietMode: boolean;\r\n  isIncrementalBuildAllowed: boolean;\r\n  ignoreMissingScript: boolean;\r\n  ignoreDependencyOrder: boolean;\r\n  packageDepsFilename: string;\r\n}\r\n\r\n/**\r\n * This class is responsible for:\r\n *  - based on to/from flags, solving the dependency graph and figuring out which projects need to be run\r\n *  - creating a ProjectBuilder for each project that needs to be built\r\n *  - registering the necessary ProjectBuilders with the TaskRunner, which actually orchestrates execution\r\n */\r\nexport class TaskSelector {\r\n  private _taskCollection: TaskCollection;\r\n  private _options: ITaskSelectorConstructor;\r\n  private _packageChangeAnalyzer: PackageChangeAnalyzer;\r\n\r\n  public constructor(options: ITaskSelectorConstructor) {\r\n    this._options = options;\r\n\r\n    this._packageChangeAnalyzer = new PackageChangeAnalyzer(options.rushConfiguration);\r\n    this._taskCollection = new TaskCollection();\r\n  }\r\n\r\n  public static getScriptToRun(\r\n    rushProject: RushConfigurationProject,\r\n    commandToRun: string,\r\n    customParameterValues: string[]\r\n  ): string | undefined {\r\n    const script: string | undefined = TaskSelector._getScriptCommand(rushProject, commandToRun);\r\n\r\n    if (script === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!script) {\r\n      return '';\r\n    } else {\r\n      const taskCommand: string = `${script} ${customParameterValues.join(' ')}`;\r\n      return process.platform === 'win32' ? convertSlashesForWindows(taskCommand) : taskCommand;\r\n    }\r\n  }\r\n\r\n  public registerTasks(): TaskCollection {\r\n    if (this._options.toProjects.length > 0) {\r\n      this._registerToProjects(this._options.toProjects);\r\n    }\r\n    if (this._options.fromProjects.length > 0) {\r\n      this._registerFromProjects(this._options.fromProjects);\r\n    }\r\n    if (this._options.toProjects.length === 0 && this._options.fromProjects.length === 0) {\r\n      this._registerAll();\r\n    }\r\n\r\n    return this._taskCollection;\r\n  }\r\n\r\n  private _registerToProjects(toProjects: ReadonlyArray<RushConfigurationProject>): void {\r\n    const dependencies: Map<string, RushConfigurationProject> = new Map<string, RushConfigurationProject>();\r\n\r\n    for (const toProject of toProjects) {\r\n      this._collectAllDependencies(toProject, dependencies);\r\n    }\r\n\r\n    // Register any dependencies it may have\r\n    for (const dependencyProject of dependencies.values()) {\r\n      this._registerTask(dependencyProject);\r\n    }\r\n\r\n    if (!this._options.ignoreDependencyOrder) {\r\n      // Add ordering relationships for each dependency\r\n      for (const dependencyProject of dependencies.values()) {\r\n        this._taskCollection.addDependencies(\r\n          ProjectBuilder.getTaskName(dependencyProject),\r\n          dependencyProject.localDependencyProjects.map((x) => ProjectBuilder.getTaskName(x))\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _registerFromProjects(fromProjects: ReadonlyArray<RushConfigurationProject>): void {\r\n    const dependentList: Map<string, Set<RushConfigurationProject>> = this._getDependentGraph();\r\n    const dependents: Map<string, RushConfigurationProject> = new Map<string, RushConfigurationProject>();\r\n\r\n    for (const fromProject of fromProjects) {\r\n      this._collectAllDependents(dependentList, fromProject, dependents);\r\n    }\r\n\r\n    // Register all downstream dependents\r\n    for (const dependentProject of dependents.values()) {\r\n      this._registerTask(dependentProject);\r\n    }\r\n\r\n    if (!this._options.ignoreDependencyOrder) {\r\n      // Only add ordering relationships for projects which have been registered\r\n      // e.g. package C may depend on A & B, but if we are only building A's downstream, we will ignore B\r\n      for (const dependentProject of dependents.values()) {\r\n        this._taskCollection.addDependencies(\r\n          ProjectBuilder.getTaskName(dependentProject),\r\n          dependentProject.localDependencyProjects\r\n            .filter((dep) => dependents.has(dep.packageName))\r\n            .map((x) => ProjectBuilder.getTaskName(x))\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _registerAll(): void {\r\n    // Register all tasks\r\n    for (const rushProject of this._options.rushConfiguration.projects) {\r\n      this._registerTask(rushProject);\r\n    }\r\n\r\n    if (!this._options.ignoreDependencyOrder) {\r\n      // Add ordering relationships for each dependency\r\n      for (const project of this._options.rushConfiguration.projects) {\r\n        this._taskCollection.addDependencies(\r\n          ProjectBuilder.getTaskName(project),\r\n          project.localDependencyProjects.map((x) => ProjectBuilder.getTaskName(x))\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects all upstream dependencies for a certain project\r\n   */\r\n  private _collectAllDependencies(\r\n    project: RushConfigurationProject,\r\n    result: Map<string, RushConfigurationProject>\r\n  ): void {\r\n    if (!result.has(project.packageName)) {\r\n      result.set(project.packageName, project);\r\n\r\n      for (const dependencyProject of project.localDependencyProjects) {\r\n        this._collectAllDependencies(dependencyProject, result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects all downstream dependents of a certain project\r\n   */\r\n  private _collectAllDependents(\r\n    dependentList: Map<string, Set<RushConfigurationProject>>,\r\n    project: RushConfigurationProject,\r\n    result: Map<string, RushConfigurationProject>\r\n  ): void {\r\n    if (!result.has(project.packageName)) {\r\n      result.set(project.packageName, project);\r\n\r\n      for (const dependent of dependentList.get(project.packageName) || []) {\r\n        this._collectAllDependents(dependentList, dependent, result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inverts the localLinks to arrive at the dependent graph. This helps when using the --from flag\r\n   */\r\n  private _getDependentGraph(): Map<string, Set<RushConfigurationProject>> {\r\n    const dependentList: Map<string, Set<RushConfigurationProject>> = new Map<\r\n      string,\r\n      Set<RushConfigurationProject>\r\n    >();\r\n\r\n    for (const project of this._options.rushConfiguration.projects) {\r\n      for (const { packageName } of project.localDependencyProjects) {\r\n        if (!dependentList.has(packageName)) {\r\n          dependentList.set(packageName, new Set<RushConfigurationProject>());\r\n        }\r\n\r\n        dependentList.get(packageName)!.add(project);\r\n      }\r\n    }\r\n\r\n    return dependentList;\r\n  }\r\n\r\n  private _registerTask(project: RushConfigurationProject | undefined): void {\r\n    if (!project || this._taskCollection.hasTask(ProjectBuilder.getTaskName(project))) {\r\n      return;\r\n    }\r\n\r\n    const commandToRun: string | undefined = TaskSelector.getScriptToRun(\r\n      project,\r\n      this._options.commandToRun,\r\n      this._options.customParameterValues\r\n    );\r\n    if (commandToRun === undefined && !this._options.ignoreMissingScript) {\r\n      throw new Error(\r\n        `The project [${project.packageName}] does not define a '${this._options.commandToRun}' command in the 'scripts' section of its package.json`\r\n      );\r\n    }\r\n\r\n    this._taskCollection.addTask(\r\n      new ProjectBuilder({\r\n        rushProject: project,\r\n        rushConfiguration: this._options.rushConfiguration,\r\n        buildCacheConfiguration: this._options.buildCacheConfiguration,\r\n        commandToRun: commandToRun || '',\r\n        isIncrementalBuildAllowed: this._options.isIncrementalBuildAllowed,\r\n        packageChangeAnalyzer: this._packageChangeAnalyzer,\r\n        packageDepsFilename: this._options.packageDepsFilename\r\n      })\r\n    );\r\n  }\r\n\r\n  private static _getScriptCommand(\r\n    rushProject: RushConfigurationProject,\r\n    script: string\r\n  ): string | undefined {\r\n    if (!rushProject.packageJson.scripts) {\r\n      return undefined;\r\n    }\r\n\r\n    const rawCommand: string = rushProject.packageJson.scripts[script];\r\n\r\n    if (rawCommand === undefined || rawCommand === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return rawCommand;\r\n  }\r\n}\r\n"]}