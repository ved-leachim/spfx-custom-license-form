import { BaseInstallManager, IInstallManagerOptions } from '../base/BaseInstallManager';
import { BaseShrinkwrapFile } from '../../logic/base/BaseShrinkwrapFile';
import { RushConfigurationProject } from '../../api/RushConfigurationProject';
import { PnpmShrinkwrapFile } from '../pnpm/PnpmShrinkwrapFile';
/**
 * This class implements common logic between "rush install" and "rush update".
 */
export declare class WorkspaceInstallManager extends BaseInstallManager {
    /**
     * @override
     */
    doInstall(): Promise<void>;
    /**
     * Regenerates the common/temp/package.json and related workspace files.
     * If shrinkwrapFile is provided, this function also validates whether it contains
     * everything we need to install and returns true if so; in all other cases,
     * the return value is false.
     *
     * @override
     */
    protected prepareCommonTempAsync(shrinkwrapFile: BaseShrinkwrapFile | undefined): Promise<{
        shrinkwrapIsUpToDate: boolean;
        shrinkwrapWarnings: string[];
    }>;
    protected canSkipInstall(lastModifiedDate: Date): boolean;
    /**
     * Runs "npm install" in the common folder.
     */
    protected installAsync(cleanInstall: boolean): Promise<void>;
    protected postInstallAsync(): Promise<void>;
    /**
     * Preferred versions are supported using pnpmfile by substituting any dependency version specifier
     * for the preferred version during package resolution. This is only done if the preferred version range
     * is a subset of the dependency version range. Allowed alternate versions are not modified. The pnpmfile
     * shim will subsequently call into the provided pnpmfile, if one exists.
     */
    protected createShimPnpmfileAsync(filename: string): Promise<void>;
    /**
     * If the feature is enabled, creates shrinkwrap-deps.json files and places them in <projectFolder>/.rush/temp.
     * These files contain the integrity hash of every dependency as well as dependencies of dependencies. This
     * file can be used to track whether or not the packages consumed by this project changed between installs.
     */
    protected _createPerProjectManifestAsync(pnpmShrinkwrapFile: PnpmShrinkwrapFile, project: RushConfigurationProject): Promise<void>;
    /**
     * Used when invoking the NPM tool.  Appends the common configuration options
     * to the command-line.
     */
    protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void;
    /**
     * Checks for projects that exist in the shrinkwrap file, but don't exist
     * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.
     *
     * @returns true if orphans were found, or false if everything is okay
     */
    private _findOrphanedWorkspaceProjects;
}
//# sourceMappingURL=WorkspaceInstallManager.d.ts.map