{"version":3,"file":"RushInstallManager.js","sourceRoot":"","sources":["../../../src/logic/installManager/RushInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as glob from 'glob';\r\nimport colors from 'colors';\r\nimport * as fs from 'fs';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport * as ssri from 'ssri';\r\nimport {\r\n  JsonFile,\r\n  Text,\r\n  FileSystem,\r\n  FileConstants,\r\n  Sort,\r\n  InternalError,\r\n  AlreadyReportedError\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { BaseInstallManager, IInstallManagerOptions } from '../base/BaseInstallManager';\r\nimport { BaseShrinkwrapFile } from '../../logic/base/BaseShrinkwrapFile';\r\nimport { IRushTempPackageJson } from '../../logic/base/BasePackage';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { PackageJsonEditor, DependencyType, PackageJsonDependency } from '../../api/PackageJsonEditor';\r\nimport { DependencySpecifier, DependencySpecifierType } from '../DependencySpecifier';\r\nimport { InstallHelpers } from './InstallHelpers';\r\nimport { TempProjectHelper } from '../TempProjectHelper';\r\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\r\nimport { RushConfiguration } from '../..';\r\nimport { PurgeManager } from '../PurgeManager';\r\nimport { LinkManagerFactory } from '../LinkManagerFactory';\r\nimport { BaseLinkManager } from '../base/BaseLinkManager';\r\nimport { PnpmShrinkwrapFile, IPnpmShrinkwrapDependencyYaml } from '../pnpm/PnpmShrinkwrapFile';\r\n\r\nconst globEscape: (unescaped: string) => string = require('glob-escape'); // No @types/glob-escape package exists\r\n\r\n/**\r\n * The \"noMtime\" flag is new in tar@4.4.1 and not available yet for \\@types/tar.\r\n * As a temporary workaround, augment the type.\r\n */\r\ndeclare module 'tar' {\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  export interface CreateOptions {\r\n    /**\r\n     * \"Set to true to omit writing mtime values for entries. Note that this prevents using other\r\n     * mtime-based features like tar.update or the keepNewer option with the resulting tar archive.\"\r\n     */\r\n    noMtime?: boolean;\r\n  }\r\n}\r\n\r\n/**\r\n * This class implements common logic between \"rush install\" and \"rush update\".\r\n */\r\nexport class RushInstallManager extends BaseInstallManager {\r\n  private _tempProjectHelper: TempProjectHelper;\r\n\r\n  public constructor(\r\n    rushConfiguration: RushConfiguration,\r\n    rushGlobalFolder: RushGlobalFolder,\r\n    purgeManager: PurgeManager,\r\n    options: IInstallManagerOptions\r\n  ) {\r\n    super(rushConfiguration, rushGlobalFolder, purgeManager, options);\r\n    this._tempProjectHelper = new TempProjectHelper(this.rushConfiguration);\r\n  }\r\n\r\n  protected async prepareAsync(): Promise<{ variantIsUpToDate: boolean; shrinkwrapIsUpToDate: boolean }> {\r\n    const result: { variantIsUpToDate: boolean; shrinkwrapIsUpToDate: boolean } = await super.prepareAsync();\r\n\r\n    // We have already done prep work to ensure that the package.json files are \"up to date\". Some changes\r\n    // (such as local package version bumps, or adding a reference to another existing local package) do\r\n    // not need a \"rush update\" to be run, and as such can be changed manually in the temp shrinkwrap. These\r\n    // changes will eventually be picked up during a \"rush update\".\r\n    if (\r\n      this.rushConfiguration.packageManager === 'pnpm' &&\r\n      !this.options.allowShrinkwrapUpdates &&\r\n      this.rushConfiguration.experimentsConfiguration.configuration.usePnpmFrozenLockfileForRushInstall\r\n    ) {\r\n      const tempShrinkwrap: PnpmShrinkwrapFile | undefined = PnpmShrinkwrapFile.loadFromFile(\r\n        this.rushConfiguration.tempShrinkwrapFilename,\r\n        this.rushConfiguration.pnpmOptions\r\n      );\r\n      await this._updatePnpmShrinkwrapTarballIntegritiesAsync(tempShrinkwrap);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Regenerates the common/package.json and all temp_modules projects.\r\n   * If shrinkwrapFile is provided, this function also validates whether it contains\r\n   * everything we need to install and returns true if so; in all other cases,\r\n   * the return value is false.\r\n   *\r\n   * @override\r\n   */\r\n  public async prepareCommonTempAsync(\r\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\r\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }> {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\"\r\n    const tempProjectsFolder: string = path.join(\r\n      this.rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName\r\n    );\r\n\r\n    console.log(os.EOL + colors.bold('Updating temp projects in ' + tempProjectsFolder));\r\n\r\n    Utilities.createFolderWithRetry(tempProjectsFolder);\r\n\r\n    const shrinkwrapWarnings: string[] = [];\r\n\r\n    // We will start with the assumption that it's valid, and then set it to false if\r\n    // any of the checks fail\r\n    let shrinkwrapIsUpToDate: boolean = true;\r\n\r\n    if (!shrinkwrapFile) {\r\n      shrinkwrapIsUpToDate = false;\r\n    } else {\r\n      let workspaceKeys: ReadonlyArray<string> = [];\r\n      try {\r\n        workspaceKeys = shrinkwrapFile.getWorkspaceKeys();\r\n      } catch {\r\n        // Swallow errors since not all shrinkwrap types support workspaces\r\n      }\r\n      if (workspaceKeys.length !== 0 && !this.options.fullUpgrade) {\r\n        console.log();\r\n        console.log(\r\n          colors.red(\r\n            'The shrinkwrap file had previously been updated to support workspaces. Run \"rush update --full\" ' +\r\n              'to update the shrinkwrap file.'\r\n          )\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n    }\r\n\r\n    // dependency name --> version specifier\r\n    const allExplicitPreferredVersions: Map<string, string> = this.rushConfiguration\r\n      .getCommonVersions(this.options.variant)\r\n      .getAllPreferredVersions();\r\n\r\n    if (shrinkwrapFile) {\r\n      // Check any (explicitly) preferred dependencies first\r\n      allExplicitPreferredVersions.forEach((version: string, dependency: string) => {\r\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(dependency, version);\r\n\r\n        if (!shrinkwrapFile.hasCompatibleTopLevelDependency(dependencySpecifier)) {\r\n          shrinkwrapWarnings.push(\r\n            `Missing dependency \"${dependency}\" (${version}) required by the preferred versions from ` +\r\n              RushConstants.commonVersionsFilename\r\n          );\r\n          shrinkwrapIsUpToDate = false;\r\n        }\r\n      });\r\n\r\n      if (this._findOrphanedTempProjects(shrinkwrapFile)) {\r\n        // If there are any orphaned projects, then \"npm install\" would fail because the shrinkwrap\r\n        // contains references such as \"resolved\": \"file:projects\\\\project1\" that refer to nonexistent\r\n        // file paths.\r\n        shrinkwrapIsUpToDate = false;\r\n      }\r\n    }\r\n\r\n    // dependency name --> version specifier\r\n    const commonDependencies: Map<string, string> = InstallHelpers.collectPreferredVersions(\r\n      this.rushConfiguration,\r\n      {\r\n        explicitPreferredVersions: allExplicitPreferredVersions,\r\n        variant: this.options.variant\r\n      }\r\n    );\r\n\r\n    // To make the common/package.json file more readable, sort alphabetically\r\n    // according to rushProject.tempProjectName instead of packageName.\r\n    const sortedRushProjects: RushConfigurationProject[] = this.rushConfiguration.projects.slice(0);\r\n    Sort.sortBy(sortedRushProjects, (x) => x.tempProjectName);\r\n\r\n    for (const rushProject of sortedRushProjects) {\r\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n      const tarballFile: string = this._tempProjectHelper.getTarballFilePath(rushProject);\r\n\r\n      // Example: dependencies[\"@rush-temp/my-project-2\"] = \"file:./projects/my-project-2.tgz\"\r\n      commonDependencies.set(\r\n        rushProject.tempProjectName,\r\n        `file:./${RushConstants.rushTempProjectsFolderName}/${rushProject.unscopedTempProjectName}.tgz`\r\n      );\r\n\r\n      const tempPackageJson: IRushTempPackageJson = {\r\n        name: rushProject.tempProjectName,\r\n        version: '0.0.0',\r\n        private: true,\r\n        dependencies: {}\r\n      };\r\n\r\n      // Collect pairs of (packageName, packageVersion) to be added as dependencies of the @rush-temp package.json\r\n      const tempDependencies: Map<string, string> = new Map<string, string>();\r\n\r\n      // These can be regular, optional, or peer dependencies (but NOT dev dependencies).\r\n      // (A given packageName will never appear more than once in this list.)\r\n      for (const dependency of packageJson.dependencyList) {\r\n        if (this.options.fullUpgrade && this._revertWorkspaceNotation(dependency)) {\r\n          shrinkwrapIsUpToDate = false;\r\n        }\r\n\r\n        // If there are any optional dependencies, copy directly into the optionalDependencies field.\r\n        if (dependency.dependencyType === DependencyType.Optional) {\r\n          if (!tempPackageJson.optionalDependencies) {\r\n            tempPackageJson.optionalDependencies = {};\r\n          }\r\n          tempPackageJson.optionalDependencies[dependency.name] = dependency.version;\r\n        } else {\r\n          tempDependencies.set(dependency.name, dependency.version);\r\n        }\r\n      }\r\n\r\n      for (const dependency of packageJson.devDependencyList) {\r\n        if (this.options.fullUpgrade && this._revertWorkspaceNotation(dependency)) {\r\n          shrinkwrapIsUpToDate = false;\r\n        }\r\n\r\n        // If there are devDependencies, we need to merge them with the regular dependencies.  If the same\r\n        // library appears in both places, then the dev dependency wins (because presumably it's saying what you\r\n        // want right now for development, not the range that you support for consumers).\r\n        tempDependencies.set(dependency.name, dependency.version);\r\n      }\r\n      Sort.sortMapKeys(tempDependencies);\r\n\r\n      for (const [packageName, packageVersion] of tempDependencies.entries()) {\r\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(packageName, packageVersion);\r\n\r\n        // Is there a locally built Rush project that could satisfy this dependency?\r\n        // If so, then we will symlink to the project folder rather than to common/temp/node_modules.\r\n        // In this case, we don't want \"npm install\" to process this package, but we do need\r\n        // to record this decision for linking later, so we add it to a special 'rushDependencies' field.\r\n        const localProject: RushConfigurationProject | undefined = this.rushConfiguration.getProjectByName(\r\n          packageName\r\n        );\r\n\r\n        if (localProject) {\r\n          // Don't locally link if it's listed in the cyclicDependencyProjects\r\n          if (!rushProject.cyclicDependencyProjects.has(packageName)) {\r\n            // Also, don't locally link if the SemVer doesn't match\r\n            const localProjectVersion: string = localProject.packageJsonEditor.version;\r\n            if (semver.satisfies(localProjectVersion, packageVersion)) {\r\n              // We will locally link this package, so instead add it to our special \"rushDependencies\"\r\n              // field in the package.json file.\r\n              if (!tempPackageJson.rushDependencies) {\r\n                tempPackageJson.rushDependencies = {};\r\n              }\r\n              tempPackageJson.rushDependencies[packageName] = packageVersion;\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n\r\n        // We will NOT locally link this package; add it as a regular dependency.\r\n        tempPackageJson.dependencies![packageName] = packageVersion;\r\n\r\n        let tryReusingPackageVersionsFromShrinkwrap: boolean = true;\r\n\r\n        if (this.rushConfiguration.packageManager === 'pnpm') {\r\n          // Shrinkwrap churn optimization doesn't make sense when --frozen-lockfile is true\r\n          tryReusingPackageVersionsFromShrinkwrap = !this.rushConfiguration.experimentsConfiguration\r\n            .configuration.usePnpmFrozenLockfileForRushInstall;\r\n        }\r\n\r\n        if (shrinkwrapFile) {\r\n          if (\r\n            !shrinkwrapFile.tryEnsureCompatibleDependency(\r\n              dependencySpecifier,\r\n              rushProject.tempProjectName,\r\n              tryReusingPackageVersionsFromShrinkwrap\r\n            )\r\n          ) {\r\n            shrinkwrapWarnings.push(\r\n              `Missing dependency \"${packageName}\" (${packageVersion}) required by \"${rushProject.packageName}\"`\r\n            );\r\n            shrinkwrapIsUpToDate = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\"\r\n      const tempProjectFolder: string = this._tempProjectHelper.getTempProjectFolder(rushProject);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2\\package.json\"\r\n      const tempPackageJsonFilename: string = path.join(tempProjectFolder, FileConstants.PackageJson);\r\n\r\n      // we only want to overwrite the package if the existing tarball's package.json is different from tempPackageJson\r\n      let shouldOverwrite: boolean = true;\r\n      try {\r\n        // if the tarball and the temp file still exist, then compare the contents\r\n        if (FileSystem.exists(tarballFile) && FileSystem.exists(tempPackageJsonFilename)) {\r\n          // compare the extracted package.json with the one we are about to write\r\n          const oldBuffer: Buffer = FileSystem.readFileToBuffer(tempPackageJsonFilename);\r\n          const newBuffer: Buffer = Buffer.from(JsonFile.stringify(tempPackageJson));\r\n\r\n          if (Buffer.compare(oldBuffer, newBuffer) === 0) {\r\n            shouldOverwrite = false;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // ignore the error, we will go ahead and create a new tarball\r\n      }\r\n\r\n      if (shouldOverwrite) {\r\n        try {\r\n          // ensure the folder we are about to zip exists\r\n          Utilities.createFolderWithRetry(tempProjectFolder);\r\n\r\n          // remove the old tarball & old temp package json, this is for any cases where new tarball creation\r\n          // fails, and the shouldOverwrite logic is messed up because the my-project-2\\package.json\r\n          // exists and is updated, but the tarball is not accurate\r\n          FileSystem.deleteFile(tarballFile);\r\n          FileSystem.deleteFile(tempPackageJsonFilename);\r\n\r\n          // write the expected package.json file into the zip staging folder\r\n          JsonFile.save(tempPackageJson, tempPackageJsonFilename);\r\n\r\n          // Delete the existing tarball and create a new one\r\n          this._tempProjectHelper.createTempProjectTarball(rushProject);\r\n\r\n          console.log(`Updating ${tarballFile}`);\r\n        } catch (error) {\r\n          console.log(colors.yellow(error));\r\n          // delete everything in case of any error\r\n          FileSystem.deleteFile(tarballFile);\r\n          FileSystem.deleteFile(tempPackageJsonFilename);\r\n        }\r\n      }\r\n\r\n      // Remove the workspace file if it exists\r\n      if (this.rushConfiguration.packageManager === 'pnpm') {\r\n        const workspaceFilePath: string = path.join(\r\n          this.rushConfiguration.commonTempFolder,\r\n          'pnpm-workspace.yaml'\r\n        );\r\n        if (FileSystem.exists(workspaceFilePath)) {\r\n          FileSystem.deleteFile(workspaceFilePath);\r\n        }\r\n      }\r\n\r\n      // Save the package.json if we modified the version references and warn that the package.json was modified\r\n      if (packageJson.saveIfModified()) {\r\n        console.log(\r\n          colors.yellow(\r\n            `\"${rushProject.packageName}\" depends on one or more local packages which used \"workspace:\" ` +\r\n              'notation. The package.json has been modified and must be committed to source control.'\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    // Write the common package.json\r\n    InstallHelpers.generateCommonPackageJson(this.rushConfiguration, commonDependencies);\r\n\r\n    stopwatch.stop();\r\n    console.log(`Finished creating temporary modules (${stopwatch.toString()})`);\r\n\r\n    return { shrinkwrapIsUpToDate, shrinkwrapWarnings };\r\n  }\r\n\r\n  private _revertWorkspaceNotation(dependency: PackageJsonDependency): boolean {\r\n    const specifier: DependencySpecifier = new DependencySpecifier(dependency.name, dependency.version);\r\n    if (specifier.specifierType !== DependencySpecifierType.Workspace) {\r\n      return false;\r\n    }\r\n    // Replace workspace notation with the supplied version range\r\n    if (specifier.versionSpecifier === '*') {\r\n      // When converting to workspaces, exact package versions are replaced with a '*', so undo this\r\n      const localProject: RushConfigurationProject | undefined = this.rushConfiguration.getProjectByName(\r\n        specifier.packageName\r\n      );\r\n      if (!localProject) {\r\n        throw new InternalError(`Could not find local project with package name ${specifier.packageName}`);\r\n      }\r\n      dependency.setVersion(localProject.packageJson.version);\r\n    } else {\r\n      dependency.setVersion(specifier.versionSpecifier);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private async _updatePnpmShrinkwrapTarballIntegritiesAsync(\r\n    tempShrinkwrapFile: PnpmShrinkwrapFile | undefined\r\n  ): Promise<void> {\r\n    if (!tempShrinkwrapFile) {\r\n      return;\r\n    }\r\n\r\n    const tempProjectHelper: TempProjectHelper = new TempProjectHelper(this.rushConfiguration);\r\n\r\n    console.log(\r\n      `Checking shrinkwrap local dependency tarball hashes in ${tempShrinkwrapFile.shrinkwrapFilename}`\r\n    );\r\n\r\n    let shrinkwrapFileUpdated: boolean = false;\r\n    for (const rushProject of this.rushConfiguration.projects) {\r\n      const tempProjectDependencyKey: string | undefined = tempShrinkwrapFile.getTempProjectDependencyKey(\r\n        rushProject.tempProjectName\r\n      );\r\n\r\n      if (!tempProjectDependencyKey) {\r\n        throw new Error(`Cannot get dependency key for temp project: ${rushProject.tempProjectName}`);\r\n      }\r\n\r\n      const parentShrinkwrapEntry:\r\n        | IPnpmShrinkwrapDependencyYaml\r\n        | undefined = tempShrinkwrapFile.getShrinkwrapEntryFromTempProjectDependencyKey(\r\n        tempProjectDependencyKey\r\n      );\r\n      if (!parentShrinkwrapEntry) {\r\n        throw new InternalError(\r\n          `Cannot find shrinkwrap entry using dependency key for temp project: ${rushProject.tempProjectName}`\r\n        );\r\n      }\r\n\r\n      const newIntegrity: string = (\r\n        await ssri.fromStream(fs.createReadStream(tempProjectHelper.getTarballFilePath(rushProject)))\r\n      ).toString();\r\n\r\n      if (parentShrinkwrapEntry.resolution.integrity !== newIntegrity) {\r\n        shrinkwrapFileUpdated = true;\r\n        parentShrinkwrapEntry.resolution.integrity = newIntegrity;\r\n      }\r\n    }\r\n\r\n    tempShrinkwrapFile.save(tempShrinkwrapFile.shrinkwrapFilename);\r\n    if (shrinkwrapFileUpdated) {\r\n      console.log('Shrinkwrap local dependency tarball hashes were updated.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether or not the install is already valid, and therefore can be skipped.\r\n   *\r\n   * @override\r\n   */\r\n  protected canSkipInstall(lastModifiedDate: Date): boolean {\r\n    console.log(\r\n      os.EOL +\r\n        colors.bold(\r\n          `Checking ${RushConstants.nodeModulesFolderName} in ${this.rushConfiguration.commonTempFolder}`\r\n        ) +\r\n        os.EOL\r\n    );\r\n\r\n    // Based on timestamps, can we skip this install entirely?\r\n    const potentiallyChangedFiles: string[] = [];\r\n\r\n    // Consider the timestamp on the node_modules folder; if someone tampered with it\r\n    // or deleted it entirely, then we can't skip this install\r\n    potentiallyChangedFiles.push(\r\n      path.join(this.rushConfiguration.commonTempFolder, RushConstants.nodeModulesFolderName)\r\n    );\r\n\r\n    // Additionally, if they pulled an updated npm-shrinkwrap.json file from Git,\r\n    // then we can't skip this install\r\n    potentiallyChangedFiles.push(this.rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant));\r\n\r\n    // Add common-versions.json file to the potentially changed files list.\r\n    potentiallyChangedFiles.push(this.rushConfiguration.getCommonVersionsFilePath(this.options.variant));\r\n\r\n    if (this.rushConfiguration.packageManager === 'pnpm') {\r\n      // If the repo is using pnpmfile.js, consider that also\r\n      const pnpmFileFilename: string = this.rushConfiguration.getPnpmfilePath(this.options.variant);\r\n\r\n      if (FileSystem.exists(pnpmFileFilename)) {\r\n        potentiallyChangedFiles.push(pnpmFileFilename);\r\n      }\r\n    }\r\n\r\n    // Also consider timestamps for all the temp tarballs. (createTempModulesAndCheckShrinkwrap() will\r\n    // carefully preserve these timestamps unless something has changed.)\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\my-project-2.tgz\"\r\n    potentiallyChangedFiles.push(\r\n      ...this.rushConfiguration.projects.map((x) => {\r\n        return this._tempProjectHelper.getTarballFilePath(x);\r\n      })\r\n    );\r\n\r\n    return Utilities.isFileTimestampCurrent(lastModifiedDate, potentiallyChangedFiles);\r\n  }\r\n\r\n  /**\r\n   * Runs \"npm/pnpm/yarn install\" in the \"common/temp\" folder.\r\n   *\r\n   * @override\r\n   */\r\n  protected async installAsync(cleanInstall: boolean): Promise<void> {\r\n    // Since we are actually running npm/pnpm/yarn install, recreate all the temp project tarballs.\r\n    // This ensures that any existing tarballs with older header bits will be regenerated.\r\n    // It is safe to assume that temp project pacakge.jsons already exist.\r\n    for (const rushProject of this.rushConfiguration.projects) {\r\n      this._tempProjectHelper.createTempProjectTarball(rushProject);\r\n    }\r\n\r\n    // NOTE: The PNPM store is supposed to be transactionally safe, so we don't delete it automatically.\r\n    // The user must request that via the command line.\r\n    if (cleanInstall) {\r\n      if (this.rushConfiguration.packageManager === 'npm') {\r\n        console.log(`Deleting the \"npm-cache\" folder`);\r\n        // This is faster and more thorough than \"npm cache clean\"\r\n        this.installRecycler.moveFolder(this.rushConfiguration.npmCacheFolder);\r\n\r\n        console.log(`Deleting the \"npm-tmp\" folder`);\r\n        this.installRecycler.moveFolder(this.rushConfiguration.npmTmpFolder);\r\n      }\r\n    }\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\r\n    const packageManagerFilename: string = this.rushConfiguration.packageManagerToolFilename;\r\n\r\n    const packageManagerEnv: NodeJS.ProcessEnv = InstallHelpers.getPackageManagerEnvironment(\r\n      this.rushConfiguration,\r\n      this.options\r\n    );\r\n\r\n    const commonNodeModulesFolder: string = path.join(\r\n      this.rushConfiguration.commonTempFolder,\r\n      RushConstants.nodeModulesFolderName\r\n    );\r\n\r\n    // Is there an existing \"node_modules\" folder to consider?\r\n    if (FileSystem.exists(commonNodeModulesFolder)) {\r\n      // Should we delete the entire \"node_modules\" folder?\r\n      if (cleanInstall) {\r\n        // YES: Delete \"node_modules\"\r\n\r\n        // Explain to the user why we are hosing their node_modules folder\r\n        console.log('Deleting files from ' + commonNodeModulesFolder);\r\n\r\n        this.installRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n      } else {\r\n        // NO: Prepare to do an incremental install in the \"node_modules\" folder\r\n\r\n        // note: it is not necessary to run \"prune\" with pnpm\r\n        if (this.rushConfiguration.packageManager === 'npm') {\r\n          console.log(\r\n            `Running \"${this.rushConfiguration.packageManager} prune\"` +\r\n              ` in ${this.rushConfiguration.commonTempFolder}`\r\n          );\r\n          const args: string[] = ['prune'];\r\n          this.pushConfigurationArgs(args, this.options);\r\n\r\n          Utilities.executeCommandWithRetry(\r\n            {\r\n              command: packageManagerFilename,\r\n              args: args,\r\n              workingDirectory: this.rushConfiguration.commonTempFolder,\r\n              environment: packageManagerEnv\r\n            },\r\n            this.options.maxInstallAttempts\r\n          );\r\n\r\n          // Delete the (installed image of) the temp projects, since \"npm install\" does not\r\n          // detect changes for \"file:./\" references.\r\n          // We recognize the temp projects by their names, which always start with \"rush-\".\r\n\r\n          // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\"\r\n          const pathToDeleteWithoutStar: string = path.join(\r\n            commonNodeModulesFolder,\r\n            RushConstants.rushTempNpmScope\r\n          );\r\n          console.log(`Deleting ${pathToDeleteWithoutStar}\\\\*`);\r\n          // Glob can't handle Windows paths\r\n          const normalizedpathToDeleteWithoutStar: string = Text.replaceAll(\r\n            pathToDeleteWithoutStar,\r\n            '\\\\',\r\n            '/'\r\n          );\r\n\r\n          // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*\"\r\n          for (const tempModulePath of glob.sync(globEscape(normalizedpathToDeleteWithoutStar) + '/*')) {\r\n            // We could potentially use AsyncRecycler here, but in practice these folders tend\r\n            // to be very small\r\n            Utilities.dangerouslyDeletePath(tempModulePath);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.rushConfiguration.packageManager === 'yarn') {\r\n      // Yarn does not correctly detect changes to a tarball, so we need to forcibly clear its cache\r\n      const yarnRushTempCacheFolder: string = path.join(\r\n        this.rushConfiguration.yarnCacheFolder,\r\n        'v2',\r\n        'npm-@rush-temp'\r\n      );\r\n      if (FileSystem.exists(yarnRushTempCacheFolder)) {\r\n        console.log('Deleting ' + yarnRushTempCacheFolder);\r\n        Utilities.dangerouslyDeletePath(yarnRushTempCacheFolder);\r\n      }\r\n    }\r\n\r\n    // Run \"npm install\" in the common folder\r\n    const installArgs: string[] = ['install'];\r\n    this.pushConfigurationArgs(installArgs, this.options);\r\n\r\n    console.log(\r\n      os.EOL +\r\n        colors.bold(\r\n          `Running \"${this.rushConfiguration.packageManager} install\" in` +\r\n            ` ${this.rushConfiguration.commonTempFolder}`\r\n        ) +\r\n        os.EOL\r\n    );\r\n\r\n    // If any diagnostic options were specified, then show the full command-line\r\n    if (this.options.debug || this.options.collectLogFile || this.options.networkConcurrency) {\r\n      console.log(\r\n        os.EOL +\r\n          colors.green('Invoking package manager: ') +\r\n          FileSystem.getRealPath(packageManagerFilename) +\r\n          ' ' +\r\n          installArgs.join(' ') +\r\n          os.EOL\r\n      );\r\n    }\r\n\r\n    try {\r\n      Utilities.executeCommandWithRetry(\r\n        {\r\n          command: packageManagerFilename,\r\n          args: installArgs,\r\n          workingDirectory: this.rushConfiguration.commonTempFolder,\r\n          environment: packageManagerEnv,\r\n          suppressOutput: false\r\n        },\r\n        this.options.maxInstallAttempts,\r\n        () => {\r\n          if (this.rushConfiguration.packageManager === 'pnpm') {\r\n            console.log(colors.yellow(`Deleting the \"node_modules\" folder`));\r\n            this.installRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n            // Leave the pnpm-store as is for the retry. This ensures that packages that have already\r\n            // been downloaded need not be downloaded again, thereby potentially increasing the chances\r\n            // of a subsequent successful install.\r\n\r\n            Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      // All the install attempts failed.\r\n\r\n      if (\r\n        this.rushConfiguration.packageManager === 'pnpm' &&\r\n        this.rushConfiguration.pnpmOptions.pnpmStore === 'local'\r\n      ) {\r\n        // If the installation has failed even after the retries, then pnpm store may\r\n        // have got into a corrupted, irrecoverable state. Delete the store so that a\r\n        // future install can create the store afresh.\r\n        console.log(colors.yellow(`Deleting the \"pnpm-store\" folder`));\r\n        this.installRecycler.moveFolder(this.rushConfiguration.pnpmOptions.pnpmStorePath);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n\r\n    if (this.rushConfiguration.packageManager === 'npm') {\r\n      console.log(os.EOL + colors.bold('Running \"npm shrinkwrap\"...'));\r\n      const npmArgs: string[] = ['shrinkwrap'];\r\n      this.pushConfigurationArgs(npmArgs, this.options);\r\n      Utilities.executeCommand({\r\n        command: this.rushConfiguration.packageManagerToolFilename,\r\n        args: npmArgs,\r\n        workingDirectory: this.rushConfiguration.commonTempFolder\r\n      });\r\n      console.log('\"npm shrinkwrap\" completed' + os.EOL);\r\n\r\n      this._fixupNpm5Regression();\r\n    }\r\n  }\r\n\r\n  protected async postInstallAsync(): Promise<void> {\r\n    if (!this.options.noLink) {\r\n      const linkManager: BaseLinkManager = LinkManagerFactory.getLinkManager(this.rushConfiguration);\r\n      await linkManager.createSymlinksForProjects(false);\r\n    } else {\r\n      console.log(\r\n        os.EOL + colors.yellow('Since \"--no-link\" was specified, you will need to run \"rush link\" manually.')\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is a workaround for a bug introduced in NPM 5 (and still unfixed as of NPM 5.5.1):\r\n   * https://github.com/npm/npm/issues/19006\r\n   *\r\n   * The regression is that \"npm install\" sets the package.json \"version\" field for the\r\n   * @rush-temp projects to a value like \"file:projects/example.tgz\", when it should be \"0.0.0\".\r\n   * This causes linking to fail later, when read-package-tree tries to parse the bad version.\r\n   * The error looks like this:\r\n   *\r\n   * ERROR: Failed to parse package.json for foo: Invalid version: \"file:projects/example.tgz\"\r\n   *\r\n   * Our workaround is to rewrite the package.json files for each of the @rush-temp projects\r\n   * in the node_modules folder, after \"npm install\" completes.\r\n   */\r\n  private _fixupNpm5Regression(): void {\r\n    const pathToDeleteWithoutStar: string = path.join(\r\n      this.rushConfiguration.commonTempFolder,\r\n      'node_modules',\r\n      RushConstants.rushTempNpmScope\r\n    );\r\n    // Glob can't handle Windows paths\r\n    const normalizedPathToDeleteWithoutStar: string = Text.replaceAll(pathToDeleteWithoutStar, '\\\\', '/');\r\n\r\n    let anyChanges: boolean = false;\r\n\r\n    // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/*/package.json\"\r\n    for (const packageJsonPath of glob.sync(\r\n      globEscape(normalizedPathToDeleteWithoutStar) + '/*/package.json'\r\n    )) {\r\n      // Example: \"C:/MyRepo/common/temp/node_modules/@rush-temp/example/package.json\"\r\n      const packageJsonObject: IRushTempPackageJson = JsonFile.load(packageJsonPath);\r\n\r\n      // The temp projects always use \"0.0.0\" as their version\r\n      packageJsonObject.version = '0.0.0';\r\n\r\n      if (JsonFile.save(packageJsonObject, packageJsonPath, { onlyIfChanged: true })) {\r\n        anyChanges = true;\r\n      }\r\n    }\r\n\r\n    if (anyChanges) {\r\n      console.log(os.EOL + colors.yellow(Utilities.wrapWords(`Applied workaround for NPM 5 bug`)) + os.EOL);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks for temp projects that exist in the shrinkwrap file, but don't exist\r\n   * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.\r\n   *\r\n   * @returns true if orphans were found, or false if everything is okay\r\n   */\r\n  private _findOrphanedTempProjects(shrinkwrapFile: BaseShrinkwrapFile): boolean {\r\n    // We can recognize temp projects because they are under the \"@rush-temp\" NPM scope.\r\n    for (const tempProjectName of shrinkwrapFile.getTempProjectNames()) {\r\n      if (!this.rushConfiguration.findProjectByTempName(tempProjectName)) {\r\n        console.log(\r\n          os.EOL +\r\n            colors.yellow(\r\n              Utilities.wrapWords(\r\n                `Your ${this.rushConfiguration.shrinkwrapFilePhrase} references a project \"${tempProjectName}\" which no longer exists.`\r\n              )\r\n            ) +\r\n            os.EOL\r\n        );\r\n        return true; // found one\r\n      }\r\n    }\r\n\r\n    return false; // none found\r\n  }\r\n}\r\n"]}