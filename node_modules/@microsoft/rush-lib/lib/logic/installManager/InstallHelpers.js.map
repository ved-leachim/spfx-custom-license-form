{"version":3,"file":"InstallHelpers.js","sourceRoot":"","sources":["../../../src/logic/installManager/InstallHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport {\r\n  FileConstants,\r\n  FileSystem,\r\n  IPackageJson,\r\n  JsonFile,\r\n  LockFile,\r\n  MapExtensions\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\r\nimport { LastInstallFlag } from '../../api/LastInstallFlag';\r\nimport { PackageJsonDependency } from '../../api/PackageJsonEditor';\r\nimport { PackageManagerName } from '../../api/packageManager/PackageManager';\r\nimport { RushConfiguration, IConfigurationEnvironment } from '../../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\r\nimport { Utilities } from '../../utilities/Utilities';\r\n\r\nexport class InstallHelpers {\r\n  /**\r\n   * Returns a map containing all preferred versions for a Rush project.\r\n   * Returns a map: dependency name --> version specifier\r\n   */\r\n  public static collectPreferredVersions(\r\n    rushConfiguration: RushConfiguration,\r\n    options: {\r\n      explicitPreferredVersions?: Map<string, string>;\r\n      variant?: string | undefined;\r\n    } = {}\r\n  ): Map<string, string> {\r\n    // dependency name --> version specifier\r\n    const allExplicitPreferredVersions: Map<string, string> = options.explicitPreferredVersions\r\n      ? options.explicitPreferredVersions\r\n      : rushConfiguration.getCommonVersions(options.variant).getAllPreferredVersions();\r\n\r\n    // dependency name --> version specifier\r\n    const allPreferredVersions: Map<string, string> = new Map<string, string>();\r\n\r\n    // Should we add implicitly preferred versions?\r\n    let useImplicitlyPinnedVersions: boolean;\r\n    if (rushConfiguration.commonVersions.implicitlyPreferredVersions !== undefined) {\r\n      // Use the manually configured setting\r\n      useImplicitlyPinnedVersions = rushConfiguration.commonVersions.implicitlyPreferredVersions;\r\n    } else {\r\n      // Default to true.\r\n      useImplicitlyPinnedVersions = true;\r\n    }\r\n\r\n    if (useImplicitlyPinnedVersions) {\r\n      // Add in the implicitly preferred versions.\r\n      // These are any first-level dependencies for which we only consume a single version range\r\n      // (e.g. every package that depends on react uses an identical specifier)\r\n      const implicitlyPreferredVersions: Map<\r\n        string,\r\n        string\r\n      > = InstallHelpers.collectImplicitlyPreferredVersions(rushConfiguration, options);\r\n      MapExtensions.mergeFromMap(allPreferredVersions, implicitlyPreferredVersions);\r\n    }\r\n\r\n    // Add in the explicitly preferred versions.\r\n    // Note that these take precedence over implicitly preferred versions.\r\n    MapExtensions.mergeFromMap(allPreferredVersions, allExplicitPreferredVersions);\r\n    return allPreferredVersions;\r\n  }\r\n\r\n  /**\r\n   * Returns a map of all direct dependencies that only have a single semantic version specifier.\r\n   * Returns a map: dependency name --> version specifier\r\n   */\r\n  public static collectImplicitlyPreferredVersions(\r\n    rushConfiguration: RushConfiguration,\r\n    options: {\r\n      variant?: string | undefined;\r\n    } = {}\r\n  ): Map<string, string> {\r\n    // First, collect all the direct dependencies of all local projects, and their versions:\r\n    // direct dependency name --> set of version specifiers\r\n    const versionsForDependencies: Map<string, Set<string>> = new Map<string, Set<string>>();\r\n\r\n    rushConfiguration.projects.forEach((project: RushConfigurationProject) => {\r\n      InstallHelpers._collectVersionsForDependencies(rushConfiguration, {\r\n        versionsForDependencies,\r\n        dependencies: project.packageJsonEditor.dependencyList,\r\n        cyclicDependencies: project.cyclicDependencyProjects,\r\n        variant: options.variant\r\n      });\r\n\r\n      InstallHelpers._collectVersionsForDependencies(rushConfiguration, {\r\n        versionsForDependencies,\r\n        dependencies: project.packageJsonEditor.devDependencyList,\r\n        cyclicDependencies: project.cyclicDependencyProjects,\r\n        variant: options.variant\r\n      });\r\n    });\r\n\r\n    // If any dependency has more than one version, then filter it out (since we don't know which version\r\n    // should be preferred).  What remains will be the list of preferred dependencies.\r\n    // dependency --> version specifier\r\n    const implicitlyPreferred: Map<string, string> = new Map<string, string>();\r\n    versionsForDependencies.forEach((versions: Set<string>, dep: string) => {\r\n      if (versions.size === 1) {\r\n        const version: string = Array.from(versions)[0];\r\n        implicitlyPreferred.set(dep, version);\r\n      }\r\n    });\r\n    return implicitlyPreferred;\r\n  }\r\n\r\n  public static generateCommonPackageJson(\r\n    rushConfiguration: RushConfiguration,\r\n    dependencies: Map<string, string> = new Map<string, string>()\r\n  ): void {\r\n    const commonPackageJson: IPackageJson = {\r\n      dependencies: {},\r\n      description: 'Temporary file generated by the Rush tool',\r\n      name: 'rush-common',\r\n      private: true,\r\n      version: '0.0.0'\r\n    };\r\n\r\n    // Add any preferred versions to the top of the commonPackageJson\r\n    // do this in alphabetical order for simpler debugging\r\n    for (const dependency of Array.from(dependencies.keys()).sort()) {\r\n      commonPackageJson.dependencies![dependency] = dependencies.get(dependency)!;\r\n    }\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\package.json\"\r\n    const commonPackageJsonFilename: string = path.join(\r\n      rushConfiguration.commonTempFolder,\r\n      FileConstants.PackageJson\r\n    );\r\n\r\n    // Don't update the file timestamp unless the content has changed, since \"rush install\"\r\n    // will consider this timestamp\r\n    JsonFile.save(commonPackageJson, commonPackageJsonFilename, { onlyIfChanged: true });\r\n  }\r\n\r\n  public static getPackageManagerEnvironment(\r\n    rushConfiguration: RushConfiguration,\r\n    options: {\r\n      debug?: boolean;\r\n    } = {}\r\n  ): NodeJS.ProcessEnv {\r\n    let configurationEnvironment: IConfigurationEnvironment | undefined = undefined;\r\n\r\n    if (rushConfiguration.packageManager === 'npm') {\r\n      if (rushConfiguration.npmOptions && rushConfiguration.npmOptions.environmentVariables) {\r\n        configurationEnvironment = rushConfiguration.npmOptions.environmentVariables;\r\n      }\r\n    } else if (rushConfiguration.packageManager === 'pnpm') {\r\n      if (rushConfiguration.pnpmOptions && rushConfiguration.pnpmOptions.environmentVariables) {\r\n        configurationEnvironment = rushConfiguration.pnpmOptions.environmentVariables;\r\n      }\r\n    } else if (rushConfiguration.packageManager === 'yarn') {\r\n      if (rushConfiguration.yarnOptions && rushConfiguration.yarnOptions.environmentVariables) {\r\n        configurationEnvironment = rushConfiguration.yarnOptions.environmentVariables;\r\n      }\r\n    }\r\n\r\n    return InstallHelpers._mergeEnvironmentVariables(process.env, configurationEnvironment, options);\r\n  }\r\n\r\n  /**\r\n   * If the \"(p)npm-local\" symlink hasn't been set up yet, this creates it, installing the\r\n   * specified (P)npm version in the user's home directory if needed.\r\n   */\r\n  public static async ensureLocalPackageManager(\r\n    rushConfiguration: RushConfiguration,\r\n    rushGlobalFolder: RushGlobalFolder,\r\n    maxInstallAttempts: number\r\n  ): Promise<void> {\r\n    // Example: \"C:\\Users\\YourName\\.rush\"\r\n    const rushUserFolder: string = rushGlobalFolder.nodeSpecificPath;\r\n\r\n    if (!FileSystem.exists(rushUserFolder)) {\r\n      console.log('Creating ' + rushUserFolder);\r\n      FileSystem.ensureFolder(rushUserFolder);\r\n    }\r\n\r\n    const packageManager: PackageManagerName = rushConfiguration.packageManager;\r\n    const packageManagerVersion: string = rushConfiguration.packageManagerToolVersion;\r\n\r\n    const packageManagerAndVersion: string = `${packageManager}-${packageManagerVersion}`;\r\n    // Example: \"C:\\Users\\YourName\\.rush\\pnpm-1.2.3\"\r\n    const packageManagerToolFolder: string = path.join(rushUserFolder, packageManagerAndVersion);\r\n\r\n    const packageManagerMarker: LastInstallFlag = new LastInstallFlag(packageManagerToolFolder, {\r\n      node: process.versions.node\r\n    });\r\n\r\n    console.log(`Trying to acquire lock for ${packageManagerAndVersion}`);\r\n\r\n    const lock: LockFile = await LockFile.acquire(rushUserFolder, packageManagerAndVersion);\r\n\r\n    console.log(`Acquired lock for ${packageManagerAndVersion}`);\r\n\r\n    if (!packageManagerMarker.isValid() || lock.dirtyWhenAcquired) {\r\n      console.log(colors.bold(`Installing ${packageManager} version ${packageManagerVersion}${os.EOL}`));\r\n\r\n      // note that this will remove the last-install flag from the directory\r\n      Utilities.installPackageInDirectory({\r\n        directory: packageManagerToolFolder,\r\n        packageName: packageManager,\r\n        version: rushConfiguration.packageManagerToolVersion,\r\n        tempPackageTitle: `${packageManager}-local-install`,\r\n        maxInstallAttempts: maxInstallAttempts,\r\n        // This is using a local configuration to install a package in a shared global location.\r\n        // Generally that's a bad practice, but in this case if we can successfully install\r\n        // the package at all, we can reasonably assume it's good for all the repositories.\r\n        // In particular, we'll assume that two different NPM registries cannot have two\r\n        // different implementations of the same version of the same package.\r\n        // This was needed for: https://github.com/microsoft/rushstack/issues/691\r\n        commonRushConfigFolder: rushConfiguration.commonRushConfigFolder\r\n      });\r\n\r\n      console.log(`Successfully installed ${packageManager} version ${packageManagerVersion}`);\r\n    } else {\r\n      console.log(`Found ${packageManager} version ${packageManagerVersion} in ${packageManagerToolFolder}`);\r\n    }\r\n\r\n    packageManagerMarker.create();\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\"\r\n    FileSystem.ensureFolder(rushConfiguration.commonTempFolder);\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\pnpm-local\"\r\n    const localPackageManagerToolFolder: string = path.join(\r\n      rushConfiguration.commonTempFolder,\r\n      `${packageManager}-local`\r\n    );\r\n\r\n    console.log(os.EOL + 'Symlinking \"' + localPackageManagerToolFolder + '\"');\r\n    console.log('  --> \"' + packageManagerToolFolder + '\"');\r\n\r\n    // We cannot use FileSystem.exists() to test the existence of a symlink, because it will\r\n    // return false for broken symlinks.  There is no way to test without catching an exception.\r\n    try {\r\n      FileSystem.deleteFolder(localPackageManagerToolFolder);\r\n    } catch (error) {\r\n      if (error.code !== 'ENOENT') {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    FileSystem.createSymbolicLinkJunction({\r\n      linkTargetPath: packageManagerToolFolder,\r\n      newLinkPath: localPackageManagerToolFolder\r\n    });\r\n\r\n    lock.release();\r\n  }\r\n\r\n  // Helper for collectImplicitlyPreferredVersions()\r\n  private static _collectVersionsForDependencies(\r\n    rushConfiguration: RushConfiguration,\r\n    options: {\r\n      versionsForDependencies: Map<string, Set<string>>;\r\n      dependencies: ReadonlyArray<PackageJsonDependency>;\r\n      cyclicDependencies: Set<string>;\r\n      variant: string | undefined;\r\n    }\r\n  ): void {\r\n    const { variant, dependencies, versionsForDependencies, cyclicDependencies } = options;\r\n\r\n    const commonVersions: CommonVersionsConfiguration = rushConfiguration.getCommonVersions(variant);\r\n\r\n    const allowedAlternativeVersions: Map<string, ReadonlyArray<string>> =\r\n      commonVersions.allowedAlternativeVersions;\r\n\r\n    for (const dependency of dependencies) {\r\n      const alternativesForThisDependency: ReadonlyArray<string> =\r\n        allowedAlternativeVersions.get(dependency.name) || [];\r\n\r\n      // For each dependency, collectImplicitlyPreferredVersions() is collecting the set of all version specifiers\r\n      // that appear across the repo.  If there is only one version specifier, then that's the \"preferred\" one.\r\n      // However, there are a few cases where additional version specifiers can be safely ignored.\r\n      let ignoreVersion: boolean = false;\r\n\r\n      // 1. If the version specifier was listed in \"allowedAlternativeVersions\", then it's never a candidate.\r\n      //    (Even if it's the only version specifier anywhere in the repo, we still ignore it, because\r\n      //    otherwise the rule would be difficult to explain.)\r\n      if (alternativesForThisDependency.indexOf(dependency.version) > 0) {\r\n        ignoreVersion = true;\r\n      } else {\r\n        // Is it a local project?\r\n        const localProject: RushConfigurationProject | undefined = rushConfiguration.getProjectByName(\r\n          dependency.name\r\n        );\r\n        if (localProject) {\r\n          // 2. If it's a symlinked local project, then it's not a candidate, because the package manager will\r\n          //    never even see it.\r\n          // However there are two ways that a local project can NOT be symlinked:\r\n          // - if the local project doesn't satisfy the referenced semver specifier; OR\r\n          // - if the local project was specified in \"cyclicDependencyProjects\" in rush.json\r\n          if (\r\n            semver.satisfies(localProject.packageJsonEditor.version, dependency.version) &&\r\n            !cyclicDependencies.has(dependency.name)\r\n          ) {\r\n            ignoreVersion = true;\r\n          }\r\n        }\r\n\r\n        if (!ignoreVersion) {\r\n          InstallHelpers._updateVersionsForDependencies(\r\n            versionsForDependencies,\r\n            dependency.name,\r\n            dependency.version\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper for collectImplicitlyPreferredVersions()\r\n  private static _updateVersionsForDependencies(\r\n    versionsForDependencies: Map<string, Set<string>>,\r\n    dependency: string,\r\n    version: string\r\n  ): void {\r\n    if (!versionsForDependencies.has(dependency)) {\r\n      versionsForDependencies.set(dependency, new Set<string>());\r\n    }\r\n    versionsForDependencies.get(dependency)!.add(version);\r\n  }\r\n\r\n  // Helper for getPackageManagerEnvironment\r\n  private static _mergeEnvironmentVariables(\r\n    baseEnv: NodeJS.ProcessEnv,\r\n    environmentVariables?: IConfigurationEnvironment,\r\n    options: {\r\n      debug?: boolean;\r\n    } = {}\r\n  ): NodeJS.ProcessEnv {\r\n    const packageManagerEnv: NodeJS.ProcessEnv = baseEnv;\r\n\r\n    if (environmentVariables) {\r\n      // eslint-disable-next-line guard-for-in\r\n      for (const envVar in environmentVariables) {\r\n        let setEnvironmentVariable: boolean = true;\r\n        console.log(`\\nProcessing definition for environment variable: ${envVar}`);\r\n\r\n        if (baseEnv.hasOwnProperty(envVar)) {\r\n          setEnvironmentVariable = false;\r\n          console.log(`Environment variable already defined:`);\r\n          console.log(`  Name: ${envVar}`);\r\n          console.log(`  Existing value: ${baseEnv[envVar]}`);\r\n          console.log(`  Value set in rush.json: ${environmentVariables[envVar].value}`);\r\n\r\n          if (environmentVariables[envVar].override) {\r\n            setEnvironmentVariable = true;\r\n            console.log(`Overriding the environment variable with the value set in rush.json.`);\r\n          } else {\r\n            console.log(colors.yellow(`WARNING: Not overriding the value of the environment variable.`));\r\n          }\r\n        }\r\n\r\n        if (setEnvironmentVariable) {\r\n          if (options.debug) {\r\n            console.log(`Setting environment variable for package manager.`);\r\n            console.log(`  Name: ${envVar}`);\r\n            console.log(`  Value: ${environmentVariables[envVar].value}`);\r\n          }\r\n          packageManagerEnv[envVar] = environmentVariables[envVar].value;\r\n        }\r\n      }\r\n    }\r\n\r\n    return packageManagerEnv;\r\n  }\r\n}\r\n"]}