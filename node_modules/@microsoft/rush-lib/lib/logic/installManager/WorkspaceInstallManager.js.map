{"version":3,"file":"WorkspaceInstallManager.js","sourceRoot":"","sources":["../../../src/logic/installManager/WorkspaceInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport {\r\n  FileSystem,\r\n  InternalError,\r\n  MapExtensions,\r\n  JsonFile,\r\n  FileConstants,\r\n  AlreadyReportedError\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { BaseInstallManager, IInstallManagerOptions } from '../base/BaseInstallManager';\r\nimport { BaseShrinkwrapFile } from '../../logic/base/BaseShrinkwrapFile';\r\nimport { DependencySpecifier, DependencySpecifierType } from '../DependencySpecifier';\r\nimport { PackageJsonEditor, DependencyType, PackageJsonDependency } from '../../api/PackageJsonEditor';\r\nimport { PnpmWorkspaceFile } from '../pnpm/PnpmWorkspaceFile';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { InstallHelpers } from './InstallHelpers';\r\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\r\nimport { RepoStateFile } from '../RepoStateFile';\r\nimport { IPnpmfileShimSettings } from '../pnpm/IPnpmfileShimSettings';\r\nimport { PnpmProjectDependencyManifest } from '../pnpm/PnpmProjectDependencyManifest';\r\nimport { PnpmShrinkwrapFile, IPnpmShrinkwrapImporterYaml } from '../pnpm/PnpmShrinkwrapFile';\r\nimport { LastLinkFlagFactory } from '../../api/LastLinkFlag';\r\n\r\n/**\r\n * This class implements common logic between \"rush install\" and \"rush update\".\r\n */\r\nexport class WorkspaceInstallManager extends BaseInstallManager {\r\n  /**\r\n   * @override\r\n   */\r\n  public async doInstall(): Promise<void> {\r\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\r\n    if (this.options.noLink) {\r\n      console.log(\r\n        colors.red(\r\n          'The \"--no-link\" option was provided but is not supported when using workspaces. Run the command again ' +\r\n            'without specifying this argument.'\r\n        )\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    await super.doInstall();\r\n  }\r\n\r\n  /**\r\n   * Regenerates the common/temp/package.json and related workspace files.\r\n   * If shrinkwrapFile is provided, this function also validates whether it contains\r\n   * everything we need to install and returns true if so; in all other cases,\r\n   * the return value is false.\r\n   *\r\n   * @override\r\n   */\r\n  protected async prepareCommonTempAsync(\r\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\r\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }> {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    console.log(\r\n      os.EOL + colors.bold('Updating workspace files in ' + this.rushConfiguration.commonTempFolder)\r\n    );\r\n\r\n    // Shim support for common versions resolution into the pnpmfile. When using workspaces, there are no\r\n    // \"hoisted\" packages, so we need to apply the correct versions to indirect dependencies through the\r\n    // pnpmfile.\r\n    if (this.rushConfiguration.packageManager === 'pnpm') {\r\n      const tempPnpmFilePath: string = path.join(\r\n        this.rushConfiguration.commonTempFolder,\r\n        RushConstants.pnpmfileFilename\r\n      );\r\n      await this.createShimPnpmfileAsync(tempPnpmFilePath);\r\n    }\r\n\r\n    const shrinkwrapWarnings: string[] = [];\r\n\r\n    // We will start with the assumption that it's valid, and then set it to false if\r\n    // any of the checks fail\r\n    let shrinkwrapIsUpToDate: boolean = true;\r\n\r\n    if (!shrinkwrapFile) {\r\n      shrinkwrapIsUpToDate = false;\r\n    } else {\r\n      if (\r\n        shrinkwrapFile.getWorkspaceKeys().length === 0 &&\r\n        this.rushConfiguration.projects.length !== 0 &&\r\n        !this.options.fullUpgrade\r\n      ) {\r\n        console.log();\r\n        console.log(\r\n          colors.red(\r\n            'The shrinkwrap file has not been updated to support workspaces. Run \"rush update --full\" to update ' +\r\n              'the shrinkwrap file.'\r\n          )\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n    }\r\n\r\n    if (shrinkwrapFile) {\r\n      if (this._findOrphanedWorkspaceProjects(shrinkwrapFile)) {\r\n        // If there are any orphaned projects, then install would fail because the shrinkwrap\r\n        // contains references that refer to nonexistent file paths.\r\n        shrinkwrapIsUpToDate = false;\r\n      }\r\n    }\r\n\r\n    // If preferred versions have been updated, then we can't be certain of the state of the shrinkwrap\r\n    const repoState: RepoStateFile = this.rushConfiguration.getRepoState(this.options.variant);\r\n    const commonVersions: CommonVersionsConfiguration = this.rushConfiguration.getCommonVersions(\r\n      this.options.variant\r\n    );\r\n    if (repoState.preferredVersionsHash !== commonVersions.getPreferredVersionsHash()) {\r\n      shrinkwrapWarnings.push(\r\n        `Preferred versions from ${RushConstants.commonVersionsFilename} have been modified.`\r\n      );\r\n      shrinkwrapIsUpToDate = false;\r\n    }\r\n\r\n    // To generate the workspace file, we will add each project to the file as we loop through and validate\r\n    const workspaceFile: PnpmWorkspaceFile = new PnpmWorkspaceFile(\r\n      path.join(this.rushConfiguration.commonTempFolder, 'pnpm-workspace.yaml')\r\n    );\r\n\r\n    // Loop through the projects and add them to the workspace file. While we're at it, also validate that\r\n    // referenced workspace projects are valid, and check if the shrinkwrap file is already up-to-date.\r\n    for (const rushProject of this.rushConfiguration.projects) {\r\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\r\n      workspaceFile.addPackage(rushProject.projectFolder);\r\n\r\n      for (const { name, version, dependencyType } of [\r\n        ...packageJson.dependencyList,\r\n        ...packageJson.devDependencyList\r\n      ]) {\r\n        // Allow the package manager to handle peer dependency resolution, since this is simply a constraint\r\n        // enforced by the package manager. Additionally, peer dependencies are simply a version constraint\r\n        // and do not need to be converted to workspaces protocol.\r\n        if (dependencyType === DependencyType.Peer) {\r\n          continue;\r\n        }\r\n\r\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(name, version);\r\n\r\n        // Is there a locally built Rush project that could satisfy this dependency?\r\n        const referencedLocalProject:\r\n          | RushConfigurationProject\r\n          | undefined = this.rushConfiguration.getProjectByName(name);\r\n\r\n        // Validate that local projects are referenced with workspace notation. If not, and it is not a\r\n        // cyclic dependency, then it needs to be updated to specify `workspace:*` explicitly. Currently only\r\n        // supporting versions and version ranges for specifying a local project.\r\n        if (\r\n          (dependencySpecifier.specifierType === DependencySpecifierType.Version ||\r\n            dependencySpecifier.specifierType === DependencySpecifierType.Range) &&\r\n          referencedLocalProject &&\r\n          !rushProject.cyclicDependencyProjects.has(name)\r\n        ) {\r\n          // Make sure that this version is intended to target a local package. If not, then we will fail since it\r\n          // is not explicitly specified as a cyclic dependency.\r\n          if (\r\n            !semver.satisfies(\r\n              referencedLocalProject.packageJsonEditor.version,\r\n              dependencySpecifier.versionSpecifier\r\n            )\r\n          ) {\r\n            console.log();\r\n            console.log(\r\n              colors.red(\r\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists ` +\r\n                  'within the workspace but cannot be fulfilled with the specified version range. Either ' +\r\n                  'specify a valid version range, or add the package as a cyclic dependency.'\r\n              )\r\n            );\r\n            throw new AlreadyReportedError();\r\n          }\r\n\r\n          if (!this.options.allowShrinkwrapUpdates) {\r\n            console.log();\r\n            console.log(\r\n              colors.red(\r\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists within ` +\r\n                  'the workspace. Run \"rush update\" to update workspace references for this package.'\r\n              )\r\n            );\r\n            throw new AlreadyReportedError();\r\n          }\r\n\r\n          if (this.options.fullUpgrade) {\r\n            // We will update to `workspace` notation. If the version specified is a range, then use the provided range.\r\n            // Otherwise, use `workspace:*` to ensure we're always using the workspace package.\r\n            const workspaceRange: string =\r\n              !!semver.validRange(dependencySpecifier.versionSpecifier) &&\r\n              !semver.valid(dependencySpecifier.versionSpecifier)\r\n                ? dependencySpecifier.versionSpecifier\r\n                : '*';\r\n            packageJson.addOrUpdateDependency(name, `workspace:${workspaceRange}`, dependencyType);\r\n            shrinkwrapIsUpToDate = false;\r\n            continue;\r\n          }\r\n        } else if (dependencySpecifier.specifierType === DependencySpecifierType.Workspace) {\r\n          // Already specified as a local project. Allow the package manager to validate this\r\n          continue;\r\n        }\r\n\r\n        // It is not a local dependency, validate that it is compatible\r\n        if (\r\n          shrinkwrapFile &&\r\n          !shrinkwrapFile.hasCompatibleWorkspaceDependency(\r\n            dependencySpecifier,\r\n            shrinkwrapFile.getWorkspaceKeyByPath(\r\n              this.rushConfiguration.commonTempFolder,\r\n              rushProject.projectFolder\r\n            )\r\n          )\r\n        ) {\r\n          shrinkwrapWarnings.push(\r\n            `Missing dependency \"${name}\" (${version}) required by \"${rushProject.packageName}\"`\r\n          );\r\n          shrinkwrapIsUpToDate = false;\r\n        }\r\n      }\r\n\r\n      // Save the package.json if we modified the version references and warn that the package.json was modified\r\n      if (packageJson.saveIfModified()) {\r\n        console.log(\r\n          colors.yellow(\r\n            `\"${rushProject.packageName}\" depends on one or more workspace packages which did not use \"workspace:\" ` +\r\n              'notation. The package.json has been modified and must be committed to source control.'\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    // Write the common package.json\r\n    InstallHelpers.generateCommonPackageJson(this.rushConfiguration);\r\n\r\n    // Save the generated workspace file. Don't update the file timestamp unless the content has changed,\r\n    // since \"rush install\" will consider this timestamp\r\n    workspaceFile.save(workspaceFile.workspaceFilename, { onlyIfChanged: true });\r\n\r\n    stopwatch.stop();\r\n    console.log(`Finished creating workspace (${stopwatch.toString()})`);\r\n\r\n    return { shrinkwrapIsUpToDate, shrinkwrapWarnings };\r\n  }\r\n\r\n  protected canSkipInstall(lastModifiedDate: Date): boolean {\r\n    console.log(\r\n      os.EOL +\r\n        colors.bold(\r\n          `Checking ${RushConstants.nodeModulesFolderName} in ${this.rushConfiguration.commonTempFolder}`\r\n        ) +\r\n        os.EOL\r\n    );\r\n\r\n    // Based on timestamps, can we skip this install entirely?\r\n    const potentiallyChangedFiles: string[] = [];\r\n\r\n    // Consider the timestamp on the node_modules folder; if someone tampered with it\r\n    // or deleted it entirely, then we can't skip this install\r\n    potentiallyChangedFiles.push(\r\n      path.join(this.rushConfiguration.commonTempFolder, RushConstants.nodeModulesFolderName)\r\n    );\r\n\r\n    // Additionally, if they pulled an updated shrinkwrap file from Git, then we can't skip this install\r\n    potentiallyChangedFiles.push(this.rushConfiguration.getCommittedShrinkwrapFilename(this.options.variant));\r\n\r\n    // Add common-versions.json file to the potentially changed files list.\r\n    potentiallyChangedFiles.push(this.rushConfiguration.getCommonVersionsFilePath(this.options.variant));\r\n\r\n    if (this.rushConfiguration.packageManager === 'pnpm') {\r\n      // If the repo is using pnpmfile.js, consider that also\r\n      const pnpmFileFilename: string = this.rushConfiguration.getPnpmfilePath(this.options.variant);\r\n\r\n      if (FileSystem.exists(pnpmFileFilename)) {\r\n        potentiallyChangedFiles.push(pnpmFileFilename);\r\n      }\r\n\r\n      // Add workspace file. This file is only modified when workspace packages change.\r\n      const pnpmWorkspaceFilename: string = path.join(\r\n        this.rushConfiguration.commonTempFolder,\r\n        'pnpm-workspace.yaml'\r\n      );\r\n\r\n      if (FileSystem.exists(pnpmWorkspaceFilename)) {\r\n        potentiallyChangedFiles.push();\r\n      }\r\n    }\r\n\r\n    // Also consider timestamps for all the project node_modules folders, as well as the package.json\r\n    // files\r\n    // Example: [ \"C:\\MyRepo\\projects\\projectA\\node_modules\", \"C:\\MyRepo\\projects\\projectA\\package.json\" ]\r\n    potentiallyChangedFiles.push(\r\n      ...this.rushConfiguration.projects.map((x) => {\r\n        return path.join(x.projectFolder, RushConstants.nodeModulesFolderName);\r\n      }),\r\n      ...this.rushConfiguration.projects.map((x) => {\r\n        return path.join(x.projectFolder, FileConstants.PackageJson);\r\n      })\r\n    );\r\n\r\n    // NOTE: If any of the potentiallyChangedFiles does not exist, then isFileTimestampCurrent()\r\n    // returns false.\r\n    return Utilities.isFileTimestampCurrent(lastModifiedDate, potentiallyChangedFiles);\r\n  }\r\n\r\n  /**\r\n   * Runs \"npm install\" in the common folder.\r\n   */\r\n  protected async installAsync(cleanInstall: boolean): Promise<void> {\r\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\r\n    const packageManagerFilename: string = this.rushConfiguration.packageManagerToolFilename;\r\n\r\n    const packageManagerEnv: NodeJS.ProcessEnv = InstallHelpers.getPackageManagerEnvironment(\r\n      this.rushConfiguration,\r\n      this.options\r\n    );\r\n\r\n    const commonNodeModulesFolder: string = path.join(\r\n      this.rushConfiguration.commonTempFolder,\r\n      RushConstants.nodeModulesFolderName\r\n    );\r\n\r\n    // Is there an existing \"node_modules\" folder to consider?\r\n    if (FileSystem.exists(commonNodeModulesFolder)) {\r\n      // Should we delete the entire \"node_modules\" folder?\r\n      if (cleanInstall) {\r\n        // YES: Delete \"node_modules\"\r\n\r\n        // Explain to the user why we are hosing their node_modules folder\r\n        console.log('Deleting files from ' + commonNodeModulesFolder);\r\n\r\n        this.installRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n      }\r\n    }\r\n\r\n    // Run \"npm install\" in the common folder\r\n    const installArgs: string[] = ['install'];\r\n    this.pushConfigurationArgs(installArgs, this.options);\r\n\r\n    console.log(\r\n      os.EOL +\r\n        colors.bold(\r\n          `Running \"${this.rushConfiguration.packageManager} install\" in` +\r\n            ` ${this.rushConfiguration.commonTempFolder}`\r\n        ) +\r\n        os.EOL\r\n    );\r\n\r\n    // If any diagnostic options were specified, then show the full command-line\r\n    if (this.options.debug || this.options.collectLogFile || this.options.networkConcurrency) {\r\n      console.log(\r\n        os.EOL +\r\n          colors.green('Invoking package manager: ') +\r\n          FileSystem.getRealPath(packageManagerFilename) +\r\n          ' ' +\r\n          installArgs.join(' ') +\r\n          os.EOL\r\n      );\r\n    }\r\n\r\n    try {\r\n      Utilities.executeCommandWithRetry(\r\n        {\r\n          command: packageManagerFilename,\r\n          args: installArgs,\r\n          workingDirectory: this.rushConfiguration.commonTempFolder,\r\n          environment: packageManagerEnv,\r\n          suppressOutput: false\r\n        },\r\n        this.options.maxInstallAttempts,\r\n        () => {\r\n          if (this.rushConfiguration.packageManager === 'pnpm') {\r\n            console.log(colors.yellow(`Deleting the \"node_modules\" folder`));\r\n            this.installRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n            // Leave the pnpm-store as is for the retry. This ensures that packages that have already\r\n            // been downloaded need not be downloaded again, thereby potentially increasing the chances\r\n            // of a subsequent successful install.\r\n\r\n            Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n          }\r\n        }\r\n      );\r\n\r\n      // Ensure that node_modules folders exist after install, since the timestamps on these folders are used\r\n      // to determine if the install can be skipped\r\n      const projectNodeModulesFolders: string[] = [\r\n        path.join(this.rushConfiguration.commonTempFolder, RushConstants.nodeModulesFolderName),\r\n        ...this.rushConfiguration.projects.map((x) => {\r\n          return path.join(x.projectFolder, RushConstants.nodeModulesFolderName);\r\n        })\r\n      ];\r\n\r\n      for (const nodeModulesFolder of projectNodeModulesFolders) {\r\n        FileSystem.ensureFolder(nodeModulesFolder);\r\n      }\r\n    } catch (error) {\r\n      // All the install attempts failed.\r\n\r\n      if (\r\n        this.rushConfiguration.packageManager === 'pnpm' &&\r\n        this.rushConfiguration.pnpmOptions.pnpmStore === 'local'\r\n      ) {\r\n        // If the installation has failed even after the retries, then pnpm store may\r\n        // have got into a corrupted, irrecoverable state. Delete the store so that a\r\n        // future install can create the store afresh.\r\n        console.log(colors.yellow(`Deleting the \"pnpm-store\" folder`));\r\n        this.installRecycler.moveFolder(this.rushConfiguration.pnpmOptions.pnpmStorePath);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n\r\n    console.log('');\r\n  }\r\n\r\n  protected async postInstallAsync(): Promise<void> {\r\n    // Per-project manifests can only be generated for PNPM currently\r\n    if (this.rushConfiguration.packageManager === 'pnpm' && this.rushConfiguration.pnpmOptions) {\r\n      // Base it off the temp shrinkwrap, as this was the most recently completed install\r\n      const tempShrinkwrapFile: PnpmShrinkwrapFile = PnpmShrinkwrapFile.loadFromFile(\r\n        this.rushConfiguration.tempShrinkwrapFilename,\r\n        this.rushConfiguration.pnpmOptions\r\n      )!;\r\n\r\n      await Promise.all(\r\n        this.rushConfiguration.projects.map((x) => this._createPerProjectManifestAsync(tempShrinkwrapFile, x))\r\n      );\r\n    }\r\n\r\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\r\n    LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration).create();\r\n  }\r\n\r\n  /**\r\n   * Preferred versions are supported using pnpmfile by substituting any dependency version specifier\r\n   * for the preferred version during package resolution. This is only done if the preferred version range\r\n   * is a subset of the dependency version range. Allowed alternate versions are not modified. The pnpmfile\r\n   * shim will subsequently call into the provided pnpmfile, if one exists.\r\n   */\r\n  protected async createShimPnpmfileAsync(filename: string): Promise<void> {\r\n    const pnpmfileDir: string = path.dirname(filename);\r\n    let pnpmfileExists: boolean = false;\r\n    try {\r\n      // Attempt to move the existing pnpmfile if there is one\r\n      await FileSystem.moveAsync({\r\n        sourcePath: filename,\r\n        destinationPath: path.join(pnpmfileDir, 'clientPnpmfile.js')\r\n      });\r\n      pnpmfileExists = true;\r\n    } catch (error) {\r\n      if (!FileSystem.isNotExistError(error)) {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    const pnpmfileShimSettings: IPnpmfileShimSettings = {\r\n      allPreferredVersions: MapExtensions.toObject(\r\n        InstallHelpers.collectPreferredVersions(this.rushConfiguration, this.options)\r\n      ),\r\n      allowedAlternativeVersions: MapExtensions.toObject(\r\n        this.rushConfiguration.getCommonVersions(this.options.variant).allowedAlternativeVersions\r\n      ),\r\n      semverPath: require.resolve('semver'),\r\n      useClientPnpmfile: pnpmfileExists\r\n    };\r\n\r\n    // Write the settings to be consumed by the pnpmfile\r\n    await JsonFile.saveAsync(pnpmfileShimSettings, path.resolve(pnpmfileDir, 'pnpmfileSettings.json'), {\r\n      ensureFolderExists: true\r\n    });\r\n\r\n    // Copy the shim pnpmfile to the original path\r\n    await FileSystem.copyFileAsync({\r\n      sourcePath: path.resolve(__dirname, '..', 'pnpm', 'PnpmfileShim.js'),\r\n      destinationPath: filename\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If the feature is enabled, creates shrinkwrap-deps.json files and places them in <projectFolder>/.rush/temp.\r\n   * These files contain the integrity hash of every dependency as well as dependencies of dependencies. This\r\n   * file can be used to track whether or not the packages consumed by this project changed between installs.\r\n   */\r\n  protected _createPerProjectManifestAsync(\r\n    pnpmShrinkwrapFile: PnpmShrinkwrapFile,\r\n    project: RushConfigurationProject\r\n  ): Promise<void> {\r\n    const pnpmProjectDependencyManifest: PnpmProjectDependencyManifest = new PnpmProjectDependencyManifest({\r\n      pnpmShrinkwrapFile,\r\n      project\r\n    });\r\n\r\n    // If the feature is not enabled, clean up the manifest and return\r\n    if (\r\n      this.rushConfiguration.experimentsConfiguration.configuration.legacyIncrementalBuildDependencyDetection\r\n    ) {\r\n      return pnpmProjectDependencyManifest.deleteIfExistsAsync();\r\n    }\r\n\r\n    // Obtain the workspace importer from the shrinkwrap, which lists resolved dependencies\r\n    const importerKey: string = pnpmShrinkwrapFile.getWorkspaceKeyByPath(\r\n      this.rushConfiguration.commonTempFolder,\r\n      project.projectFolder\r\n    );\r\n    const workspaceImporter:\r\n      | IPnpmShrinkwrapImporterYaml\r\n      | undefined = pnpmShrinkwrapFile.getWorkspaceImporter(importerKey);\r\n\r\n    if (!workspaceImporter) {\r\n      // Filtered installs will not contain all projects in the shrinkwrap, but if one is\r\n      // missing during a full install, something has gone wrong\r\n      if (this.options.toProjects.length === 0) {\r\n        throw new InternalError(\r\n          `Cannot find shrinkwrap entry using importer key for workspace project: ${importerKey}`\r\n        );\r\n      }\r\n      return pnpmProjectDependencyManifest.deleteIfExistsAsync();\r\n    }\r\n\r\n    const localDependencyProjectNames: Set<string> = new Set<string>(\r\n      project.localDependencyProjects.map((x) => x.packageName)\r\n    );\r\n\r\n    // Loop through non-local dependencies. Skip peer dependencies because they're only a constraint\r\n    const dependencies: PackageJsonDependency[] = [\r\n      ...project.packageJsonEditor.dependencyList,\r\n      ...project.packageJsonEditor.devDependencyList\r\n    ].filter((x) => x.dependencyType !== DependencyType.Peer && !localDependencyProjectNames.has(x.name));\r\n\r\n    for (const { name, dependencyType } of dependencies) {\r\n      // read the version number from the shrinkwrap entry\r\n      let version: string | undefined;\r\n      if (dependencyType === DependencyType.Regular) {\r\n        version = (workspaceImporter.dependencies || {})[name];\r\n      } else if (dependencyType === DependencyType.Dev) {\r\n        // Dev dependencies are folded into dependencies if there is a duplicate\r\n        // definition, so we should also check there\r\n        version =\r\n          (workspaceImporter.devDependencies || {})[name] || (workspaceImporter.dependencies || {})[name];\r\n      } else if (dependencyType === DependencyType.Optional) {\r\n        version = (workspaceImporter.optionalDependencies || {})[name];\r\n      }\r\n\r\n      if (!version) {\r\n        // Optional dependencies by definition may not exist, so avoid throwing on these\r\n        if (dependencyType !== DependencyType.Optional) {\r\n          throw new InternalError(\r\n            `Cannot find shrinkwrap entry dependency \"${name}\" for workspace project: ${project.packageName}`\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // Add to the manifest and provide all the parent dependencies\r\n      pnpmProjectDependencyManifest.addDependency(name, version, {\r\n        dependencies: { ...workspaceImporter.dependencies, ...workspaceImporter.devDependencies },\r\n        optionalDependencies: { ...workspaceImporter.optionalDependencies },\r\n        peerDependencies: {}\r\n      });\r\n    }\r\n\r\n    return pnpmProjectDependencyManifest.saveAsync();\r\n  }\r\n\r\n  /**\r\n   * Used when invoking the NPM tool.  Appends the common configuration options\r\n   * to the command-line.\r\n   */\r\n  protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void {\r\n    super.pushConfigurationArgs(args, options);\r\n\r\n    // Add workspace-specific args\r\n    if (this.rushConfiguration.packageManager === 'pnpm') {\r\n      args.push('--recursive');\r\n      args.push('--link-workspace-packages', 'false');\r\n\r\n      // \"<package>...\" selects the specified package and all direct and indirect dependencies\r\n      for (const toProject of this.options.toProjects) {\r\n        args.push('--filter', `${toProject.packageName}...`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks for projects that exist in the shrinkwrap file, but don't exist\r\n   * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.\r\n   *\r\n   * @returns true if orphans were found, or false if everything is okay\r\n   */\r\n  private _findOrphanedWorkspaceProjects(shrinkwrapFile: BaseShrinkwrapFile): boolean {\r\n    for (const workspaceKey of shrinkwrapFile.getWorkspaceKeys()) {\r\n      // Look for the RushConfigurationProject using the workspace key\r\n      let rushProjectPath: string;\r\n      if (this.rushConfiguration.packageManager === 'pnpm') {\r\n        // PNPM workspace keys are relative paths from the workspace root, which is the common temp folder\r\n        rushProjectPath = path.resolve(this.rushConfiguration.commonTempFolder, workspaceKey);\r\n      } else {\r\n        throw new InternalError('Orphaned workspaces cannot be checked for the provided package manager');\r\n      }\r\n\r\n      if (!this.rushConfiguration.tryGetProjectForPath(rushProjectPath)) {\r\n        console.log(\r\n          os.EOL +\r\n            colors.yellow(\r\n              Utilities.wrapWords(\r\n                `Your ${this.rushConfiguration.shrinkwrapFilePhrase} references a project at \"${rushProjectPath}\" ` +\r\n                  'which no longer exists.'\r\n              )\r\n            ) +\r\n            os.EOL\r\n        );\r\n        return true; // found one\r\n      }\r\n    }\r\n\r\n    return false; // none found\r\n  }\r\n}\r\n"]}