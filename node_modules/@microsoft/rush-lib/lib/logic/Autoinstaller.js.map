{"version":3,"file":"Autoinstaller.js","sourceRoot":"","sources":["../../src/logic/Autoinstaller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as path from 'path';\r\n\r\nimport { FileSystem, NewlineKind } from '@rushstack/node-core-library';\r\nimport { Utilities } from '../utilities/Utilities';\r\n\r\nimport { PackageName, IParsedPackageNameOrError } from '@rushstack/node-core-library';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { PackageJsonEditor } from '../api/PackageJsonEditor';\r\n\r\nexport class Autoinstaller {\r\n  public name: string;\r\n\r\n  private _rushConfiguration: RushConfiguration;\r\n\r\n  public constructor(autoinstallerName: string, rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    Autoinstaller.validateName(autoinstallerName);\r\n    this.name = autoinstallerName;\r\n  }\r\n\r\n  // Example: .../common/autoinstallers/my-task\r\n  public get folderFullPath(): string {\r\n    return path.join(this._rushConfiguration.commonAutoinstallersFolder, this.name);\r\n  }\r\n\r\n  // Example: .../common/autoinstallers/my-task/package-lock.yaml\r\n  public get shrinkwrapFilePath(): string {\r\n    return path.join(\r\n      this._rushConfiguration.commonAutoinstallersFolder,\r\n      this.name,\r\n      this._rushConfiguration.shrinkwrapFilename\r\n    );\r\n  }\r\n\r\n  // Example: .../common/autoinstallers/my-task/package.json\r\n  public get packageJsonPath(): string {\r\n    return path.join(this._rushConfiguration.commonAutoinstallersFolder, this.name, 'package.json');\r\n  }\r\n\r\n  public static validateName(autoinstallerName: string): void {\r\n    const nameOrError: IParsedPackageNameOrError = PackageName.tryParse(autoinstallerName);\r\n    if (nameOrError.error) {\r\n      throw new Error(`The specified name \"${autoinstallerName}\" is invalid: ` + nameOrError.error);\r\n    }\r\n    if (nameOrError.scope) {\r\n      throw new Error(`The specified name \"${autoinstallerName}\" must not contain an NPM scope`);\r\n    }\r\n  }\r\n\r\n  public update(): void {\r\n    const autoinstallerPackageJsonPath: string = path.join(this.folderFullPath, 'package.json');\r\n\r\n    if (!FileSystem.exists(autoinstallerPackageJsonPath)) {\r\n      throw new Error(`The specified autoinstaller path does not exist: ` + autoinstallerPackageJsonPath);\r\n    }\r\n\r\n    console.log(`Updating autoinstaller package: ${autoinstallerPackageJsonPath}`);\r\n\r\n    let oldFileContents: string = '';\r\n\r\n    if (FileSystem.exists(this.shrinkwrapFilePath)) {\r\n      oldFileContents = FileSystem.readFile(this.shrinkwrapFilePath, { convertLineEndings: NewlineKind.Lf });\r\n      console.log('Deleting ' + this.shrinkwrapFilePath);\r\n      FileSystem.deleteFile(this.shrinkwrapFilePath);\r\n    }\r\n\r\n    // Detect a common mistake where PNPM prints \"Already up-to-date\" without creating a shrinkwrap file\r\n    const packageJsonEditor: PackageJsonEditor = PackageJsonEditor.load(this.packageJsonPath);\r\n    if (packageJsonEditor.dependencyList.length === 0 && packageJsonEditor.dependencyList.length === 0) {\r\n      throw new Error(\r\n        'You must add at least one dependency to the autoinstaller package' +\r\n          ' before invoking this command:\\n' +\r\n          this.packageJsonPath\r\n      );\r\n    }\r\n\r\n    console.log();\r\n\r\n    Utilities.executeCommand({\r\n      command: this._rushConfiguration.packageManagerToolFilename,\r\n      args: ['install'],\r\n      workingDirectory: this.folderFullPath,\r\n      keepEnvironment: true\r\n    });\r\n\r\n    console.log();\r\n\r\n    if (!FileSystem.exists(this.shrinkwrapFilePath)) {\r\n      throw new Error(\r\n        'The package manager did not create the expected shrinkwrap file: ' + this.shrinkwrapFilePath\r\n      );\r\n    }\r\n\r\n    const newFileContents: string = FileSystem.readFile(this.shrinkwrapFilePath, {\r\n      convertLineEndings: NewlineKind.Lf\r\n    });\r\n    if (oldFileContents !== newFileContents) {\r\n      console.log(\r\n        colors.green('The shrinkwrap file has been updated.') + '  Please commit the updated file:'\r\n      );\r\n      console.log(`\\n  ${this.shrinkwrapFilePath}`);\r\n    } else {\r\n      console.log(colors.green('Already up to date.'));\r\n    }\r\n  }\r\n}\r\n"]}