{"version":3,"file":"PackageJsonUpdater.js","sourceRoot":"","sources":["../../src/logic/PackageJsonUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as semver from 'semver';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { BaseInstallManager, IInstallManagerOptions } from './base/BaseInstallManager';\r\nimport { InstallManagerFactory } from './InstallManagerFactory';\r\nimport { VersionMismatchFinder } from './versionMismatch/VersionMismatchFinder';\r\nimport { PurgeManager } from './PurgeManager';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { DependencyType, PackageJsonDependency } from '../api/PackageJsonEditor';\r\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { VersionMismatchFinderEntity } from './versionMismatch/VersionMismatchFinderEntity';\r\nimport { VersionMismatchFinderProject } from './versionMismatch/VersionMismatchFinderProject';\r\nimport { RushConstants } from './RushConstants';\r\nimport { InstallHelpers } from './installManager/InstallHelpers';\r\n\r\n/**\r\n * The type of SemVer range specifier that is prepended to the version\r\n */\r\nexport const enum SemVerStyle {\r\n  Exact = 'exact',\r\n  Caret = 'caret',\r\n  Tilde = 'tilde',\r\n  Passthrough = 'passthrough'\r\n}\r\n\r\n/**\r\n * Options for adding a dependency to a particular project.\r\n */\r\nexport interface IPackageJsonUpdaterRushAddOptions {\r\n  /**\r\n   * The projects whose package.jsons should get updated\r\n   */\r\n  projects: RushConfigurationProject[];\r\n  /**\r\n   * The name of the dependency to be added\r\n   */\r\n  packageName: string;\r\n  /**\r\n   * The initial version specifier.\r\n   * If undefined, the latest version will be used (that doesn't break ensureConsistentVersions).\r\n   * If specified, the latest version meeting the SemVer specifier will be used as the basis.\r\n   */\r\n  initialVersion: string | undefined;\r\n  /**\r\n   * Whether or not this dependency should be added as a devDependency or a regular dependency.\r\n   */\r\n  devDependency: boolean;\r\n  /**\r\n   * If specified, other packages that use this dependency will also have their package.json's updated.\r\n   */\r\n  updateOtherPackages: boolean;\r\n  /**\r\n   * If specified, \"rush update\" will not be run after updating the package.json file(s).\r\n   */\r\n  skipUpdate: boolean;\r\n  /**\r\n   * If specified, \"rush update\" will be run in debug mode.\r\n   */\r\n  debugInstall: boolean;\r\n  /**\r\n   * The style of range that should be used if the version is automatically detected.\r\n   */\r\n  rangeStyle: SemVerStyle;\r\n  /**\r\n   * The variant to consider when performing installations and validating shrinkwrap updates.\r\n   */\r\n  variant?: string | undefined;\r\n}\r\n\r\n/**\r\n * Configuration options for adding or updating a dependency in a single project\r\n */\r\nexport interface IUpdateProjectOptions {\r\n  /**\r\n   * The project which will have its package.json updated\r\n   */\r\n  project: VersionMismatchFinderEntity;\r\n  /**\r\n   * The name of the dependency to be added or updated in the project\r\n   */\r\n  packageName: string;\r\n  /**\r\n   * The new SemVer specifier that should be added to the project's package.json\r\n   */\r\n  newVersion: string;\r\n  /**\r\n   * The type of dependency that should be updated. If left empty, this will be auto-detected.\r\n   * If it cannot be auto-detected an exception will be thrown.\r\n   */\r\n  dependencyType?: DependencyType;\r\n}\r\n\r\n/**\r\n * A helper class for managing the dependencies of various package.json files.\r\n * @internal\r\n */\r\nexport class PackageJsonUpdater {\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _rushGlobalFolder: RushGlobalFolder;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration, rushGlobalFolder: RushGlobalFolder) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._rushGlobalFolder = rushGlobalFolder;\r\n  }\r\n\r\n  /**\r\n   * Adds a dependency to a particular project. The core business logic for \"rush add\".\r\n   */\r\n  public async doRushAdd(options: IPackageJsonUpdaterRushAddOptions): Promise<void> {\r\n    const {\r\n      projects,\r\n      packageName,\r\n      initialVersion,\r\n      devDependency,\r\n      updateOtherPackages,\r\n      skipUpdate,\r\n      debugInstall,\r\n      rangeStyle,\r\n      variant\r\n    } = options;\r\n\r\n    const implicitlyPinned: Map<string, string> = InstallHelpers.collectImplicitlyPreferredVersions(\r\n      this._rushConfiguration,\r\n      {\r\n        variant\r\n      }\r\n    );\r\n\r\n    const purgeManager: PurgeManager = new PurgeManager(this._rushConfiguration, this._rushGlobalFolder);\r\n    const installManagerOptions: IInstallManagerOptions = {\r\n      debug: debugInstall,\r\n      allowShrinkwrapUpdates: true,\r\n      bypassPolicy: false,\r\n      noLink: false,\r\n      fullUpgrade: false,\r\n      recheckShrinkwrap: false,\r\n      networkConcurrency: undefined,\r\n      collectLogFile: false,\r\n      variant: variant,\r\n      maxInstallAttempts: RushConstants.defaultMaxInstallAttempts,\r\n      toProjects: []\r\n    };\r\n    const installManager: BaseInstallManager = InstallManagerFactory.getInstallManager(\r\n      this._rushConfiguration,\r\n      this._rushGlobalFolder,\r\n      purgeManager,\r\n      installManagerOptions\r\n    );\r\n\r\n    const version: string = await this._getNormalizedVersionSpec(\r\n      projects,\r\n      installManager,\r\n      packageName,\r\n      initialVersion,\r\n      implicitlyPinned.get(packageName),\r\n      rangeStyle\r\n    );\r\n\r\n    console.log();\r\n    console.log(colors.green(`Updating projects to use `) + packageName + '@' + colors.cyan(version));\r\n    console.log();\r\n\r\n    const allPackageUpdates: IUpdateProjectOptions[] = [];\r\n\r\n    for (const project of projects) {\r\n      const currentProjectUpdate: IUpdateProjectOptions = {\r\n        project: new VersionMismatchFinderProject(project),\r\n        packageName,\r\n        newVersion: version,\r\n        dependencyType: devDependency ? DependencyType.Dev : undefined\r\n      };\r\n      this.updateProject(currentProjectUpdate);\r\n\r\n      const otherPackageUpdates: IUpdateProjectOptions[] = [];\r\n\r\n      if (this._rushConfiguration.ensureConsistentVersions || updateOtherPackages) {\r\n        // we need to do a mismatch check\r\n        const mismatchFinder: VersionMismatchFinder = VersionMismatchFinder.getMismatches(\r\n          this._rushConfiguration,\r\n          {\r\n            variant: variant\r\n          }\r\n        );\r\n\r\n        const mismatches: string[] = mismatchFinder.getMismatches().filter((mismatch) => {\r\n          return !projects.find((proj) => proj.packageName === mismatch);\r\n        });\r\n        if (mismatches.length) {\r\n          if (!updateOtherPackages) {\r\n            throw new Error(\r\n              `Adding '${packageName}@${version}' to ${project.packageName}` +\r\n                ` causes mismatched dependencies. Use the \"--make-consistent\" flag to update other packages to use` +\r\n                ` this version, or do not specify a SemVer range.`\r\n            );\r\n          }\r\n\r\n          // otherwise we need to go update a bunch of other projects\r\n          const mismatchedVersions: string[] | undefined = mismatchFinder.getVersionsOfMismatch(packageName);\r\n          if (mismatchedVersions) {\r\n            for (const mismatchedVersion of mismatchedVersions) {\r\n              for (const consumer of mismatchFinder.getConsumersOfMismatch(packageName, mismatchedVersion)!) {\r\n                if (consumer instanceof VersionMismatchFinderProject) {\r\n                  otherPackageUpdates.push({\r\n                    project: consumer,\r\n                    packageName: packageName,\r\n                    newVersion: version\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.updateProjects(otherPackageUpdates);\r\n\r\n      allPackageUpdates.push(currentProjectUpdate, ...otherPackageUpdates);\r\n    }\r\n\r\n    for (const { project } of allPackageUpdates) {\r\n      if (project.saveIfModified()) {\r\n        console.log(colors.green('Wrote ') + project.filePath);\r\n      }\r\n    }\r\n\r\n    if (!skipUpdate) {\r\n      console.log();\r\n      console.log(colors.green('Running \"rush update\"'));\r\n      console.log();\r\n      try {\r\n        await installManager.doInstall();\r\n      } finally {\r\n        purgeManager.deleteAll();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates several projects' package.json files\r\n   */\r\n  public updateProjects(projectUpdates: IUpdateProjectOptions[]): void {\r\n    for (const update of projectUpdates) {\r\n      this.updateProject(update);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a single project's package.json file\r\n   */\r\n  public updateProject(options: IUpdateProjectOptions): void {\r\n    let { dependencyType } = options;\r\n    const { project, packageName, newVersion } = options;\r\n\r\n    const oldDependency: PackageJsonDependency | undefined = project.tryGetDependency(packageName);\r\n    const oldDevDependency: PackageJsonDependency | undefined = project.tryGetDevDependency(packageName);\r\n\r\n    const oldDependencyType: DependencyType | undefined = oldDevDependency\r\n      ? oldDevDependency.dependencyType\r\n      : oldDependency\r\n      ? oldDependency.dependencyType\r\n      : undefined;\r\n\r\n    dependencyType = dependencyType || oldDependencyType || DependencyType.Regular;\r\n\r\n    project.addOrUpdateDependency(packageName, newVersion, dependencyType!);\r\n  }\r\n\r\n  /**\r\n   * Selects an appropriate version number for a particular package, given an optional initial SemVer spec.\r\n   * If ensureConsistentVersions, tries to pick a version that will be consistent.\r\n   * Otherwise, will choose the latest semver matching the initialSpec and append the proper range style.\r\n   * @param projects - the projects which will have their package.json's updated\r\n   * @param packageName - the name of the package to be used\r\n   * @param initialSpec - a semver pattern that should be used to find the latest version matching the spec\r\n   * @param implicitlyPinnedVersion - the implicitly preferred (aka common/primary) version of the package in use\r\n   * @param rangeStyle - if this version is selected by querying registry, then this range specifier is prepended to\r\n   *   the selected version.\r\n   */\r\n  private async _getNormalizedVersionSpec(\r\n    projects: RushConfigurationProject[],\r\n    installManager: BaseInstallManager,\r\n    packageName: string,\r\n    initialSpec: string | undefined,\r\n    implicitlyPinnedVersion: string | undefined,\r\n    rangeStyle: SemVerStyle\r\n  ): Promise<string> {\r\n    console.log(colors.gray(`Determining new version for dependency: ${packageName}`));\r\n    if (initialSpec) {\r\n      console.log(`Specified version selector: ${colors.cyan(initialSpec)}`);\r\n    } else {\r\n      console.log(`No version selector was specified, so the version will be determined automatically.`);\r\n    }\r\n    console.log();\r\n\r\n    // determine if the package is a project in the local repository and if the version exists\r\n    const localProject: RushConfigurationProject | undefined = this._tryGetLocalProject(\r\n      packageName,\r\n      projects\r\n    );\r\n\r\n    // if ensureConsistentVersions => reuse the pinned version\r\n    // else, query the registry and use the latest that satisfies semver spec\r\n    if (initialSpec && implicitlyPinnedVersion && initialSpec === implicitlyPinnedVersion) {\r\n      console.log(\r\n        colors.green('Assigning \"') +\r\n          colors.cyan(initialSpec) +\r\n          colors.green(\r\n            `\" for \"${packageName}\" because it matches what other projects are using in this repo.`\r\n          )\r\n      );\r\n      return initialSpec;\r\n    }\r\n\r\n    if (this._rushConfiguration.ensureConsistentVersions && !initialSpec && implicitlyPinnedVersion) {\r\n      console.log(\r\n        `Assigning the version range \"${colors.cyan(implicitlyPinnedVersion)}\" for \"${packageName}\" because` +\r\n          ` it is already used by other projects in this repo.`\r\n      );\r\n      return implicitlyPinnedVersion;\r\n    }\r\n\r\n    await InstallHelpers.ensureLocalPackageManager(\r\n      this._rushConfiguration,\r\n      this._rushGlobalFolder,\r\n      RushConstants.defaultMaxInstallAttempts\r\n    );\r\n\r\n    const useWorkspaces: boolean = !!(\r\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces\r\n    );\r\n    const workspacePrefix: string = 'workspace:';\r\n\r\n    // Trim 'workspace:' notation from the spec, since we're going to be tweaking the range\r\n    if (useWorkspaces && initialSpec && initialSpec.startsWith(workspacePrefix)) {\r\n      initialSpec = initialSpec.substring(workspacePrefix.length).trim();\r\n    }\r\n\r\n    let selectedVersion: string | undefined;\r\n    let selectedVersionPrefix: string = '';\r\n\r\n    if (initialSpec && initialSpec !== 'latest') {\r\n      console.log(colors.gray('Finding versions that satisfy the selector: ') + initialSpec);\r\n      console.log();\r\n\r\n      if (localProject !== undefined) {\r\n        const version: string = localProject.packageJson.version;\r\n        if (semver.satisfies(version, initialSpec)) {\r\n          // For workspaces, assume that specifying the exact version means you always want to consume\r\n          // the local project. Otherwise, use the exact local package version\r\n          if (useWorkspaces) {\r\n            selectedVersion = initialSpec === version ? '*' : initialSpec;\r\n            selectedVersionPrefix = workspacePrefix;\r\n          } else {\r\n            selectedVersion = version;\r\n          }\r\n        } else {\r\n          throw new Error(\r\n            `The dependency being added (\"${packageName}\") is a project in the local Rush repository, ` +\r\n              `but the version specifier provided (${initialSpec}) does not match the local project's version ` +\r\n              `(${version}). Correct the version specifier, omit a version specifier, or include \"${packageName}\" as a ` +\r\n              `cyclicDependencyProject if it is intended for \"${packageName}\" to come from an external feed and not ` +\r\n              'from the local Rush repository.'\r\n          );\r\n        }\r\n      } else {\r\n        console.log(`Querying registry for all versions of \"${packageName}\"...`);\r\n\r\n        let commandArgs: string[];\r\n        if (this._rushConfiguration.packageManager === 'yarn') {\r\n          commandArgs = ['info', packageName, 'versions', '--json'];\r\n        } else {\r\n          commandArgs = ['view', packageName, 'versions', '--json'];\r\n        }\r\n\r\n        const allVersions: string = Utilities.executeCommandAndCaptureOutput(\r\n          this._rushConfiguration.packageManagerToolFilename,\r\n          commandArgs,\r\n          this._rushConfiguration.commonTempFolder\r\n        );\r\n\r\n        let versionList: string[];\r\n        if (this._rushConfiguration.packageManager === 'yarn') {\r\n          versionList = JSON.parse(allVersions).data;\r\n        } else {\r\n          versionList = JSON.parse(allVersions);\r\n        }\r\n\r\n        console.log(colors.gray(`Found ${versionList.length} available versions.`));\r\n\r\n        for (const version of versionList) {\r\n          if (semver.satisfies(version, initialSpec)) {\r\n            selectedVersion = initialSpec;\r\n            console.log(`Found a version that satisfies ${initialSpec}: ${colors.cyan(version)}`);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!selectedVersion) {\r\n          throw new Error(\r\n            `Unable to find a version of \"${packageName}\" that satisfies` +\r\n              ` the version specifier \"${initialSpec}\"`\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (!this._rushConfiguration.ensureConsistentVersions) {\r\n        console.log(\r\n          colors.gray(\r\n            `The \"ensureConsistentVersions\" policy is NOT active, so we will assign the latest version.`\r\n          )\r\n        );\r\n        console.log();\r\n      }\r\n\r\n      if (localProject !== undefined) {\r\n        // For workspaces, assume that no specified version range means you always want to consume\r\n        // the local project. Otherwise, use the exact local package version\r\n        if (useWorkspaces) {\r\n          selectedVersion = '*';\r\n          selectedVersionPrefix = workspacePrefix;\r\n        } else {\r\n          selectedVersion = localProject.packageJson.version;\r\n        }\r\n      } else {\r\n        console.log(`Querying NPM registry for latest version of \"${packageName}\"...`);\r\n\r\n        let commandArgs: string[];\r\n        if (this._rushConfiguration.packageManager === 'yarn') {\r\n          commandArgs = ['info', packageName, 'dist-tags.latest', '--silent'];\r\n        } else {\r\n          commandArgs = ['view', `${packageName}@latest`, 'version'];\r\n        }\r\n\r\n        selectedVersion = Utilities.executeCommandAndCaptureOutput(\r\n          this._rushConfiguration.packageManagerToolFilename,\r\n          commandArgs,\r\n          this._rushConfiguration.commonTempFolder\r\n        ).trim();\r\n      }\r\n\r\n      console.log();\r\n\r\n      console.log(`Found latest version: ${colors.cyan(selectedVersion!)}`);\r\n    }\r\n\r\n    console.log();\r\n\r\n    let reasonForModification: string = '';\r\n    if (selectedVersion !== '*') {\r\n      switch (rangeStyle) {\r\n        case SemVerStyle.Caret: {\r\n          selectedVersionPrefix += '^';\r\n          reasonForModification = ' because the \"--caret\" flag was specified';\r\n          break;\r\n        }\r\n\r\n        case SemVerStyle.Exact: {\r\n          reasonForModification = ' because the \"--exact\" flag was specified';\r\n          break;\r\n        }\r\n\r\n        case SemVerStyle.Tilde: {\r\n          selectedVersionPrefix += '~';\r\n          break;\r\n        }\r\n\r\n        case SemVerStyle.Passthrough: {\r\n          break;\r\n        }\r\n\r\n        default: {\r\n          throw new Error(`Unexpected SemVerStyle ${rangeStyle}.`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const normalizedVersion: string = selectedVersionPrefix + selectedVersion;\r\n    console.log(\r\n      colors.gray(`Assigning version \"${normalizedVersion}\" for \"${packageName}\"${reasonForModification}.`)\r\n    );\r\n    return normalizedVersion;\r\n  }\r\n\r\n  private _collectAllDownstreamDependencies(\r\n    project: RushConfigurationProject\r\n  ): Set<RushConfigurationProject> {\r\n    const allProjectDownstreamDependencies: Set<RushConfigurationProject> = new Set<\r\n      RushConfigurationProject\r\n    >();\r\n\r\n    const collectDependencies: (rushProject: RushConfigurationProject) => void = (\r\n      rushProject: RushConfigurationProject\r\n    ) => {\r\n      for (const downstreamDependencyProject of rushProject.downstreamDependencyProjects) {\r\n        const foundProject: RushConfigurationProject | undefined = this._rushConfiguration.projectsByName.get(\r\n          downstreamDependencyProject\r\n        );\r\n\r\n        if (!foundProject) {\r\n          continue;\r\n        }\r\n\r\n        if (foundProject.cyclicDependencyProjects.has(rushProject.packageName)) {\r\n          continue;\r\n        }\r\n\r\n        if (!allProjectDownstreamDependencies.has(foundProject)) {\r\n          allProjectDownstreamDependencies.add(foundProject);\r\n          collectDependencies(foundProject);\r\n        }\r\n      }\r\n    };\r\n\r\n    collectDependencies(project);\r\n    return allProjectDownstreamDependencies;\r\n  }\r\n\r\n  /**\r\n   * Given a package name, this function returns a {@see RushConfigurationProject} if the package is a project\r\n   * in the local Rush repo and is not marked as cyclic for any of the projects.\r\n   *\r\n   * @remarks\r\n   * This function throws an error if adding the discovered local project as a dependency\r\n   * would create a dependency cycle, or if it would be added to multiple projects.\r\n   */\r\n  private _tryGetLocalProject(\r\n    packageName: string,\r\n    projects: RushConfigurationProject[]\r\n  ): RushConfigurationProject | undefined {\r\n    const foundProject: RushConfigurationProject | undefined = this._rushConfiguration.projectsByName.get(\r\n      packageName\r\n    );\r\n\r\n    if (foundProject === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    if (projects.length > 1) {\r\n      throw new Error(\r\n        `\"rush add\" does not support adding a local project as a dependency to multiple projects at once.`\r\n      );\r\n    }\r\n\r\n    const project: RushConfigurationProject = projects[0];\r\n\r\n    if (project.cyclicDependencyProjects.has(foundProject.packageName)) {\r\n      return undefined;\r\n    }\r\n\r\n    // Are we attempting to add this project to itself?\r\n    if (project === foundProject) {\r\n      throw new Error(\r\n        'Unable to add a project as a dependency of itself unless the dependency is listed as a cyclic dependency ' +\r\n          `in rush.json. This command attempted to add \"${foundProject.packageName}\" as a dependency of itself.`\r\n      );\r\n    }\r\n\r\n    // Are we attempting to create a cycle?\r\n    const downstreamDependencies: Set<RushConfigurationProject> = this._collectAllDownstreamDependencies(\r\n      project\r\n    );\r\n    if (downstreamDependencies.has(foundProject)) {\r\n      throw new Error(\r\n        `Adding \"${foundProject.packageName}\" as a direct or indirect dependency of ` +\r\n          `\"${project.packageName}\" would create a dependency cycle.`\r\n      );\r\n    }\r\n\r\n    return foundProject;\r\n  }\r\n}\r\n"]}