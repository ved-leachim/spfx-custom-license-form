{"version":3,"file":"PackageChangeAnalyzer.js","sourceRoot":"","sources":["../../src/logic/PackageChangeAnalyzer.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oDAA4B;AAC5B,+CAAiC;AAEjC,oEAAkF;AAClF,oEAA+E;AAG/E,+BAA4B;AAC5B,wFAAqF;AAErF,mDAAgD;AAEhD,MAAa,qBAAqB;IAShC,YAAmB,iBAAoC;QAJ/C,uBAAkB,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAK1E,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,SAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAEM,cAAc,CAAC,WAAmB;QACvC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;SAC9B;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;;;OASG;IACI,mBAAmB,CAAC,WAAmB;QAC5C,IAAI,YAAY,GAAuB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAChF,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,WAAW,GAAoC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACtF,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,SAAS,CAAC;aAClB;iBAAM;gBACL,MAAM,sBAAsB,GAAa,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC/E,MAAM,IAAI,GAAgB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACpD,KAAK,MAAM,eAAe,IAAI,sBAAsB,EAAE;oBACpD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;oBAC7B,IAAI,CAAC,MAAM,CAAC,6BAAa,CAAC,aAAa,CAAC,CAAC;oBACzC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,eAAe,CAAE,CAAC,CAAC;oBAC/C,IAAI,CAAC,MAAM,CAAC,6BAAa,CAAC,aAAa,CAAC,CAAC;iBAC1C;gBAED,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;aACxD;SACF;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,QAAQ;QACd,0DAA0D;QAC1D,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE;YACzC,qBAAqB,CAAC,cAAc,GAAG,kCAAc,CAAC;SACvD;QAED,MAAM,eAAe,GAAqC,IAAI,GAAG,EAA+B,CAAC;QAEjG,yDAAyD;QACzD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YACtD,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,GAAG,EAAkB,CAAC,CAAC;SACrE;QAED,MAAM,eAAe,GAA8B,EAAE,CAAC;QAEtD,IAAI,QAA6B,CAAC;QAClC,IAAI;YACF,IAAI,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE;gBACzC,sDAAsD;gBACtD,MAAM,OAAO,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACtD,QAAQ,GAAG,qBAAqB,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;aACtG;iBAAM;gBACL,OAAO,eAAe,CAAC;aACxB;SACF;QAAC,OAAO,CAAC,EAAE;YACV,0GAA0G;YAC1G,2FAA2F;YAC3F,OAAO,CAAC,GAAG,CACT,gBAAM,CAAC,MAAM,CACX,0DAA0D,CAAC,sCAAsC,CAClG,CACF,CAAC;YAEF,OAAO,eAAe,CAAC;SACxB;QAED,0DAA0D;QAC1D,KAAK,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;YACrD,MAAM,WAAW,GAAuB,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAE1E,0EAA0E;YAC1E,IAAI,WAAW,EAAE;gBACf,eAAe,CAAC,GAAG,CAAC,WAAW,CAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aAC3D;iBAAM;gBACL,eAAe,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;aACtC;SACF;QAED,IACE,IAAI,CAAC,kBAAkB,CAAC,cAAc,KAAK,MAAM;YACjD,CAAC,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,aAAa;iBAC5D,yCAAyC,EAC5C;YACA,MAAM,QAAQ,GAA+B,EAAE,CAAC;YAChD,MAAM,8BAA8B,GAAa,EAAE,CAAC;YAEpD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;gBACtD,MAAM,0BAA0B,GAAW,6DAA6B,CAAC,qBAAqB,CAC5F,OAAO,CACR,CAAC;gBACF,MAAM,kCAAkC,GAAW,wBAAI,CAAC,gBAAgB,CACtE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,0BAA0B,CAAC,CAClF,CAAC;gBAEF,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAE;oBAClD,MAAM,IAAI,KAAK,CACb,8BAA8B,kCAAkC,oCAAoC;wBAClG,kCAAkC,CACrC,CAAC;iBACH;gBAED,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,8BAA8B,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;aACzE;YAED,MAAM,OAAO,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACtD,MAAM,MAAM,GAAwB,sCAAkB,CACpD,8BAA8B,EAC9B,IAAI,CAAC,kBAAkB,CAAC,cAAc,EACtC,OAAO,CACR,CAAC;YACF,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChD,MAAM,OAAO,GAA6B,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtD,MAAM,6BAA6B,GAAW,8BAA8B,CAAC,CAAC,CAAC,CAAC;gBAChF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE;oBAC9C,MAAM,IAAI,iCAAa,CAAC,8BAA8B,6BAA6B,EAAE,CAAC,CAAC;iBACxF;gBAED,MAAM,IAAI,GAAW,MAAM,CAAC,GAAG,CAAC,6BAA6B,CAAE,CAAC;gBAChE,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAE,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;aACpF;SACF;aAAM;YACL,oDAAoD;YACpD,MAAM,OAAO,GAAuB,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC;YAEpF,0DAA0D;YAC1D,MAAM,cAAc,GAAW,wBAAI,CAAC,gBAAgB,CAClD,IAAI,CAAC,QAAQ,CACX,IAAI,CAAC,kBAAkB,CAAC,cAAc,EACtC,IAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAChE,CACF,CAAC;YAEF,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;gBACtD,MAAM,cAAc,GAAuB,eAAe,CAAC,cAAc,CAAC,CAAC;gBAC3E,IAAI,cAAc,EAAE;oBAClB,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAE,CAAC,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;iBAC/E;aACF;SACF;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAEO,kBAAkB,CAAC,QAAgB;QACzC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YACtD,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,qBAAqB,CAAC,EAAE;gBACrE,OAAO,OAAO,CAAC,WAAW,CAAC;aAC5B;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,mBAAmB,CAAC,QAAgB,EAAE,UAAkB;QAC9D,OAAO,wBAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC5C,CAAC;CACF;AAxLD,sDAwLC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport colors from 'colors';\r\nimport * as crypto from 'crypto';\r\n\r\nimport { getPackageDeps, getGitHashForFiles } from '@rushstack/package-deps-hash';\r\nimport { Path, InternalError, FileSystem } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { Git } from './Git';\r\nimport { PnpmProjectDependencyManifest } from './pnpm/PnpmProjectDependencyManifest';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { RushConstants } from './RushConstants';\r\n\r\nexport class PackageChangeAnalyzer {\r\n  // Allow this function to be overwritten during unit tests\r\n  public static getPackageDeps: typeof getPackageDeps;\r\n\r\n  private _data: Map<string, Map<string, string>>;\r\n  private _projectStateCache: Map<string, string> = new Map<string, string>();\r\n  private _rushConfiguration: RushConfiguration;\r\n  private readonly _git: Git;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._git = new Git(this._rushConfiguration);\r\n    this._data = this._getData();\r\n  }\r\n\r\n  public getPackageDeps(projectName: string): Map<string, string> | undefined {\r\n    if (!this._data) {\r\n      this._data = this._getData();\r\n    }\r\n\r\n    return this._data.get(projectName);\r\n  }\r\n\r\n  /**\r\n   * The project state hash is calculated in the following way:\r\n   * - Project dependencies are collected (see PackageChangeAnalyzer.getPackageDeps)\r\n   *   - If project dependencies cannot be collected (i.e. - if Git isn't available),\r\n   *     this function returns `undefined`\r\n   * - The (path separator normalized) repo-root-relative dependencies' file paths are sorted\r\n   * - A SHA1 hash is created and each (sorted) file path is fed into the hash and then its\r\n   *   Git SHA is fed into the hash\r\n   * - A hex digest of the hash is returned\r\n   */\r\n  public getProjectStateHash(projectName: string): string | undefined {\r\n    let projectState: string | undefined = this._projectStateCache.get(projectName);\r\n    if (!projectState) {\r\n      const packageDeps: Map<string, string> | undefined = this.getPackageDeps(projectName);\r\n      if (!packageDeps) {\r\n        return undefined;\r\n      } else {\r\n        const sortedPackageDepsFiles: string[] = Array.from(packageDeps.keys()).sort();\r\n        const hash: crypto.Hash = crypto.createHash('sha1');\r\n        for (const packageDepsFile of sortedPackageDepsFiles) {\r\n          hash.update(packageDepsFile);\r\n          hash.update(RushConstants.hashDelimiter);\r\n          hash.update(packageDeps.get(packageDepsFile)!);\r\n          hash.update(RushConstants.hashDelimiter);\r\n        }\r\n\r\n        projectState = hash.digest('hex');\r\n        this._projectStateCache.set(projectName, projectState);\r\n      }\r\n    }\r\n\r\n    return projectState;\r\n  }\r\n\r\n  private _getData(): Map<string, Map<string, string>> {\r\n    // If we are not in a unit test, use the correct resources\r\n    if (!PackageChangeAnalyzer.getPackageDeps) {\r\n      PackageChangeAnalyzer.getPackageDeps = getPackageDeps;\r\n    }\r\n\r\n    const projectHashDeps: Map<string, Map<string, string>> = new Map<string, Map<string, string>>();\r\n\r\n    // pre-populate the map with the projects from the config\r\n    for (const project of this._rushConfiguration.projects) {\r\n      projectHashDeps.set(project.packageName, new Map<string, string>());\r\n    }\r\n\r\n    const noProjectHashes: { [key: string]: string } = {};\r\n\r\n    let repoDeps: Map<string, string>;\r\n    try {\r\n      if (this._git.isPathUnderGitWorkingTree()) {\r\n        // Load the package deps hash for the whole repository\r\n        const gitPath: string = this._git.getGitPathOrThrow();\r\n        repoDeps = PackageChangeAnalyzer.getPackageDeps(this._rushConfiguration.rushJsonFolder, [], gitPath);\r\n      } else {\r\n        return projectHashDeps;\r\n      }\r\n    } catch (e) {\r\n      // If getPackageDeps fails, don't fail the whole build. Treat this case as if we don't know anything about\r\n      // the state of the files in the repo. This can happen if the environment doesn't have Git.\r\n      console.log(\r\n        colors.yellow(\r\n          `Error calculating the state of the repo. (inner error: ${e}). Continuing without diffing files.`\r\n        )\r\n      );\r\n\r\n      return projectHashDeps;\r\n    }\r\n\r\n    // Sort each project folder into its own package deps hash\r\n    for (const [filePath, fileHash] of repoDeps.entries()) {\r\n      const projectName: string | undefined = this._getProjectForFile(filePath);\r\n\r\n      // If we found a project for the file, go ahead and store this file's hash\r\n      if (projectName) {\r\n        projectHashDeps.get(projectName)!.set(filePath, fileHash);\r\n      } else {\r\n        noProjectHashes[filePath] = fileHash;\r\n      }\r\n    }\r\n\r\n    if (\r\n      this._rushConfiguration.packageManager === 'pnpm' &&\r\n      !this._rushConfiguration.experimentsConfiguration.configuration\r\n        .legacyIncrementalBuildDependencyDetection\r\n    ) {\r\n      const projects: RushConfigurationProject[] = [];\r\n      const projectDependencyManifestPaths: string[] = [];\r\n\r\n      for (const project of this._rushConfiguration.projects) {\r\n        const dependencyManifestFilePath: string = PnpmProjectDependencyManifest.getFilePathForProject(\r\n          project\r\n        );\r\n        const relativeDependencyManifestFilePath: string = Path.convertToSlashes(\r\n          path.relative(this._rushConfiguration.rushJsonFolder, dependencyManifestFilePath)\r\n        );\r\n\r\n        if (!FileSystem.exists(dependencyManifestFilePath)) {\r\n          throw new Error(\r\n            `A project dependency file (${relativeDependencyManifestFilePath}) is missing. You may need to run ` +\r\n              '\"rush install\" or \"rush update\".'\r\n          );\r\n        }\r\n\r\n        projects.push(project);\r\n        projectDependencyManifestPaths.push(relativeDependencyManifestFilePath);\r\n      }\r\n\r\n      const gitPath: string = this._git.getGitPathOrThrow();\r\n      const hashes: Map<string, string> = getGitHashForFiles(\r\n        projectDependencyManifestPaths,\r\n        this._rushConfiguration.rushJsonFolder,\r\n        gitPath\r\n      );\r\n      for (let i: number = 0; i < projects.length; i++) {\r\n        const project: RushConfigurationProject = projects[i];\r\n        const projectDependencyManifestPath: string = projectDependencyManifestPaths[i];\r\n        if (!hashes.has(projectDependencyManifestPath)) {\r\n          throw new InternalError(`Expected to get a hash for ${projectDependencyManifestPath}`);\r\n        }\r\n\r\n        const hash: string = hashes.get(projectDependencyManifestPath)!;\r\n        projectHashDeps.get(project.packageName)!.set(projectDependencyManifestPath, hash);\r\n      }\r\n    } else {\r\n      // Determine the current variant from the link JSON.\r\n      const variant: string | undefined = this._rushConfiguration.currentInstalledVariant;\r\n\r\n      // Add the shrinkwrap file to every project's dependencies\r\n      const shrinkwrapFile: string = Path.convertToSlashes(\r\n        path.relative(\r\n          this._rushConfiguration.rushJsonFolder,\r\n          this._rushConfiguration.getCommittedShrinkwrapFilename(variant)\r\n        )\r\n      );\r\n\r\n      for (const project of this._rushConfiguration.projects) {\r\n        const shrinkwrapHash: string | undefined = noProjectHashes[shrinkwrapFile];\r\n        if (shrinkwrapHash) {\r\n          projectHashDeps.get(project.packageName)!.set(shrinkwrapFile, shrinkwrapHash);\r\n        }\r\n      }\r\n    }\r\n\r\n    return projectHashDeps;\r\n  }\r\n\r\n  private _getProjectForFile(filePath: string): string | undefined {\r\n    for (const project of this._rushConfiguration.projects) {\r\n      if (this._fileExistsInFolder(filePath, project.projectRelativeFolder)) {\r\n        return project.packageName;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private _fileExistsInFolder(filePath: string, folderPath: string): boolean {\r\n    return Path.isUnder(filePath, folderPath);\r\n  }\r\n}\r\n"]}