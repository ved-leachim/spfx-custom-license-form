{"version":3,"file":"GitEmailPolicy.js","sourceRoot":"","sources":["../../../src/logic/policy/GitEmailPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\nimport { AlreadyReportedError } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { Git } from '../Git';\r\n\r\nexport class GitEmailPolicy {\r\n  public static validate(rushConfiguration: RushConfiguration): void {\r\n    const git: Git = new Git(rushConfiguration);\r\n\r\n    if (!git.isGitPresent()) {\r\n      // If Git isn't installed, or this Rush project is not under a Git working folder,\r\n      // then we don't care about the Git email\r\n      console.log(\r\n        colors.cyan('Ignoring Git validation because the Git binary was not found in the shell path.') +\r\n          os.EOL\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!git.isPathUnderGitWorkingTree()) {\r\n      // If Git isn't installed, or this Rush project is not under a Git working folder,\r\n      // then we don't care about the Git email\r\n      console.log(colors.cyan('Ignoring Git validation because this is not a Git working folder.' + os.EOL));\r\n      return;\r\n    }\r\n\r\n    // If there isn't a Git policy, then we don't care whether the person configured\r\n    // a Git email address at all.  This helps people who don't\r\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\r\n      if (git.tryGetGitEmail() === undefined) {\r\n        return;\r\n      }\r\n\r\n      // Otherwise, if an email *is* configured at all, then we still perform the basic\r\n      // sanity checks (e.g. no spaces in the address).\r\n    }\r\n\r\n    let userEmail: string;\r\n    try {\r\n      userEmail = git.getGitEmail();\r\n\r\n      // sanity check; a valid email should not contain any whitespace\r\n      // if this fails, then we have another issue to report\r\n      if (!userEmail.match(/^\\S+$/g)) {\r\n        console.log(\r\n          [\r\n            colors.red('Your Git email address is invalid: ' + JSON.stringify(userEmail)),\r\n            '',\r\n            `To configure your Git email address, try something like this:`,\r\n            '',\r\n            ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\r\n            ''\r\n          ].join(os.EOL)\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n    } catch (e) {\r\n      if (e instanceof AlreadyReportedError) {\r\n        console.log(\r\n          colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)')\r\n        );\r\n        throw e;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    if (rushConfiguration.gitAllowedEmailRegExps.length === 0) {\r\n      // If there is no policy, then we're good\r\n      return;\r\n    }\r\n\r\n    console.log('Checking Git policy for this repository.' + os.EOL);\r\n\r\n    // If there is a policy, at least one of the RegExp's must match\r\n    for (const pattern of rushConfiguration.gitAllowedEmailRegExps) {\r\n      const regex: RegExp = new RegExp(`^${pattern}$`, 'i');\r\n      if (userEmail.match(regex)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Show the user's name as well.\r\n    // Ex. \"Mr. Example <mr@example.com>\"\r\n    let fancyEmail: string = colors.cyan(userEmail);\r\n    try {\r\n      const userName: string = Utilities.executeCommandAndCaptureOutput(\r\n        git.gitPath!,\r\n        ['config', 'user.name'],\r\n        '.'\r\n      ).trim();\r\n      if (userName) {\r\n        fancyEmail = `${userName} <${fancyEmail}>`;\r\n      }\r\n    } catch (e) {\r\n      // but if it fails, this isn't critical, so don't bother them about it\r\n    }\r\n\r\n    console.log(\r\n      [\r\n        'Hey there!  To keep things tidy, this repo asks you to submit your Git commits using an email like ' +\r\n          (rushConfiguration.gitAllowedEmailRegExps.length > 1 ? 'one of these patterns:' : 'this pattern:'),\r\n        '',\r\n        ...rushConfiguration.gitAllowedEmailRegExps.map((pattern) => '    ' + colors.cyan(pattern)),\r\n        '',\r\n        '...but yours is configured like this:',\r\n        '',\r\n        `    ${fancyEmail}`,\r\n        '',\r\n        'To fix it, you can use commands like this:',\r\n        '',\r\n        ...GitEmailPolicy.getEmailExampleLines(rushConfiguration),\r\n        ''\r\n      ].join(os.EOL)\r\n    );\r\n\r\n    console.log(colors.red('Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)'));\r\n    throw new AlreadyReportedError();\r\n  }\r\n\r\n  public static getEmailExampleLines(rushConfiguration: RushConfiguration): string[] {\r\n    return [\r\n      colors.cyan('    git config --local user.name \"Mr. Example\"'),\r\n      colors.cyan(\r\n        `    git config --local user.email \"${rushConfiguration.gitSampleEmail || 'example@contoso.com'}\"`\r\n      )\r\n    ];\r\n  }\r\n}\r\n"]}