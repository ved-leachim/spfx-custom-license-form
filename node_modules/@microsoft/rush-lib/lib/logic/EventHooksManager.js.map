{"version":3,"file":"EventHooksManager.js","sourceRoot":"","sources":["../../src/logic/EventHooksManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,uCAAyB;AACzB,oDAA4B;AAG5B,sDAAmD;AACnD,kDAA0C;AAC1C,sDAAmD;AAGnD,MAAa,iBAAiB;IAK5B,YAAmB,iBAAoC;QACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,UAAU,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;IAC9D,CAAC;IAEM,MAAM,CAAC,KAAY,EAAE,OAAgB,EAAE,WAAoB;QAChE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,MAAM,OAAO,GAAa,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,IAAI,WAAW,EAAE;gBACf,OAAO,CAAC,GAAG,CAAC,4BAA4B,kBAAK,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;gBAC3F,OAAO;aACR;YAED,MAAM,SAAS,GAAc,qBAAS,CAAC,KAAK,EAAE,CAAC;YAC/C,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,gBAAM,CAAC,KAAK,CAAC,6BAA6B,kBAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;YAChF,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACzB,IAAI;oBACF,qBAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE;wBACxC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB;wBAC1C,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,cAAc;wBACxD,OAAO,EAAE,IAAI,CAAC,iBAAiB;wBAC/B,YAAY,EAAE,IAAI;wBAClB,sBAAsB,EAAE;4BACtB,cAAc,EAAE,IAAI;yBACrB;qBACF,CAAC,CAAC;iBACJ;gBAAC,OAAO,KAAK,EAAE;oBACd,OAAO,CAAC,KAAK,CACX,EAAE,CAAC,GAAG;wBACJ,gBAAM,CAAC,MAAM,CACX,eAAe,MAAM,mCAAmC;4BACtD,qCAAqC,CACxC,CACJ,CAAC;oBACF,IAAI,OAAO,EAAE;wBACX,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;qBACvC;iBACF;YACH,CAAC,CAAC,CAAC;YACH,SAAS,CAAC,IAAI,EAAE,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,gBAAM,CAAC,KAAK,CAAC,0BAA0B,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;SACvF;IACH,CAAC;CACF;AArDD,8CAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport colors from 'colors';\r\n\r\nimport { EventHooks } from '../api/EventHooks';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { Event } from '../api/EventHooks';\r\nimport { Stopwatch } from '../utilities/Stopwatch';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\n\r\nexport class EventHooksManager {\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _eventHooks: EventHooks;\r\n  private _commonTempFolder: string;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._eventHooks = rushConfiguration.eventHooks;\r\n    this._commonTempFolder = rushConfiguration.commonTempFolder;\r\n  }\r\n\r\n  public handle(event: Event, isDebug: boolean, ignoreHooks: boolean): void {\r\n    if (!this._eventHooks) {\r\n      return;\r\n    }\r\n\r\n    const scripts: string[] = this._eventHooks.get(event);\r\n    if (scripts.length > 0) {\r\n      if (ignoreHooks) {\r\n        console.log(`Skipping event hooks for ${Event[event]} since --ignore-hooks was specified`);\r\n        return;\r\n      }\r\n\r\n      const stopwatch: Stopwatch = Stopwatch.start();\r\n      console.log(os.EOL + colors.green(`Executing event hooks for ${Event[event]}`));\r\n      scripts.forEach((script) => {\r\n        try {\r\n          Utilities.executeLifecycleCommand(script, {\r\n            rushConfiguration: this._rushConfiguration,\r\n            workingDirectory: this._rushConfiguration.rushJsonFolder,\r\n            initCwd: this._commonTempFolder,\r\n            handleOutput: true,\r\n            environmentPathOptions: {\r\n              includeRepoBin: true\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(\r\n            os.EOL +\r\n              colors.yellow(\r\n                `Event hook \"${script}\" failed. Run \"rush\" with --debug` +\r\n                  ` to see detailed error information.`\r\n              )\r\n          );\r\n          if (isDebug) {\r\n            console.error(os.EOL + error.message);\r\n          }\r\n        }\r\n      });\r\n      stopwatch.stop();\r\n      console.log(os.EOL + colors.green(`Event hooks finished. (${stopwatch.toString()})`));\r\n    }\r\n  }\r\n}\r\n"]}