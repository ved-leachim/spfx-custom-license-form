{"version":3,"file":"FileSystemBuildCacheProvider.js","sourceRoot":"","sources":["../../../src/logic/buildCache/FileSystemBuildCacheProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAA0D;AAU1D,MAAM,uBAAuB,GAAW,aAAa,CAAC;AAEtD,MAAa,4BAA4B;IAGvC,YAAmB,OAA6C;QAC9D,IAAI,CAAC,gBAAgB;YACnB,OAAO,CAAC,qBAAqB,CAAC,gBAAgB;gBAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,uBAAuB,CAAC,CAAC;IACnF,CAAC;IAEM,KAAK,CAAC,+BAA+B,CAAC,OAAe;QAC1D,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QAC7E,IAAI;YACF,OAAO,MAAM,8BAAU,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;SACnE;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,8BAAU,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;gBACjC,OAAO,SAAS,CAAC;aAClB;iBAAM;gBACL,MAAM,CAAC,CAAC;aACT;SACF;IACH,CAAC;IAEM,KAAK,CAAC,2BAA2B,CAAC,OAAe,EAAE,WAAmB;QAC3E,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QAC7E,MAAM,8BAAU,CAAC,cAAc,CAAC,kBAAkB,EAAE,WAAW,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/F,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA3BD,oEA2BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { RushUserConfiguration } from '../../api/RushUserConfiguration';\r\n\r\nexport interface IFileSystemBuildCacheProviderOptions {\r\n  rushConfiguration: RushConfiguration;\r\n  rushUserConfiguration: RushUserConfiguration;\r\n}\r\n\r\nconst BUILD_CACHE_FOLDER_NAME: string = 'build-cache';\r\n\r\nexport class FileSystemBuildCacheProvider {\r\n  private readonly _cacheFolderPath: string;\r\n\r\n  public constructor(options: IFileSystemBuildCacheProviderOptions) {\r\n    this._cacheFolderPath =\r\n      options.rushUserConfiguration.buildCacheFolder ||\r\n      path.join(options.rushConfiguration.commonTempFolder, BUILD_CACHE_FOLDER_NAME);\r\n  }\r\n\r\n  public async tryGetCacheEntryBufferByIdAsync(cacheId: string): Promise<Buffer | undefined> {\r\n    const cacheEntryFilePath: string = path.join(this._cacheFolderPath, cacheId);\r\n    try {\r\n      return await FileSystem.readFileToBufferAsync(cacheEntryFilePath);\r\n    } catch (e) {\r\n      if (FileSystem.isNotExistError(e)) {\r\n        return undefined;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  public async trySetCacheEntryBufferAsync(cacheId: string, entryBuffer: Buffer): Promise<boolean> {\r\n    const cacheEntryFilePath: string = path.join(this._cacheFolderPath, cacheId);\r\n    await FileSystem.writeFileAsync(cacheEntryFilePath, entryBuffer, { ensureFolderExists: true });\r\n    return true;\r\n  }\r\n}\r\n"]}