{"version":3,"file":"ProjectBuildCache.js","sourceRoot":"","sources":["../../../src/logic/buildCache/ProjectBuildCache.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,+CAAiC;AACjC,2CAA6B;AAE7B,yCAA2B;AAC3B,uCAAyB;AACzB,oEAA0E;AAK1E,oDAAiD;AAcjD,MAAa,iBAAiB;IAO5B,YAAoB,OAAoD;QACtE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC;QACrD,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,uBAAuB,CAAC,kBAAkB,CAAC;QACnF,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,uBAAuB,CAAC,kBAAkB,CAAC;QACnF,IAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,CAAC;QACvF,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,uBAAuB,CAAC,OAAkC;QACtE,MAAM,EAAE,QAAQ,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC;QACxE,IAAI,CAAC,mBAAmB,EAAE;YACxB,OAAO,SAAS,CAAC;SAClB;QAED,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,EAAE;YAC5F,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAC7B,QAAkB,EAClB,oBAA8C,EAC9C,mBAA6B;QAE7B,MAAM,+BAA+B,GAAW,wBAAI,CAAC,gBAAgB,CACnE,oBAAoB,CAAC,OAAO,CAAC,qBAAqB,CACnD,CAAC;QACF,MAAM,aAAa,GAAa,EAAE,CAAC;QACnC,KAAK,MAAM,gBAAgB,IAAI,oBAAoB,CAAC,wBAAwB,EAAE;YAC5E,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,+BAA+B,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC;SAC9F;QAED,MAAM,gBAAgB,GAAa,EAAE,CAAC;QACtC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE;YACnD,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACxC,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;oBACjC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC7B;aACF;SACF;QAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,QAAQ,CAAC,gBAAgB,CACvB,qFAAqF;gBACnF,sCAAsC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACtE,CAAC;YACF,OAAO,KAAK,CAAC;SACd;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAEM,KAAK,CAAC,wBAAwB,CAAC,QAAkB;QACtD,MAAM,OAAO,GAAuB,IAAI,CAAC,QAAQ,CAAC;QAClD,IAAI,CAAC,OAAO,EAAE;YACZ,QAAQ,CAAC,gBAAgB,CAAC,kDAAkD,CAAC,CAAC;YAC9E,OAAO,KAAK,CAAC;SACd;QAED,IAAI,gBAAgB,GAEJ,MAAM,IAAI,CAAC,wBAAwB,CAAC,+BAA+B,CAAC,OAAO,CAAC,CAAC;QAC7F,MAAM,iBAAiB,GAAY,CAAC,CAAC,gBAAgB,CAAC;QACtD,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACvD,QAAQ,CAAC,gBAAgB,CACvB,sFAAsF,CACvF,CAAC;YAEF,gDAAgD;YAChD,kDAAkD;YAClD,gBAAgB,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,+BAA+B,CACpF,QAAQ,EACR,OAAO,CACR,CAAC;SACH;QAED,IAAI,yBAAuD,CAAC;QAC5D,IAAI,CAAC,gBAAgB,EAAE;YACrB,QAAQ,CAAC,gBAAgB,CAAC,gDAAgD,CAAC,CAAC;YAC5E,OAAO,KAAK,CAAC;SACd;aAAM,IAAI,CAAC,iBAAiB,EAAE;YAC7B,yBAAyB,GAAG,IAAI,CAAC,wBAAwB,CAAC,2BAA2B,CACnF,OAAO,EACP,gBAAgB,CACjB,CAAC;SACH;QAED,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QAEvC,MAAM,iBAAiB,GAAW,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;QAE9D,uBAAuB;QACvB,QAAQ,CAAC,gBAAgB,CAAC,4BAA4B,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnG,MAAM,OAAO,CAAC,GAAG,CACf,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,gBAAwB,EAAE,EAAE,CAC9D,8BAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC,CAC7E,CACF,CAAC;QAEF,MAAM,SAAS,GAAoB,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAC3E,MAAM,iBAAiB,GAAqB,IAAI,OAAO,CACrD,CAAC,OAAkC,EAAE,MAA8B,EAAE,EAAE;YACrE,IAAI;gBACF,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvD,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3C,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3C,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;aACnC;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC,CAAC;aACX;QACH,CAAC,CACF,CAAC;QAEF,IAAI,cAAuB,CAAC;QAC5B,IAAI,uBAAgC,CAAC;QACrC,IAAI,yBAAyB,EAAE;YAC7B,CAAC,cAAc,EAAE,uBAAuB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC5D,iBAAiB;gBACjB,yBAAyB;aAC1B,CAAC,CAAC;SACJ;aAAM;YACL,cAAc,GAAG,MAAM,iBAAiB,CAAC;YACzC,uBAAuB,GAAG,IAAI,CAAC;SAChC;QAED,IAAI,cAAc,EAAE;YAClB,QAAQ,CAAC,SAAS,CAAC,gDAAgD,CAAC,CAAC;SACtE;aAAM;YACL,QAAQ,CAAC,gBAAgB,CAAC,4CAA4C,CAAC,CAAC;SACzE;QAED,IAAI,CAAC,uBAAuB,EAAE;YAC5B,QAAQ,CAAC,gBAAgB,CAAC,uEAAuE,CAAC,CAAC;SACpG;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,QAAkB;;QACnD,MAAM,OAAO,GAAuB,IAAI,CAAC,QAAQ,CAAC;QAClD,IAAI,CAAC,OAAO,EAAE;YACZ,QAAQ,CAAC,gBAAgB,CAAC,kDAAkD,CAAC,CAAC;YAC9E,OAAO,KAAK,CAAC;SACd;QAED,MAAM,iBAAiB,GAAW,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;QAC9D,MAAM,sBAAsB,GAAc,MAAM,OAAO,CAAC,GAAG,CACzD,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CACtD,8BAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC,CACvE,CACF,CAAC;QACF,MAAM,qBAAqB,GAAa,EAAE,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9D,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE;gBAC7B,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/D;SACF;QAED,QAAQ,CAAC,gBAAgB,CAAC,iCAAiC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/F,IAAI,oBAAoB,GAAY,KAAK,CAAC;QAC1C,MAAM,SAAS,GAAoB,GAAG,CAAC,MAAM,CAC3C;YACE,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,IAAI;YACZ,GAAG,EAAE,iBAAiB;YACtB,MAAM,EAAE,CAAC,OAAe,EAAE,IAAkB,EAAE,EAAE;gBAC9C,MAAM,SAAS,GAAa,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC;gBAC3C,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC3B,IAAI,SAAS,CAAC,cAAc,EAAE,EAAE;oBAC9B,QAAQ,CAAC,UAAU,CAAC,sBAAsB,OAAO,0CAA0C,CAAC,CAAC;oBAC7F,oBAAoB,GAAG,IAAI,CAAC;oBAC5B,OAAO,KAAK,CAAC;iBACd;qBAAM;oBACL,OAAO,IAAI,CAAC;iBACb;YACH,CAAC;SACF,EACD,qBAAqB,CACtB,CAAC;QACF,MAAM,gBAAgB,GAAW,MAAM,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;QAChF,IAAI,oBAAoB,EAAE;YACxB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,yBAAyB,GAAqB,IAAI,CAAC,wBAAwB,CAAC,2BAA2B,CAC3G,OAAO,EACP,gBAAgB,CACjB,CAAC;QAEF,MAAM,yBAAyB,GAC7B,OAAA,IAAI,CAAC,wBAAwB,0CAAE,mBAAmB,MAAK,IAAI;YACzD,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,2BAA2B,CAAC,QAAQ,EAAE,OAAO,EAAE,gBAAgB,CAAC;YAChG,CAAC,CAAC,SAAS,CAAC;QAEhB,IAAI,uBAAgC,CAAC;QACrC,IAAI,uBAAgC,CAAC;QACrC,IAAI,yBAAyB,EAAE;YAC7B,CAAC,uBAAuB,EAAE,uBAAuB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACrE,yBAAyB;gBACzB,yBAAyB;aAC1B,CAAC,CAAC;SACJ;aAAM;YACL,uBAAuB,GAAG,IAAI,CAAC;YAC/B,uBAAuB,GAAG,MAAM,yBAAyB,CAAC;SAC3D;QAED,MAAM,OAAO,GAAY,uBAAuB,IAAI,uBAAuB,CAAC;QAC5E,IAAI,OAAO,EAAE;YACX,QAAQ,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC;SACrD;aAAM,IAAI,CAAC,uBAAuB,IAAI,uBAAuB,EAAE;YAC9D,QAAQ,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,CAAC;SAC/D;aAAM,IAAI,uBAAuB,IAAI,CAAC,uBAAuB,EAAE;YAC9D,QAAQ,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,CAAC;SAC/D;aAAM;YACL,QAAQ,CAAC,gBAAgB,CAAC,mDAAmD,CAAC,CAAC;SAChF;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,MAAuB;QAC5D,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAiC,EAAE,MAA8B,EAAE,EAAE;YAC7F,MAAM,KAAK,GAAiB,EAAE,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACpB,MAAM,MAAM,GAAW,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5C,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,WAAW,CAAC,OAAoD;QAC7E,gEAAgE;QAChE,kFAAkF;QAClF,wCAAwC;QACxC,+EAA+E;QAC/E,8BAA8B;QAC9B,4EAA4E;QAC5E,gEAAgE;QAChE,iEAAiE;QACjE,mDAAmD;QACnD,oFAAoF;QACpF,6CAA6C;QAC7C,yCAAyC;QACzC,MAAM,qBAAqB,GAA0B,OAAO,CAAC,qBAAqB,CAAC;QACnF,MAAM,aAAa,GAAa,EAAE,CAAC;QACnC,MAAM,6BAA6B,GAAkC,IAAI,GAAG,EAA4B,CAAC;QACzG,IAAI,iBAAiB,GAAkC,IAAI,GAAG,EAA4B,CAAC;QAC3F,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAE5D,OAAO,iBAAiB,CAAC,IAAI,GAAG,CAAC,EAAE;YACjC,MAAM,oBAAoB,GAAkC,IAAI,GAAG,EAA4B,CAAC;YAChG,KAAK,MAAM,gBAAgB,IAAI,iBAAiB,EAAE;gBAChD,6BAA6B,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAEpD,MAAM,YAAY,GAAuB,qBAAqB,CAAC,mBAAmB,CAChF,gBAAgB,CAAC,WAAW,CAC7B,CAAC;gBACF,IAAI,CAAC,YAAY,EAAE;oBACjB,qEAAqE;oBACrE,OAAO,SAAS,CAAC;iBAClB;qBAAM;oBACL,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACjC,KAAK,MAAM,UAAU,IAAI,gBAAgB,CAAC,uBAAuB,EAAE;wBACjE,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;4BAClD,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;yBACtC;qBACF;iBACF;aACF;YAED,iBAAiB,GAAG,oBAAoB,CAAC;SAC1C;QAED,MAAM,mBAAmB,GAAa,aAAa,CAAC,IAAI,EAAE,CAAC;QAC3D,MAAM,IAAI,GAAgB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,uBAAuB,GAAW,IAAI,CAAC,SAAS,CACpD,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,CACtD,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,6BAAa,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,6BAAa,CAAC,aAAa,CAAC,CAAC;QACzC,KAAK,MAAM,WAAW,IAAI,mBAAmB,EAAE;YAC7C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,6BAAa,CAAC,aAAa,CAAC,CAAC;SAC1C;QAED,MAAM,gBAAgB,GAAW,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEpD,OAAO,OAAO,CAAC,uBAAuB,CAAC,eAAe,CAAC;YACrD,WAAW,EAAE,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW;YAC7D,gBAAgB;SACjB,CAAC,CAAC;IACL,CAAC;CACF;AAlTD,8CAkTC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as crypto from 'crypto';\r\nimport * as path from 'path';\r\nimport type * as stream from 'stream';\r\nimport * as tar from 'tar';\r\nimport * as fs from 'fs';\r\nimport { FileSystem, Path, Terminal } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { PackageChangeAnalyzer } from '../PackageChangeAnalyzer';\r\nimport { RushProjectConfiguration } from '../../api/RushProjectConfiguration';\r\nimport { RushConstants } from '../RushConstants';\r\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\r\nimport { CloudBuildCacheProviderBase } from './CloudBuildCacheProviderBase';\r\nimport { FileSystemBuildCacheProvider } from './FileSystemBuildCacheProvider';\r\n\r\ninterface IProjectBuildCacheOptions {\r\n  buildCacheConfiguration: BuildCacheConfiguration;\r\n  projectConfiguration: RushProjectConfiguration;\r\n  command: string;\r\n  trackedProjectFiles: string[] | undefined;\r\n  packageChangeAnalyzer: PackageChangeAnalyzer;\r\n  terminal: Terminal;\r\n}\r\n\r\nexport class ProjectBuildCache {\r\n  private readonly _project: RushConfigurationProject;\r\n  private readonly _localBuildCacheProvider: FileSystemBuildCacheProvider;\r\n  private readonly _cloudBuildCacheProvider: CloudBuildCacheProviderBase | undefined;\r\n  private readonly _projectOutputFolderNames: string[];\r\n  private readonly _cacheId: string | undefined;\r\n\r\n  private constructor(options: Omit<IProjectBuildCacheOptions, 'terminal'>) {\r\n    this._project = options.projectConfiguration.project;\r\n    this._localBuildCacheProvider = options.buildCacheConfiguration.localCacheProvider;\r\n    this._cloudBuildCacheProvider = options.buildCacheConfiguration.cloudCacheProvider;\r\n    this._projectOutputFolderNames = options.projectConfiguration.projectOutputFolderNames;\r\n    this._cacheId = ProjectBuildCache._getCacheId(options);\r\n  }\r\n\r\n  public static tryGetProjectBuildCache(options: IProjectBuildCacheOptions): ProjectBuildCache | undefined {\r\n    const { terminal, projectConfiguration, trackedProjectFiles } = options;\r\n    if (!trackedProjectFiles) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!ProjectBuildCache._validateProject(terminal, projectConfiguration, trackedProjectFiles)) {\r\n      return undefined;\r\n    }\r\n\r\n    return new ProjectBuildCache(options);\r\n  }\r\n\r\n  private static _validateProject(\r\n    terminal: Terminal,\r\n    projectConfiguration: RushProjectConfiguration,\r\n    trackedProjectFiles: string[]\r\n  ): boolean {\r\n    const normalizedProjectRelativeFolder: string = Path.convertToSlashes(\r\n      projectConfiguration.project.projectRelativeFolder\r\n    );\r\n    const outputFolders: string[] = [];\r\n    for (const outputFolderName of projectConfiguration.projectOutputFolderNames) {\r\n      outputFolders.push(`${path.posix.join(normalizedProjectRelativeFolder, outputFolderName)}/`);\r\n    }\r\n\r\n    const inputOutputFiles: string[] = [];\r\n    for (const file of Object.keys(trackedProjectFiles)) {\r\n      for (const outputFolder of outputFolders) {\r\n        if (file.startsWith(outputFolder)) {\r\n          inputOutputFiles.push(file);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (inputOutputFiles.length > 0) {\r\n      terminal.writeWarningLine(\r\n        'Unable to use build cache. The following files are used to calculate project state ' +\r\n          `and are considered project output: ${inputOutputFiles.join(', ')}`\r\n      );\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public async tryRestoreFromCacheAsync(terminal: Terminal): Promise<boolean> {\r\n    const cacheId: string | undefined = this._cacheId;\r\n    if (!cacheId) {\r\n      terminal.writeWarningLine('Unable to get cache ID. Ensure Git is installed.');\r\n      return false;\r\n    }\r\n\r\n    let cacheEntryBuffer:\r\n      | Buffer\r\n      | undefined = await this._localBuildCacheProvider.tryGetCacheEntryBufferByIdAsync(cacheId);\r\n    const foundInLocalCache: boolean = !!cacheEntryBuffer;\r\n    if (!foundInLocalCache && this._cloudBuildCacheProvider) {\r\n      terminal.writeVerboseLine(\r\n        'This project was not found in the local build cache. Querying the cloud build cache.'\r\n      );\r\n\r\n      // No idea why ESLint is complaining about this:\r\n      // eslint-disable-next-line require-atomic-updates\r\n      cacheEntryBuffer = await this._cloudBuildCacheProvider.tryGetCacheEntryBufferByIdAsync(\r\n        terminal,\r\n        cacheId\r\n      );\r\n    }\r\n\r\n    let setLocalCacheEntryPromise: Promise<boolean> | undefined;\r\n    if (!cacheEntryBuffer) {\r\n      terminal.writeVerboseLine('This project was not found in the build cache.');\r\n      return false;\r\n    } else if (!foundInLocalCache) {\r\n      setLocalCacheEntryPromise = this._localBuildCacheProvider.trySetCacheEntryBufferAsync(\r\n        cacheId,\r\n        cacheEntryBuffer\r\n      );\r\n    }\r\n\r\n    terminal.writeLine('Build cache hit.');\r\n\r\n    const projectFolderPath: string = this._project.projectFolder;\r\n\r\n    // Purge output folders\r\n    terminal.writeVerboseLine(`Clearing cached folders: ${this._projectOutputFolderNames.join(', ')}`);\r\n    await Promise.all(\r\n      this._projectOutputFolderNames.map((outputFolderName: string) =>\r\n        FileSystem.deleteFolderAsync(path.join(projectFolderPath, outputFolderName))\r\n      )\r\n    );\r\n\r\n    const tarStream: stream.Writable = tar.extract({ cwd: projectFolderPath });\r\n    const extractTarPromise: Promise<boolean> = new Promise(\r\n      (resolve: (result: boolean) => void, reject: (error: Error) => void) => {\r\n        try {\r\n          tarStream.on('error', (error: Error) => reject(error));\r\n          tarStream.on('close', () => resolve(true));\r\n          tarStream.on('drain', () => resolve(true));\r\n          tarStream.write(cacheEntryBuffer);\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      }\r\n    );\r\n\r\n    let restoreSuccess: boolean;\r\n    let updateLocalCacheSuccess: boolean;\r\n    if (setLocalCacheEntryPromise) {\r\n      [restoreSuccess, updateLocalCacheSuccess] = await Promise.all([\r\n        extractTarPromise,\r\n        setLocalCacheEntryPromise\r\n      ]);\r\n    } else {\r\n      restoreSuccess = await extractTarPromise;\r\n      updateLocalCacheSuccess = true;\r\n    }\r\n\r\n    if (restoreSuccess) {\r\n      terminal.writeLine('Successfully restored build output from cache.');\r\n    } else {\r\n      terminal.writeWarningLine('Unable to restore build output from cache.');\r\n    }\r\n\r\n    if (!updateLocalCacheSuccess) {\r\n      terminal.writeWarningLine('An error occurred updating the local cache with the cloud cache data.');\r\n    }\r\n\r\n    return restoreSuccess;\r\n  }\r\n\r\n  public async trySetCacheEntryAsync(terminal: Terminal): Promise<boolean> {\r\n    const cacheId: string | undefined = this._cacheId;\r\n    if (!cacheId) {\r\n      terminal.writeWarningLine('Unable to get cache ID. Ensure Git is installed.');\r\n      return false;\r\n    }\r\n\r\n    const projectFolderPath: string = this._project.projectFolder;\r\n    const outputFoldersThatExist: boolean[] = await Promise.all(\r\n      this._projectOutputFolderNames.map((outputFolderName) =>\r\n        FileSystem.existsAsync(path.join(projectFolderPath, outputFolderName))\r\n      )\r\n    );\r\n    const filteredOutputFolders: string[] = [];\r\n    for (let i: number = 0; i < outputFoldersThatExist.length; i++) {\r\n      if (outputFoldersThatExist[i]) {\r\n        filteredOutputFolders.push(this._projectOutputFolderNames[i]);\r\n      }\r\n    }\r\n\r\n    terminal.writeVerboseLine(`Caching build output folders: ${filteredOutputFolders.join(', ')}`);\r\n    let encounteredTarErrors: boolean = false;\r\n    const tarStream: stream.Readable = tar.create(\r\n      {\r\n        gzip: true,\r\n        portable: true,\r\n        strict: true,\r\n        cwd: projectFolderPath,\r\n        filter: (tarPath: string, stat: tar.FileStat) => {\r\n          const tempStats: fs.Stats = new fs.Stats();\r\n          tempStats.mode = stat.mode;\r\n          if (tempStats.isSymbolicLink()) {\r\n            terminal.writeError(`Unable to include \"${tarPath}\" in build cache. It is a symbolic link.`);\r\n            encounteredTarErrors = true;\r\n            return false;\r\n          } else {\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n      filteredOutputFolders\r\n    );\r\n    const cacheEntryBuffer: Buffer = await this._readStreamToBufferAsync(tarStream);\r\n    if (encounteredTarErrors) {\r\n      return false;\r\n    }\r\n\r\n    const setLocalCacheEntryPromise: Promise<boolean> = this._localBuildCacheProvider.trySetCacheEntryBufferAsync(\r\n      cacheId,\r\n      cacheEntryBuffer\r\n    );\r\n\r\n    const setCloudCacheEntryPromise: Promise<boolean> | undefined =\r\n      this._cloudBuildCacheProvider?.isCacheWriteAllowed === true\r\n        ? this._cloudBuildCacheProvider.trySetCacheEntryBufferAsync(terminal, cacheId, cacheEntryBuffer)\r\n        : undefined;\r\n\r\n    let updateLocalCacheSuccess: boolean;\r\n    let updateCloudCacheSuccess: boolean;\r\n    if (setCloudCacheEntryPromise) {\r\n      [updateCloudCacheSuccess, updateLocalCacheSuccess] = await Promise.all([\r\n        setCloudCacheEntryPromise,\r\n        setLocalCacheEntryPromise\r\n      ]);\r\n    } else {\r\n      updateCloudCacheSuccess = true;\r\n      updateLocalCacheSuccess = await setLocalCacheEntryPromise;\r\n    }\r\n\r\n    const success: boolean = updateCloudCacheSuccess && updateLocalCacheSuccess;\r\n    if (success) {\r\n      terminal.writeLine('Successfully set cache entry.');\r\n    } else if (!updateLocalCacheSuccess && updateCloudCacheSuccess) {\r\n      terminal.writeWarningLine('Unable to set local cache entry.');\r\n    } else if (updateLocalCacheSuccess && !updateCloudCacheSuccess) {\r\n      terminal.writeWarningLine('Unable to set cloud cache entry.');\r\n    } else {\r\n      terminal.writeWarningLine('Unable to set both cloud and local cache entries.');\r\n    }\r\n\r\n    return success;\r\n  }\r\n\r\n  private async _readStreamToBufferAsync(stream: stream.Readable): Promise<Buffer> {\r\n    return await new Promise((resolve: (result: Buffer) => void, reject: (error: Error) => void) => {\r\n      const parts: Uint8Array[] = [];\r\n      stream.on('data', (chunk) => parts.push(chunk));\r\n      stream.on('error', (error) => reject(error));\r\n      stream.on('end', () => {\r\n        const result: Buffer = Buffer.concat(parts);\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  private static _getCacheId(options: Omit<IProjectBuildCacheOptions, 'terminal'>): string | undefined {\r\n    // The project state hash is calculated in the following method:\r\n    // - The current project's hash (see PackageChangeAnalyzer.getProjectStateHash) is\r\n    //   calculated and appended to an array\r\n    // - The current project's recursive dependency projects' hashes are calculated\r\n    //   and appended to the array\r\n    // - A SHA1 hash is created and the following data is fed into it, in order:\r\n    //   1. The JSON-serialized list of output folder names for this\r\n    //      project (see ProjectBuildCache._projectOutputFolderNames)\r\n    //   2. The command that will be run in the project\r\n    //   3. Each dependency project hash (from the array constructed in previous steps),\r\n    //      in sorted alphanumerical-sorted order\r\n    // - A hex digest of the hash is returned\r\n    const packageChangeAnalyzer: PackageChangeAnalyzer = options.packageChangeAnalyzer;\r\n    const projectStates: string[] = [];\r\n    const projectsThatHaveBeenProcessed: Set<RushConfigurationProject> = new Set<RushConfigurationProject>();\r\n    let projectsToProcess: Set<RushConfigurationProject> = new Set<RushConfigurationProject>();\r\n    projectsToProcess.add(options.projectConfiguration.project);\r\n\r\n    while (projectsToProcess.size > 0) {\r\n      const newProjectsToProcess: Set<RushConfigurationProject> = new Set<RushConfigurationProject>();\r\n      for (const projectToProcess of projectsToProcess) {\r\n        projectsThatHaveBeenProcessed.add(projectToProcess);\r\n\r\n        const projectState: string | undefined = packageChangeAnalyzer.getProjectStateHash(\r\n          projectToProcess.packageName\r\n        );\r\n        if (!projectState) {\r\n          // If we hit any projects with unknown state, return unknown cache ID\r\n          return undefined;\r\n        } else {\r\n          projectStates.push(projectState);\r\n          for (const dependency of projectToProcess.localDependencyProjects) {\r\n            if (!projectsThatHaveBeenProcessed.has(dependency)) {\r\n              newProjectsToProcess.add(dependency);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      projectsToProcess = newProjectsToProcess;\r\n    }\r\n\r\n    const sortedProjectStates: string[] = projectStates.sort();\r\n    const hash: crypto.Hash = crypto.createHash('sha1');\r\n    const serializedOutputFolders: string = JSON.stringify(\r\n      options.projectConfiguration.projectOutputFolderNames\r\n    );\r\n    hash.update(serializedOutputFolders);\r\n    hash.update(RushConstants.hashDelimiter);\r\n    hash.update(options.command);\r\n    hash.update(RushConstants.hashDelimiter);\r\n    for (const projectHash of sortedProjectStates) {\r\n      hash.update(projectHash);\r\n      hash.update(RushConstants.hashDelimiter);\r\n    }\r\n\r\n    const projectStateHash: string = hash.digest('hex');\r\n\r\n    return options.buildCacheConfiguration.getCacheEntryId({\r\n      projectName: options.projectConfiguration.project.packageName,\r\n      projectStateHash\r\n    });\r\n  }\r\n}\r\n"]}