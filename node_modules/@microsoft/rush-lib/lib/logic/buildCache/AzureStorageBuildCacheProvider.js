"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureStorageBuildCacheProvider = void 0;
const storage_blob_1 = require("@azure/storage-blob");
const identity_1 = require("@azure/identity");
const EnvironmentConfiguration_1 = require("../../api/EnvironmentConfiguration");
const CredentialCache_1 = require("../CredentialCache");
const RushConstants_1 = require("../RushConstants");
const Utilities_1 = require("../../utilities/Utilities");
const CloudBuildCacheProviderBase_1 = require("./CloudBuildCacheProviderBase");
const SAS_TTL_MILLISECONDS = 7 * 24 * 60 * 60 * 1000; // Seven days
class AzureStorageBuildCacheProvider extends CloudBuildCacheProviderBase_1.CloudBuildCacheProviderBase {
    constructor(options) {
        super();
        this._storageAccountName = options.storageAccountName;
        this._storageContainerName = options.storageContainerName;
        this._azureEnvironment = options.azureEnvironment || 'AzurePublicCloud';
        this._blobPrefix = options.blobPrefix;
        this._environmentWriteCredential = EnvironmentConfiguration_1.EnvironmentConfiguration.buildCacheWriteCredential;
        this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;
        if (!(this._azureEnvironment in identity_1.AzureAuthorityHosts)) {
            throw new Error(`The specified Azure Environment ("${this._azureEnvironment}") is invalid. If it is specified, it must ` +
                `be one of: ${Object.keys(identity_1.AzureAuthorityHosts).join(', ')}`);
        }
    }
    get isCacheWriteAllowed() {
        return this._isCacheWriteAllowedByConfiguration || !!this._environmentWriteCredential;
    }
    get _credentialCacheId() {
        if (!this.__credentialCacheId) {
            const cacheIdParts = [
                'azure-blob-storage',
                this._azureEnvironment,
                this._storageAccountName,
                this._storageContainerName
            ];
            if (this._isCacheWriteAllowedByConfiguration) {
                cacheIdParts.push('cacheWriteAllowed');
            }
            return cacheIdParts.join('|');
        }
        return this.__credentialCacheId;
    }
    get _storageAccountUrl() {
        return `https://${this._storageAccountName}.blob.core.windows.net/`;
    }
    async tryGetCacheEntryBufferByIdAsync(terminal, cacheId) {
        const blobClient = await this._getBlobClientForCacheIdAsync(cacheId);
        try {
            const blobExists = await blobClient.exists();
            if (blobExists) {
                return await blobClient.downloadToBuffer();
            }
            else {
                return undefined;
            }
        }
        catch (e) {
            terminal.writeWarningLine(`Error getting cache entry from Azure Storage: ${e}`);
            return undefined;
        }
    }
    async trySetCacheEntryBufferAsync(terminal, cacheId, entryStream) {
        if (!this.isCacheWriteAllowed) {
            terminal.writeErrorLine('Writing to Azure Blob Storage cache is not allowed in the current configuration.');
            return false;
        }
        const blobClient = await this._getBlobClientForCacheIdAsync(cacheId);
        const blockBlobClient = blobClient.getBlockBlobClient();
        try {
            await blockBlobClient.upload(entryStream, entryStream.length);
            return true;
        }
        catch (e) {
            terminal.writeWarningLine(`Error uploading cache entry to Azure Storage: ${e}`);
            return false;
        }
    }
    async updateCachedCredentialAsync(terminal, credential) {
        await CredentialCache_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.setCacheEntry(this._credentialCacheId, credential);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async updateCachedCredentialInteractiveAsync(terminal) {
        const sasQueryParameters = await this._getSasQueryParametersAsync(terminal);
        const sasString = sasQueryParameters.toString();
        await CredentialCache_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.setCacheEntry(this._credentialCacheId, sasString, sasQueryParameters.expiresOn);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async deleteCachedCredentialsAsync(terminal) {
        await CredentialCache_1.CredentialCache.usingAsync({
            supportEditing: true
        }, async (credentialsCache) => {
            credentialsCache.deleteCacheEntry(this._credentialCacheId);
            await credentialsCache.saveIfModifiedAsync();
        });
    }
    async _getBlobClientForCacheIdAsync(cacheId) {
        const client = await this._getContainerClientAsync();
        const blobName = this._blobPrefix ? `${this._blobPrefix}/${cacheId}` : cacheId;
        return client.getBlobClient(blobName);
    }
    async _getContainerClientAsync() {
        var _a;
        if (!this._containerClient) {
            let sasString = this._environmentWriteCredential;
            if (!sasString) {
                let cacheEntry;
                await CredentialCache_1.CredentialCache.usingAsync({
                    supportEditing: false
                }, (credentialsCache) => {
                    cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);
                });
                const expirationTime = (_a = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.expires) === null || _a === void 0 ? void 0 : _a.getTime();
                if (expirationTime && expirationTime < Date.now()) {
                    throw new Error('Cached Azure Storage credentials have expired. ' +
                        `Update the credentials by running "rush ${RushConstants_1.RushConstants.updateCloudCredentialsCommandName}".`);
                }
                else {
                    sasString = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.credential;
                }
            }
            let blobServiceClient;
            if (sasString) {
                const connectionString = this._getConnectionString(sasString);
                blobServiceClient = storage_blob_1.BlobServiceClient.fromConnectionString(connectionString);
            }
            else if (!this._isCacheWriteAllowedByConfiguration) {
                // If cache write isn't allowed and we don't have a credential, assume the blob supports anonymous read
                blobServiceClient = new storage_blob_1.BlobServiceClient(this._storageAccountUrl);
            }
            else {
                throw new Error("An Azure Storage SAS credential hasn't been provided, or has expired. " +
                    `Update the credentials by running "rush ${RushConstants_1.RushConstants.updateCloudCredentialsCommandName}", ` +
                    `or provide a SAS in the ` +
                    `${"RUSH_BUILD_CACHE_WRITE_CREDENTIAL" /* RUSH_BUILD_CACHE_WRITE_CREDENTIAL */} environment variable`);
            }
            this._containerClient = blobServiceClient.getContainerClient(this._storageContainerName);
        }
        return this._containerClient;
    }
    async _getSasQueryParametersAsync(terminal) {
        const authorityHost = identity_1.AzureAuthorityHosts[this._azureEnvironment];
        if (!authorityHost) {
            throw new Error(`Unexpected Azure environment: ${this._azureEnvironment}`);
        }
        const deviceCodeCredential = new identity_1.DeviceCodeCredential(undefined, undefined, (deviceCodeInfo) => {
            Utilities_1.Utilities.printMessageInBox(deviceCodeInfo.message, terminal);
        }, { authorityHost: authorityHost });
        const blobServiceClient = new storage_blob_1.BlobServiceClient(this._storageAccountUrl, deviceCodeCredential);
        const startsOn = new Date();
        const expires = new Date(Date.now() + SAS_TTL_MILLISECONDS);
        const key = await blobServiceClient.getUserDelegationKey(startsOn, expires);
        const containerSasPermissions = new storage_blob_1.ContainerSASPermissions();
        containerSasPermissions.read = true;
        containerSasPermissions.write = this._isCacheWriteAllowedByConfiguration;
        const queryParameters = storage_blob_1.generateBlobSASQueryParameters({
            startsOn: startsOn,
            expiresOn: expires,
            permissions: containerSasPermissions,
            containerName: this._storageContainerName
        }, key, this._storageAccountName);
        return queryParameters;
    }
    _getConnectionString(sasString) {
        const blobEndpoint = `BlobEndpoint=${this._storageAccountUrl}`;
        if (sasString) {
            const connectionString = `${blobEndpoint};SharedAccessSignature=${sasString}`;
            return connectionString;
        }
        else {
            return blobEndpoint;
        }
    }
}
exports.AzureStorageBuildCacheProvider = AzureStorageBuildCacheProvider;
//# sourceMappingURL=AzureStorageBuildCacheProvider.js.map