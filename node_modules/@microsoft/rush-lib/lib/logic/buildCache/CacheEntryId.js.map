{"version":3,"file":"CacheEntryId.js","sourceRoot":"","sources":["../../../src/logic/buildCache/CacheEntryId.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nconst OPTIONS_ARGUMENT_NAME: string = 'options';\r\n\r\nexport interface IGenerateCacheEntryIdOptions {\r\n  projectName: string;\r\n  projectStateHash: string;\r\n}\r\n\r\nexport type GetCacheEntryIdFunction = (options: IGenerateCacheEntryIdOptions) => string;\r\n\r\nconst HASH_TOKEN_NAME: string = 'hash';\r\nconst PROJECT_NAME_TOKEN_NAME: string = 'projectName';\r\n\r\n// This regex matches substrings that look like [token]\r\nconst TOKEN_REGEX: RegExp = /\\[[^\\]]*\\]/g;\r\n\r\nexport class CacheEntryId {\r\n  private constructor() {}\r\n\r\n  public static parsePattern(pattern?: string): GetCacheEntryIdFunction {\r\n    if (!pattern) {\r\n      return ({ projectStateHash }) => projectStateHash;\r\n    } else {\r\n      pattern = pattern.trim();\r\n\r\n      if (pattern.startsWith('/')) {\r\n        throw new Error('Cache entry name patterns may not start with a slash.');\r\n      }\r\n\r\n      const patternWithoutTokens: string = pattern.replace(TOKEN_REGEX, '');\r\n      if (patternWithoutTokens.match(/\\]/)) {\r\n        throw new Error(`Unexpected \"]\" character in cache entry name pattern.`);\r\n      }\r\n\r\n      if (patternWithoutTokens.match(/\\[/)) {\r\n        throw new Error('Unclosed token in cache entry name pattern.');\r\n      }\r\n\r\n      if (!patternWithoutTokens.match(/^[A-z0-9-_\\/]*$/)) {\r\n        throw new Error(\r\n          'Cache entry name pattern contains an invalid character. ' +\r\n            'Only alphanumeric characters, slashes, underscores, and hyphens are allowed.'\r\n        );\r\n      }\r\n\r\n      let foundHashToken: boolean = false;\r\n      const templateString: string = pattern.trim().replace(TOKEN_REGEX, (token: string) => {\r\n        token = token.substring(1, token.length - 1);\r\n        let tokenName: string;\r\n        let tokenAttribute: string | undefined;\r\n        const tokenSplitIndex: number = token.indexOf(':');\r\n        if (tokenSplitIndex === -1) {\r\n          tokenName = token;\r\n        } else {\r\n          tokenName = token.substr(0, tokenSplitIndex);\r\n          tokenAttribute = token.substr(tokenSplitIndex + 1);\r\n        }\r\n\r\n        switch (tokenName) {\r\n          case HASH_TOKEN_NAME: {\r\n            if (tokenAttribute !== undefined) {\r\n              throw new Error(`An attribute isn\\'t supported for the \"${tokenName}\" token.`);\r\n            }\r\n\r\n            foundHashToken = true;\r\n            return `\\${${OPTIONS_ARGUMENT_NAME}.projectStateHash}`;\r\n          }\r\n\r\n          case PROJECT_NAME_TOKEN_NAME: {\r\n            switch (tokenAttribute) {\r\n              case undefined: {\r\n                return `\\${${OPTIONS_ARGUMENT_NAME}.projectName}`;\r\n              }\r\n\r\n              case 'normalize': {\r\n                return `\\${${OPTIONS_ARGUMENT_NAME}.projectName.replace(/\\\\+/g, '++').replace(/\\\\/\\/g, '+')}`;\r\n              }\r\n\r\n              default: {\r\n                throw new Error(`Unexpected attribute \"${tokenAttribute}\" for the \"${tokenName}\" token.`);\r\n              }\r\n            }\r\n          }\r\n\r\n          default: {\r\n            throw new Error(`Unexpected token name \"${tokenName}\".`);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!foundHashToken) {\r\n        throw new Error(`Cache entry name pattern is missing a [${HASH_TOKEN_NAME}] token.`);\r\n      }\r\n\r\n      // eslint-disable-next-line no-new-func\r\n      return new Function(\r\n        OPTIONS_ARGUMENT_NAME,\r\n        `\"use strict\"\\nreturn \\`${templateString}\\`;`\r\n      ) as GetCacheEntryIdFunction;\r\n    }\r\n  }\r\n}\r\n"]}