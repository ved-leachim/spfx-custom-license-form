{"version":3,"file":"UnlinkManager.js","sourceRoot":"","sources":["../../src/logic/UnlinkManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,oDAA4B;AAC5B,2CAA6B;AAC7B,oEAAgF;AAGhF,sDAAmD;AACnD,wFAAqF;AACrF,sDAA0D;AAE1D;;GAEG;AACH,MAAa,aAAa;IAGxB,YAAmB,iBAAoC;QACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,QAAiB,KAAK;QAClC,MAAM,aAAa,GACjB,IAAI,CAAC,kBAAkB,CAAC,WAAW,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,aAAa,CAAC;QAC3F,IAAI,CAAC,KAAK,IAAI,aAAa,EAAE;YAC3B,OAAO,CAAC,GAAG,CACT,gBAAM,CAAC,GAAG,CACR,+EAA+E;gBAC7E,+BAA+B,CAClC,CACF,CAAC;YACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;SAClC;QAED,kCAAmB,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,CAAC;QACvE,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACpC,CAAC;IAED;;;;;;SAMK;IACG,mBAAmB;QACzB,IAAI,iBAAiB,GAAY,KAAK,CAAC;QAEvC,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YAC1D,MAAM,iBAAiB,GAAW,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YACvF,IAAI,8BAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE;gBACxC,OAAO,CAAC,GAAG,CAAC,WAAW,iBAAiB,EAAE,CAAC,CAAC;gBAC5C,qBAAS,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;gBACnD,iBAAiB,GAAG,IAAI,CAAC;aAC1B;YAED,MAAM,iCAAiC,GAAW,6DAA6B,CAAC,qBAAqB,CACnG,WAAW,CACZ,CAAC;YACF,IAAI,8BAAU,CAAC,MAAM,CAAC,iCAAiC,CAAC,EAAE;gBACxD,OAAO,CAAC,GAAG,CAAC,YAAY,iCAAiC,EAAE,CAAC,CAAC;gBAC7D,8BAAU,CAAC,UAAU,CAAC,iCAAiC,CAAC,CAAC;gBACzD,iBAAiB,GAAG,IAAI,CAAC;aAC1B;SACF;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;CACF;AA5DD,sCA4DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as path from 'path';\r\nimport { FileSystem, AlreadyReportedError } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { PnpmProjectDependencyManifest } from './pnpm/PnpmProjectDependencyManifest';\r\nimport { LastLinkFlagFactory } from '../api/LastLinkFlag';\r\n\r\n/**\r\n * This class implements the logic for \"rush unlink\"\r\n */\r\nexport class UnlinkManager {\r\n  private _rushConfiguration: RushConfiguration;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Delete flag file and all the existing node_modules symlinks and all\r\n   * project/.rush/temp/shrinkwrap-deps.json files\r\n   *\r\n   * Returns true if anything was deleted.\r\n   */\r\n  public unlink(force: boolean = false): boolean {\r\n    const useWorkspaces: boolean =\r\n      this._rushConfiguration.pnpmOptions && this._rushConfiguration.pnpmOptions.useWorkspaces;\r\n    if (!force && useWorkspaces) {\r\n      console.log(\r\n        colors.red(\r\n          'Unlinking is not supported when using workspaces. Run \"rush purge\" to remove ' +\r\n            'project node_modules folders.'\r\n        )\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    LastLinkFlagFactory.getCommonTempFlag(this._rushConfiguration).clear();\r\n    return this._deleteProjectFiles();\r\n  }\r\n\r\n  /**\r\n   * Delete:\r\n   *  - all the node_modules symlinks of configured Rush projects\r\n   *  - all of the project/.rush/temp/shrinkwrap-deps.json files of configured Rush projects\r\n   *\r\n   * Returns true if anything was deleted\r\n   * */\r\n  private _deleteProjectFiles(): boolean {\r\n    let didDeleteAnything: boolean = false;\r\n\r\n    for (const rushProject of this._rushConfiguration.projects) {\r\n      const localModuleFolder: string = path.join(rushProject.projectFolder, 'node_modules');\r\n      if (FileSystem.exists(localModuleFolder)) {\r\n        console.log(`Purging ${localModuleFolder}`);\r\n        Utilities.dangerouslyDeletePath(localModuleFolder);\r\n        didDeleteAnything = true;\r\n      }\r\n\r\n      const projectDependencyManifestFilePath: string = PnpmProjectDependencyManifest.getFilePathForProject(\r\n        rushProject\r\n      );\r\n      if (FileSystem.exists(projectDependencyManifestFilePath)) {\r\n        console.log(`Deleting ${projectDependencyManifestFilePath}`);\r\n        FileSystem.deleteFile(projectDependencyManifestFilePath);\r\n        didDeleteAnything = true;\r\n      }\r\n    }\r\n\r\n    return didDeleteAnything;\r\n  }\r\n}\r\n"]}