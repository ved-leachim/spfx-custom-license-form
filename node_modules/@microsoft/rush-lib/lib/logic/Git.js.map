{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../src/logic/Git.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport child_process from 'child_process';\r\nimport gitInfo = require('git-repo-info');\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport colors from 'colors';\r\nimport { Executable, AlreadyReportedError, Path } from '@rushstack/node-core-library';\r\n\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { GitEmailPolicy } from './policy/GitEmailPolicy';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { EnvironmentConfiguration } from '../api/EnvironmentConfiguration';\r\n\r\ninterface IResultOrError<TResult> {\r\n  error?: Error;\r\n  result?: TResult;\r\n}\r\n\r\nexport class Git {\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n  private _checkedGitPath: boolean = false;\r\n  private _gitPath: string | undefined;\r\n  private _checkedGitInfo: boolean = false;\r\n  private _gitInfo: gitInfo.GitRepoInfo | undefined;\r\n\r\n  private _gitEmailResult: IResultOrError<string> | undefined = undefined;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Returns the path to the Git binary if found. Otherwise, return undefined.\r\n   */\r\n  public get gitPath(): string | undefined {\r\n    if (!this._checkedGitPath) {\r\n      this._gitPath = EnvironmentConfiguration.gitBinaryPath || Executable.tryResolve('git');\r\n      this._checkedGitPath = true;\r\n    }\r\n\r\n    return this._gitPath;\r\n  }\r\n\r\n  public getGitPathOrThrow(): string {\r\n    const gitPath: string | undefined = this.gitPath;\r\n    if (!gitPath) {\r\n      throw new Error('Git is not present');\r\n    } else {\r\n      return gitPath;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the Git binary can be found.\r\n   */\r\n  public isGitPresent(): boolean {\r\n    return !!this.gitPath;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the Git binary was found and the current path is under a Git working tree.\r\n   * @param repoInfo - If provided, do the check based on this Git repo info. If not provided,\r\n   * the result of `this.getGitInfo()` is used.\r\n   */\r\n  public isPathUnderGitWorkingTree(repoInfo?: gitInfo.GitRepoInfo): boolean {\r\n    if (this.isGitPresent()) {\r\n      // Do we even have a Git binary?\r\n      if (!repoInfo) {\r\n        repoInfo = this.getGitInfo();\r\n      }\r\n      return !!(repoInfo && repoInfo.sha);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If a Git email address is configured and is nonempty, this returns it.\r\n   * Otherwise, undefined is returned.\r\n   */\r\n  public tryGetGitEmail(): string | undefined {\r\n    const emailResult: IResultOrError<string> = this._tryGetGitEmail();\r\n    if (emailResult.result !== undefined && emailResult.result.length > 0) {\r\n      return emailResult.result;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * If a Git email address is configured and is nonempty, this returns it.\r\n   * Otherwise, configuration instructions are printed to the console,\r\n   * and AlreadyReportedError is thrown.\r\n   */\r\n  public getGitEmail(): string {\r\n    // Determine the user's account\r\n    // Ex: \"bob@example.com\"\r\n    const emailResult: IResultOrError<string> = this._tryGetGitEmail();\r\n    if (emailResult.error) {\r\n      console.log(\r\n        [\r\n          `Error: ${emailResult.error.message}`,\r\n          'Unable to determine your Git configuration using this command:',\r\n          '',\r\n          '    git config user.email',\r\n          ''\r\n        ].join(os.EOL)\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    if (emailResult.result === undefined || emailResult.result.length === 0) {\r\n      console.log(\r\n        [\r\n          'This operation requires that a Git email be specified.',\r\n          '',\r\n          `If you didn't configure your email yet, try something like this:`,\r\n          '',\r\n          ...GitEmailPolicy.getEmailExampleLines(this._rushConfiguration),\r\n          ''\r\n        ].join(os.EOL)\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    return emailResult.result;\r\n  }\r\n\r\n  /**\r\n   * Get the folder where Git hooks should go for the current working tree.\r\n   * Returns undefined if the current path is not under a Git working tree.\r\n   */\r\n  public getHooksFolder(): string | undefined {\r\n    const repoInfo: gitInfo.GitRepoInfo | undefined = this.getGitInfo();\r\n    if (repoInfo && repoInfo.worktreeGitDir) {\r\n      return path.join(repoInfo.worktreeGitDir, 'hooks');\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get information about the current Git working tree.\r\n   * Returns undefined if the current path is not under a Git working tree.\r\n   */\r\n  public getGitInfo(): Readonly<gitInfo.GitRepoInfo> | undefined {\r\n    if (!this._checkedGitInfo) {\r\n      let repoInfo: gitInfo.GitRepoInfo | undefined;\r\n      try {\r\n        // gitInfo() shouldn't usually throw, but wrapping in a try/catch just in case\r\n        repoInfo = gitInfo();\r\n      } catch (ex) {\r\n        // if there's an error, assume we're not in a Git working tree\r\n      }\r\n\r\n      if (repoInfo && this.isPathUnderGitWorkingTree(repoInfo)) {\r\n        this._gitInfo = repoInfo;\r\n      }\r\n      this._checkedGitInfo = true;\r\n    }\r\n    return this._gitInfo;\r\n  }\r\n\r\n  public getRepositoryRootPath(): string | undefined {\r\n    const gitPath: string = this.getGitPathOrThrow();\r\n    const output: child_process.SpawnSyncReturns<string> = Executable.spawnSync(gitPath, [\r\n      'rev-parse',\r\n      '--show-toplevel'\r\n    ]);\r\n\r\n    if (output.status !== 0) {\r\n      return undefined;\r\n    } else {\r\n      return output.stdout.trim();\r\n    }\r\n  }\r\n\r\n  public getChangedFolders(targetBranch: string, shouldFetch: boolean = false): string[] | undefined {\r\n    if (shouldFetch) {\r\n      this._fetchRemoteBranch(targetBranch);\r\n    }\r\n\r\n    const gitPath: string = this.getGitPathOrThrow();\r\n    const output: string = Utilities.executeCommandAndCaptureOutput(\r\n      gitPath,\r\n      ['diff', `${targetBranch}...`, '--dirstat=files,0'],\r\n      this._rushConfiguration.rushJsonFolder\r\n    );\r\n    const lines: string[] = output.split('\\n');\r\n    const result: string[] = [];\r\n    for (const line of lines) {\r\n      if (line) {\r\n        const delimiterIndex: number = line.indexOf('%');\r\n        if (delimiterIndex > 0 && delimiterIndex + 1 < line.length) {\r\n          result.push(line.substring(delimiterIndex + 1).trim());\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param pathPrefix - An optional path prefix \"git diff\"s should be filtered by.\r\n   * @returns\r\n   * An array of paths of repo-root-relative paths of files that are different from\r\n   * those in the provided {@param targetBranch}. If a {@param pathPrefix} is provided,\r\n   * this function only returns results under the that path.\r\n   */\r\n  public getChangedFiles(targetBranch: string, skipFetch: boolean = false, pathPrefix?: string): string[] {\r\n    if (!skipFetch) {\r\n      this._fetchRemoteBranch(targetBranch);\r\n    }\r\n\r\n    const gitPath: string = this.getGitPathOrThrow();\r\n    const output: string = Utilities.executeCommandAndCaptureOutput(\r\n      gitPath,\r\n      ['diff', `${targetBranch}...`, '--name-only', '--no-renames', '--diff-filter=A'],\r\n      this._rushConfiguration.rushJsonFolder\r\n    );\r\n    return output\r\n      .split('\\n')\r\n      .map((line) => {\r\n        if (line) {\r\n          const trimmedLine: string = line.trim();\r\n          if (!pathPrefix || Path.isUnderOrEqual(trimmedLine, pathPrefix)) {\r\n            return trimmedLine;\r\n          }\r\n        } else {\r\n          return undefined;\r\n        }\r\n      })\r\n      .filter((line) => {\r\n        return line && line.length > 0;\r\n      }) as string[];\r\n  }\r\n\r\n  /**\r\n   * Gets the remote default branch that maps to the provided repository url.\r\n   * This method is used by 'Rush change' to find the default remote branch to compare against.\r\n   * If repository url is not provided or if there is no match, returns the default remote's\r\n   * default branch 'origin/master'.\r\n   * If there are more than one matches, returns the first remote's default branch.\r\n   *\r\n   * @param rushConfiguration - rush configuration\r\n   */\r\n  public getRemoteDefaultBranch(): string {\r\n    const repositoryUrl: string | undefined = this._rushConfiguration.repositoryUrl;\r\n    if (repositoryUrl) {\r\n      const gitPath: string = this.getGitPathOrThrow();\r\n      const output: string = Utilities.executeCommandAndCaptureOutput(\r\n        gitPath,\r\n        ['remote'],\r\n        this._rushConfiguration.rushJsonFolder\r\n      ).trim();\r\n      const normalizedRepositoryUrl: string = repositoryUrl.toUpperCase();\r\n      const matchingRemotes: string[] = output.split('\\n').filter((remoteName) => {\r\n        if (remoteName) {\r\n          const remoteUrl: string = Utilities.executeCommandAndCaptureOutput(\r\n            gitPath,\r\n            ['remote', 'get-url', remoteName],\r\n            this._rushConfiguration.rushJsonFolder\r\n          ).trim();\r\n\r\n          if (!remoteUrl) {\r\n            return false;\r\n          }\r\n\r\n          const normalizedRemoteUrl: string = remoteUrl.toUpperCase();\r\n          if (normalizedRemoteUrl.toUpperCase() === normalizedRepositoryUrl) {\r\n            return true;\r\n          }\r\n\r\n          // When you copy a URL from the GitHub web site, they append the \".git\" file extension to the URL.\r\n          // We allow that to be specified in rush.json, even though the file extension gets dropped\r\n          // by \"git clone\".\r\n          if (`${normalizedRemoteUrl}.GIT` === normalizedRepositoryUrl) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      if (matchingRemotes.length > 0) {\r\n        if (matchingRemotes.length > 1) {\r\n          console.log(\r\n            `More than one git remote matches the repository URL. Using the first remote (${matchingRemotes[0]}).`\r\n          );\r\n        }\r\n\r\n        return `${matchingRemotes[0]}/${this._rushConfiguration.repositoryDefaultBranch}`;\r\n      } else {\r\n        console.log(\r\n          colors.yellow(\r\n            `Unable to find a git remote matching the repository URL (${repositoryUrl}). ` +\r\n              'Detected changes are likely to be incorrect.'\r\n          )\r\n        );\r\n\r\n        return this._rushConfiguration.repositoryDefaultFullyQualifiedRemoteBranch;\r\n      }\r\n    } else {\r\n      console.log(\r\n        colors.yellow(\r\n          'A git remote URL has not been specified in rush.json. Setting the baseline remote URL is recommended.'\r\n        )\r\n      );\r\n      return this._rushConfiguration.repositoryDefaultFullyQualifiedRemoteBranch;\r\n    }\r\n  }\r\n\r\n  public hasUncommittedChanges(): boolean {\r\n    return this.getUncommittedChanges().length > 0;\r\n  }\r\n\r\n  /**\r\n   * The list of files changed but not committed\r\n   */\r\n  public getUncommittedChanges(): ReadonlyArray<string> {\r\n    const changes: string[] = [];\r\n    changes.push(...this._getUntrackedChanges());\r\n    changes.push(...this._getDiffOnHEAD());\r\n\r\n    return changes.filter((change) => {\r\n      return change.trim().length > 0;\r\n    });\r\n  }\r\n\r\n  private _tryGetGitEmail(): IResultOrError<string> {\r\n    if (this._gitEmailResult === undefined) {\r\n      const gitPath: string = this.getGitPathOrThrow();\r\n      try {\r\n        this._gitEmailResult = {\r\n          result: Utilities.executeCommandAndCaptureOutput(\r\n            gitPath,\r\n            ['config', 'user.email'],\r\n            this._rushConfiguration.rushJsonFolder\r\n          ).trim()\r\n        };\r\n      } catch (e) {\r\n        this._gitEmailResult = {\r\n          error: e\r\n        };\r\n      }\r\n    }\r\n\r\n    return this._gitEmailResult;\r\n  }\r\n\r\n  private _getUntrackedChanges(): string[] {\r\n    const gitPath: string = this.getGitPathOrThrow();\r\n    const output: string = Utilities.executeCommandAndCaptureOutput(\r\n      gitPath,\r\n      ['ls-files', '--exclude-standard', '--others'],\r\n      this._rushConfiguration.rushJsonFolder\r\n    );\r\n    return output.trim().split('\\n');\r\n  }\r\n\r\n  private _getDiffOnHEAD(): string[] {\r\n    const gitPath: string = this.getGitPathOrThrow();\r\n\r\n    const output: string = Utilities.executeCommandAndCaptureOutput(\r\n      gitPath,\r\n      ['diff', 'HEAD', '--name-only'],\r\n      this._rushConfiguration.rushJsonFolder\r\n    );\r\n    return output.trim().split('\\n');\r\n  }\r\n\r\n  private _tryFetchRemoteBranch(remoteBranchName: string): boolean {\r\n    const firstSlashIndex: number = remoteBranchName.indexOf('/');\r\n    if (firstSlashIndex === -1) {\r\n      throw new Error(\r\n        `Unexpected git remote branch format: ${remoteBranchName}. ` +\r\n          'Expected branch to be in the <remote>/<branch name> format.'\r\n      );\r\n    }\r\n\r\n    const remoteName: string = remoteBranchName.substr(0, firstSlashIndex);\r\n    const branchName: string = remoteBranchName.substr(firstSlashIndex + 1);\r\n    const gitPath: string = this.getGitPathOrThrow();\r\n    const spawnResult: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n      gitPath,\r\n      ['fetch', remoteName, branchName],\r\n      {\r\n        stdio: 'ignore'\r\n      }\r\n    );\r\n    return spawnResult.status === 0;\r\n  }\r\n\r\n  private _fetchRemoteBranch(remoteBranchName: string): void {\r\n    console.log(`Checking for updates to ${remoteBranchName}...`);\r\n    const fetchResult: boolean = this._tryFetchRemoteBranch(remoteBranchName);\r\n    if (!fetchResult) {\r\n      console.log(\r\n        colors.yellow(\r\n          `Error fetching git remote branch ${remoteBranchName}. Detected changed files may be incorrect.`\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}