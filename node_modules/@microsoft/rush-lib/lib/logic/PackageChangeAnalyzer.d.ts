import { getPackageDeps } from '@rushstack/package-deps-hash';
import { RushConfiguration } from '../api/RushConfiguration';
export declare class PackageChangeAnalyzer {
    static getPackageDeps: typeof getPackageDeps;
    private _data;
    private _projectStateCache;
    private _rushConfiguration;
    private readonly _git;
    constructor(rushConfiguration: RushConfiguration);
    getPackageDeps(projectName: string): Map<string, string> | undefined;
    /**
     * The project state hash is calculated in the following way:
     * - Project dependencies are collected (see PackageChangeAnalyzer.getPackageDeps)
     *   - If project dependencies cannot be collected (i.e. - if Git isn't available),
     *     this function returns `undefined`
     * - The (path separator normalized) repo-root-relative dependencies' file paths are sorted
     * - A SHA1 hash is created and each (sorted) file path is fed into the hash and then its
     *   Git SHA is fed into the hash
     * - A hex digest of the hash is returned
     */
    getProjectStateHash(projectName: string): string | undefined;
    private _getData;
    private _getProjectForFile;
    private _fileExistsInFolder;
}
//# sourceMappingURL=PackageChangeAnalyzer.d.ts.map