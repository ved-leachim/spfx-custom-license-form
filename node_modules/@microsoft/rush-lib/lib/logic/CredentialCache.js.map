{"version":3,"file":"CredentialCache.js","sourceRoot":"","sources":["../../src/logic/CredentialCache.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem, JsonFile, JsonSchema, LockFile } from '@rushstack/node-core-library';\r\n\r\nimport { IDisposable, Utilities } from '../utilities/Utilities';\r\nimport { RushUserConfiguration } from '../api/RushUserConfiguration';\r\n\r\nconst CACHE_FILENAME: string = 'credentials.json';\r\nconst LATEST_CREDENTIALS_JSON_VERSION: string = '0.1.0';\r\n\r\ninterface ICredentialCacheJson {\r\n  version: string;\r\n  cacheEntries: {\r\n    [credentialCacheId: string]: ICacheEntryJson;\r\n  };\r\n}\r\n\r\ninterface ICacheEntryJson {\r\n  expires: number;\r\n  credential: string;\r\n}\r\n\r\nexport interface ICredentialCacheEntry {\r\n  expires?: Date;\r\n  credential: string;\r\n}\r\n\r\nexport interface ICredentialCacheOptions {\r\n  supportEditing: boolean;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class CredentialCache implements IDisposable {\r\n  private readonly _cacheFilePath: string;\r\n  private readonly _cacheEntries: Map<string, ICacheEntryJson>;\r\n  private _modified: boolean = false;\r\n  private _disposed: boolean = false;\r\n  private _supportsEditing: boolean;\r\n  private readonly _lockfile: LockFile | undefined;\r\n\r\n  private constructor(\r\n    cacheFilePath: string,\r\n    loadedJson: ICredentialCacheJson | undefined,\r\n    lockfile: LockFile | undefined\r\n  ) {\r\n    if (loadedJson && loadedJson.version !== LATEST_CREDENTIALS_JSON_VERSION) {\r\n      throw new Error(`Unexpected credentials.json file version: ${loadedJson.version}`);\r\n    }\r\n\r\n    this._cacheFilePath = cacheFilePath;\r\n    this._cacheEntries = new Map<string, ICacheEntryJson>(Object.entries(loadedJson?.cacheEntries || {}));\r\n    this._supportsEditing = !!lockfile;\r\n    this._lockfile = lockfile;\r\n  }\r\n\r\n  public static async initializeAsync(options: ICredentialCacheOptions): Promise<CredentialCache> {\r\n    const rushUserFolderPath: string = RushUserConfiguration.getRushUserFolderPath();\r\n    const cacheFilePath: string = path.join(rushUserFolderPath, CACHE_FILENAME);\r\n    const jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n      path.resolve(__dirname, '..', 'schemas', 'credentials.schema.json')\r\n    );\r\n\r\n    let loadedJson: ICredentialCacheJson | undefined;\r\n    try {\r\n      loadedJson = await JsonFile.loadAndValidateAsync(cacheFilePath, jsonSchema);\r\n    } catch (e) {\r\n      if (!FileSystem.isErrnoException(e)) {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    let lockfile: LockFile | undefined;\r\n    if (options.supportEditing) {\r\n      lockfile = await LockFile.acquire(rushUserFolderPath, `${CACHE_FILENAME}.lock`);\r\n    }\r\n\r\n    const credentialCache: CredentialCache = new CredentialCache(cacheFilePath, loadedJson, lockfile);\r\n    return credentialCache;\r\n  }\r\n\r\n  public static async usingAsync(\r\n    options: ICredentialCacheOptions,\r\n    doActionAsync: (credentialCache: CredentialCache) => Promise<void> | void\r\n  ): Promise<void> {\r\n    await Utilities.usingAsync(async () => await CredentialCache.initializeAsync(options), doActionAsync);\r\n  }\r\n\r\n  public setCacheEntry(cacheId: string, credential: string, expires?: Date): void {\r\n    this._validate(true);\r\n\r\n    const expiresMilliseconds: number = expires?.getTime() || 0;\r\n    const existingCacheEntry: ICacheEntryJson | undefined = this._cacheEntries.get(cacheId);\r\n    if (\r\n      existingCacheEntry?.credential !== credential ||\r\n      existingCacheEntry?.expires !== expiresMilliseconds\r\n    ) {\r\n      this._modified = true;\r\n      this._cacheEntries.set(cacheId, {\r\n        expires: expiresMilliseconds,\r\n        credential\r\n      });\r\n    }\r\n  }\r\n\r\n  public tryGetCacheEntry(cacheId: string): ICredentialCacheEntry | undefined {\r\n    this._validate(false);\r\n\r\n    const cacheEntry: ICacheEntryJson | undefined = this._cacheEntries.get(cacheId);\r\n    if (cacheEntry) {\r\n      const result: ICredentialCacheEntry = {\r\n        expires: cacheEntry.expires ? new Date(cacheEntry.expires) : undefined,\r\n        credential: cacheEntry.credential\r\n      };\r\n\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public deleteCacheEntry(cacheId: string): void {\r\n    this._validate(true);\r\n\r\n    if (this._cacheEntries.has(cacheId)) {\r\n      this._modified = true;\r\n      this._cacheEntries.delete(cacheId);\r\n    }\r\n  }\r\n\r\n  public trimExpiredEntries(): void {\r\n    this._validate(true);\r\n\r\n    const now: number = Date.now();\r\n    for (const [cacheId, cacheEntry] of this._cacheEntries.entries()) {\r\n      if (cacheEntry.expires < now) {\r\n        this._cacheEntries.delete(cacheId);\r\n        this._modified = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  public async saveIfModifiedAsync(): Promise<void> {\r\n    this._validate(true);\r\n\r\n    if (this._modified) {\r\n      const cacheEntriesJson: { [cacheId: string]: ICacheEntryJson } = {};\r\n      for (const [cacheId, cacheEntry] of this._cacheEntries.entries()) {\r\n        cacheEntriesJson[cacheId] = cacheEntry;\r\n      }\r\n\r\n      const newJson: ICredentialCacheJson = {\r\n        version: LATEST_CREDENTIALS_JSON_VERSION,\r\n        cacheEntries: cacheEntriesJson\r\n      };\r\n      await JsonFile.saveAsync(newJson, this._cacheFilePath, {\r\n        ensureFolderExists: true,\r\n        updateExistingFile: true\r\n      });\r\n\r\n      this._modified = false;\r\n    }\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._lockfile?.release();\r\n    this._disposed = true;\r\n  }\r\n\r\n  private _validate(requiresEditing: boolean): void {\r\n    if (!this._supportsEditing && requiresEditing) {\r\n      throw new Error(`This instance of ${CredentialCache.name} does not support editing.`);\r\n    }\r\n\r\n    if (this._disposed) {\r\n      throw new Error(`This instance of ${CredentialCache.name} has been disposed.`);\r\n    }\r\n  }\r\n}\r\n"]}