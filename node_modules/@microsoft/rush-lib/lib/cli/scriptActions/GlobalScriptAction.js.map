{"version":3,"file":"GlobalScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/GlobalScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  FileSystem,\r\n  LockFile,\r\n  IPackageJson,\r\n  JsonFile,\r\n  AlreadyReportedError\r\n} from '@rushstack/node-core-library';\r\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { InstallHelpers } from '../../logic/installManager/InstallHelpers';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { LastInstallFlag } from '../../api/LastInstallFlag';\r\nimport { Autoinstaller } from '../../logic/Autoinstaller';\r\n\r\n/**\r\n * Constructor parameters for GlobalScriptAction.\r\n */\r\nexport interface IGlobalScriptActionOptions extends IBaseScriptActionOptions {\r\n  shellCommand: string;\r\n  autoinstallerName: string | undefined;\r\n}\r\n\r\n/**\r\n * This class implements custom commands that are run once globally for the entire repo\r\n * (versus bulk commands, which run separately for each project).  The action executes\r\n * a user-defined script file.\r\n *\r\n * @remarks\r\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\r\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\r\n * invoke scripts from package.json in the same way as a custom command.\r\n */\r\nexport class GlobalScriptAction extends BaseScriptAction {\r\n  private readonly _shellCommand: string;\r\n  private readonly _autoinstallerName: string;\r\n  private readonly _autoinstallerFullPath: string;\r\n\r\n  public constructor(options: IGlobalScriptActionOptions) {\r\n    super(options);\r\n    this._shellCommand = options.shellCommand;\r\n    this._autoinstallerName = options.autoinstallerName || '';\r\n\r\n    if (this._autoinstallerName) {\r\n      Autoinstaller.validateName(this._autoinstallerName);\r\n\r\n      // Example: .../common/autoinstallers/my-task\r\n      this._autoinstallerFullPath = path.join(\r\n        this.rushConfiguration.commonAutoinstallersFolder,\r\n        this._autoinstallerName\r\n      );\r\n\r\n      if (!FileSystem.exists(this._autoinstallerFullPath)) {\r\n        throw new Error(\r\n          `The custom command \"${this.actionName}\" specifies an \"autoinstallerName\" setting` +\r\n            ' but the path does not exist: ' +\r\n            this._autoinstallerFullPath\r\n        );\r\n      }\r\n\r\n      // Example: .../common/autoinstallers/my-task/package.json\r\n      const packageJsonPath: string = path.join(this._autoinstallerFullPath, 'package.json');\r\n      if (!FileSystem.exists(packageJsonPath)) {\r\n        throw new Error(\r\n          `The custom command \"${this.actionName}\" specifies an \"autoinstallerName\" setting` +\r\n            ` whose package.json file was not found: ` +\r\n            packageJsonPath\r\n        );\r\n      }\r\n\r\n      const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\r\n\r\n      if (packageJson.name !== this._autoinstallerName) {\r\n        throw new Error(\r\n          `The custom command \"${this.actionName}\" specifies an \"autoinstallerName\" setting,` +\r\n            ` but the package.json file's \"name\" field is not \"${this._autoinstallerName}\": ` +\r\n            packageJsonPath\r\n        );\r\n      }\r\n    } else {\r\n      this._autoinstallerFullPath = '';\r\n    }\r\n  }\r\n\r\n  private async _prepareAutoinstallerName(): Promise<void> {\r\n    await InstallHelpers.ensureLocalPackageManager(\r\n      this.rushConfiguration,\r\n      this.rushGlobalFolder,\r\n      RushConstants.defaultMaxInstallAttempts\r\n    );\r\n\r\n    // Example: common/autoinstallers/my-task/package.json\r\n    const relativePathForLogs: string = path.relative(\r\n      this.rushConfiguration.rushJsonFolder,\r\n      this._autoinstallerFullPath\r\n    );\r\n\r\n    console.log(`Acquiring lock for \"${relativePathForLogs}\" folder...`);\r\n\r\n    const lock: LockFile = await LockFile.acquire(this._autoinstallerFullPath, 'autoinstaller');\r\n\r\n    // Example: .../common/autoinstallers/my-task/.rush/temp\r\n    const lastInstallFlagPath: string = path.join(\r\n      this._autoinstallerFullPath,\r\n      RushConstants.projectRushFolderName,\r\n      'temp'\r\n    );\r\n\r\n    const packageJsonPath: string = path.join(this._autoinstallerFullPath, 'package.json');\r\n    const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\r\n\r\n    const lastInstallFlag: LastInstallFlag = new LastInstallFlag(lastInstallFlagPath, {\r\n      node: process.versions.node,\r\n      packageManager: this.rushConfiguration.packageManager,\r\n      packageManagerVersion: this.rushConfiguration.packageManagerToolVersion,\r\n      packageJson: packageJson\r\n    });\r\n\r\n    if (!lastInstallFlag.isValid() || lock.dirtyWhenAcquired) {\r\n      // Example: ../common/autoinstallers/my-task/node_modules\r\n      const nodeModulesFolder: string = path.join(this._autoinstallerFullPath, 'node_modules');\r\n\r\n      if (FileSystem.exists(nodeModulesFolder)) {\r\n        console.log('Deleting old files from ' + nodeModulesFolder);\r\n        FileSystem.ensureEmptyFolder(nodeModulesFolder);\r\n      }\r\n\r\n      // Copy: .../common/autoinstallers/my-task/.npmrc\r\n      Utilities.syncNpmrc(this.rushConfiguration.commonRushConfigFolder, this._autoinstallerFullPath);\r\n\r\n      console.log(`Installing dependencies under ${this._autoinstallerFullPath}...\\n`);\r\n\r\n      Utilities.executeCommand({\r\n        command: this.rushConfiguration.packageManagerToolFilename,\r\n        args: ['install', '--frozen-lockfile'],\r\n        workingDirectory: this._autoinstallerFullPath,\r\n        keepEnvironment: true\r\n      });\r\n\r\n      // Create file: ../common/autoinstallers/my-task/.rush/temp/last-install.flag\r\n      lastInstallFlag.create();\r\n\r\n      console.log('Autoinstall completed successfully\\n');\r\n    } else {\r\n      console.log('Autoinstaller folder is already up to date\\n');\r\n    }\r\n\r\n    lock.release();\r\n  }\r\n\r\n  public async runAsync(): Promise<void> {\r\n    const additionalPathFolders: string[] = [];\r\n\r\n    if (this._autoinstallerName) {\r\n      await this._prepareAutoinstallerName();\r\n\r\n      const autoinstallerNameBinPath: string = path.join(this._autoinstallerFullPath, 'node_modules', '.bin');\r\n      additionalPathFolders.push(autoinstallerNameBinPath);\r\n    }\r\n\r\n    // Collect all custom parameter values\r\n    const customParameterValues: string[] = [];\r\n\r\n    for (const customParameter of this.customParameters) {\r\n      customParameter.appendToArgList(customParameterValues);\r\n    }\r\n\r\n    let shellCommand: string = this._shellCommand;\r\n    if (customParameterValues.length > 0) {\r\n      shellCommand += ' ' + customParameterValues.join(' ');\r\n    }\r\n\r\n    const exitCode: number = Utilities.executeLifecycleCommand(shellCommand, {\r\n      rushConfiguration: this.rushConfiguration,\r\n      workingDirectory: this.rushConfiguration.rushJsonFolder,\r\n      initCwd: this.rushConfiguration.commonTempFolder,\r\n      handleOutput: false,\r\n      environmentPathOptions: {\r\n        includeRepoBin: true,\r\n        additionalPathFolders: additionalPathFolders\r\n      }\r\n    });\r\n\r\n    process.exitCode = exitCode;\r\n\r\n    if (exitCode > 0) {\r\n      console.log(os.EOL + colors.red(`The script failed with exit code ${exitCode}`));\r\n      throw new AlreadyReportedError();\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this.defineScriptParameters();\r\n  }\r\n}\r\n"]}