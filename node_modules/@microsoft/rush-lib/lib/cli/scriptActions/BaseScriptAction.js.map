{"version":3,"file":"BaseScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/BaseScriptAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,8DAAmF;AAEnF,6DAA0D;AAS1D;;;;;;;;;GASG;AACH,MAAsB,gBAAiB,SAAQ,+BAAc;IAI3D,YAAmB,OAAiC;QAClD,KAAK,CAAC,OAAO,CAAC,CAAC;QAHE,qBAAgB,GAA2B,EAAE,CAAC;QAI/D,IAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC,wBAAwB,CAAC;IACpE,CAAC;IAES,sBAAsB;QAC9B,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;YACnC,OAAO;SACR;QAED,4DAA4D;QAC5D,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,yBAAyB,CAAC,UAAU,EAAE;YACrE,IAAI,UAAU,GAAY,KAAK,CAAC;YAChC,KAAK,MAAM,iBAAiB,IAAI,aAAa,CAAC,kBAAkB,EAAE;gBAChE,IAAI,iBAAiB,KAAK,IAAI,CAAC,UAAU,EAAE;oBACzC,UAAU,GAAG,IAAI,CAAC;iBACnB;aACF;YAED,IAAI,UAAU,EAAE;gBACd,IAAI,eAAiD,CAAC;gBAEtD,QAAQ,aAAa,CAAC,aAAa,EAAE;oBACnC,KAAK,MAAM;wBACT,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;4BACzC,kBAAkB,EAAE,aAAa,CAAC,SAAS;4BAC3C,iBAAiB,EAAE,aAAa,CAAC,QAAQ;4BACzC,WAAW,EAAE,aAAa,CAAC,WAAW;4BACtC,QAAQ,EAAE,aAAa,CAAC,QAAQ;yBACjC,CAAC,CAAC;wBACH,MAAM;oBACR,KAAK,QAAQ;wBACX,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC;4BAC3C,kBAAkB,EAAE,aAAa,CAAC,SAAS;4BAC3C,iBAAiB,EAAE,aAAa,CAAC,QAAQ;4BACzC,WAAW,EAAE,aAAa,CAAC,WAAW;4BACtC,QAAQ,EAAE,aAAa,CAAC,QAAQ;4BAChC,YAAY,EAAE,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;4BAC3D,YAAY,EAAE,aAAa,CAAC,YAAY;yBACzC,CAAC,CAAC;wBACH,MAAM;oBACR,KAAK,QAAQ;wBACX,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC;4BAC3C,iBAAiB,EAAE,aAAa,CAAC,QAAQ;4BACzC,kBAAkB,EAAE,aAAa,CAAC,SAAS;4BAC3C,WAAW,EAAE,aAAa,CAAC,WAAW;4BACtC,QAAQ,EAAE,aAAa,CAAC,QAAQ;4BAChC,YAAY,EAAE,aAAa,CAAC,YAAY;yBACzC,CAAC,CAAC;wBACH,MAAM;oBACR;wBACE,MAAM,IAAI,KAAK,CACb,GAAG,6BAAa,CAAC,mBAAmB,yBAAyB,aAAc,CAAC,QAAQ,GAAG;4BACrF,yCAAyC,aAAc,CAAC,aAAa,GAAG,CAC3E,CAAC;iBACL;gBAED,IAAI,eAAe,EAAE;oBACnB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBAC7C;aACF;SACF;IACH,CAAC;CACF;AAnED,4CAmEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CommandLineParameter } from '@rushstack/ts-command-line';\r\nimport { BaseRushAction, IBaseRushActionOptions } from '../actions/BaseRushAction';\r\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\n\r\n/**\r\n * Constructor parameters for BaseScriptAction\r\n */\r\nexport interface IBaseScriptActionOptions extends IBaseRushActionOptions {\r\n  commandLineConfiguration: CommandLineConfiguration | undefined;\r\n}\r\n\r\n/**\r\n * Base class for command-line actions that are implemented using user-defined scripts.\r\n *\r\n * @remarks\r\n * Compared to the normal built-in actions, these actions are special because (1) they\r\n * can be discovered dynamically via common/config/command-line.json, and (2)\r\n * user-defined command-line parameters can be passed through to the script.\r\n *\r\n * The two subclasses are BulkScriptAction and GlobalScriptAction.\r\n */\r\nexport abstract class BaseScriptAction extends BaseRushAction {\r\n  protected readonly _commandLineConfiguration: CommandLineConfiguration | undefined;\r\n  protected readonly customParameters: CommandLineParameter[] = [];\r\n\r\n  public constructor(options: IBaseScriptActionOptions) {\r\n    super(options);\r\n    this._commandLineConfiguration = options.commandLineConfiguration;\r\n  }\r\n\r\n  protected defineScriptParameters(): void {\r\n    if (!this._commandLineConfiguration) {\r\n      return;\r\n    }\r\n\r\n    // Find any parameters that are associated with this command\r\n    for (const parameterJson of this._commandLineConfiguration.parameters) {\r\n      let associated: boolean = false;\r\n      for (const associatedCommand of parameterJson.associatedCommands) {\r\n        if (associatedCommand === this.actionName) {\r\n          associated = true;\r\n        }\r\n      }\r\n\r\n      if (associated) {\r\n        let customParameter: CommandLineParameter | undefined;\r\n\r\n        switch (parameterJson.parameterKind) {\r\n          case 'flag':\r\n            customParameter = this.defineFlagParameter({\r\n              parameterShortName: parameterJson.shortName,\r\n              parameterLongName: parameterJson.longName,\r\n              description: parameterJson.description,\r\n              required: parameterJson.required\r\n            });\r\n            break;\r\n          case 'choice':\r\n            customParameter = this.defineChoiceParameter({\r\n              parameterShortName: parameterJson.shortName,\r\n              parameterLongName: parameterJson.longName,\r\n              description: parameterJson.description,\r\n              required: parameterJson.required,\r\n              alternatives: parameterJson.alternatives.map((x) => x.name),\r\n              defaultValue: parameterJson.defaultValue\r\n            });\r\n            break;\r\n          case 'string':\r\n            customParameter = this.defineStringParameter({\r\n              parameterLongName: parameterJson.longName,\r\n              parameterShortName: parameterJson.shortName,\r\n              description: parameterJson.description,\r\n              required: parameterJson.required,\r\n              argumentName: parameterJson.argumentName\r\n            });\r\n            break;\r\n          default:\r\n            throw new Error(\r\n              `${RushConstants.commandLineFilename} defines a parameter \"${parameterJson!.longName}\"` +\r\n                ` using an unsupported parameter kind \"${parameterJson!.parameterKind}\"`\r\n            );\r\n        }\r\n\r\n        if (customParameter) {\r\n          this.customParameters.push(customParameter);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}