{"version":3,"file":"BulkScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/BulkScriptAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport colors from 'colors';\r\n\r\nimport { AlreadyReportedError, ConsoleTerminalProvider, Terminal } from '@rushstack/node-core-library';\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineStringListParameter,\r\n  CommandLineParameterKind\r\n} from '@rushstack/ts-command-line';\r\nimport { PackageName } from '@rushstack/node-core-library';\r\n\r\nimport { Event } from '../../index';\r\nimport { SetupChecks } from '../../logic/SetupChecks';\r\nimport { TaskSelector } from '../../logic/TaskSelector';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\r\nimport { TaskRunner } from '../../logic/taskRunner/TaskRunner';\r\nimport { TaskCollection } from '../../logic/taskRunner/TaskCollection';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { EnvironmentVariableNames } from '../../api/EnvironmentConfiguration';\r\nimport { LastLinkFlag, LastLinkFlagFactory } from '../../api/LastLinkFlag';\r\nimport { IRushConfigurationProjectJson } from '../../api/RushConfigurationProject';\r\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\r\n\r\n/**\r\n * Constructor parameters for BulkScriptAction.\r\n */\r\nexport interface IBulkScriptActionOptions extends IBaseScriptActionOptions {\r\n  enableParallelism: boolean;\r\n  ignoreMissingScript: boolean;\r\n  ignoreDependencyOrder: boolean;\r\n  incremental: boolean;\r\n  allowWarningsInSuccessfulBuild: boolean;\r\n\r\n  /**\r\n   * Optional command to run. Otherwise, use the `actionName` as the command to run.\r\n   */\r\n  commandToRun?: string;\r\n}\r\n\r\n/**\r\n * This class implements bulk commands which are run individually for each project in the repo,\r\n * possibly in parallel.  The action executes a script found in the project's package.json file.\r\n *\r\n * @remarks\r\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\r\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\r\n * execute scripts from package.json in the same as any custom command.\r\n */\r\nexport class BulkScriptAction extends BaseScriptAction {\r\n  private _enableParallelism: boolean;\r\n  private _ignoreMissingScript: boolean;\r\n  private _isIncrementalBuildAllowed: boolean;\r\n  private _commandToRun: string;\r\n\r\n  private _changedProjectsOnly!: CommandLineFlagParameter;\r\n  private _fromFlag!: CommandLineStringListParameter;\r\n  private _toFlag!: CommandLineStringListParameter;\r\n  private _fromVersionPolicy!: CommandLineStringListParameter;\r\n  private _toVersionPolicy!: CommandLineStringListParameter;\r\n  private _verboseParameter!: CommandLineFlagParameter;\r\n  private _parallelismParameter: CommandLineStringParameter | undefined;\r\n  private _ignoreHooksParameter!: CommandLineFlagParameter;\r\n  private _ignoreDependencyOrder: boolean;\r\n  private _allowWarningsInSuccessfulBuild: boolean;\r\n\r\n  public constructor(options: IBulkScriptActionOptions) {\r\n    super(options);\r\n    this._enableParallelism = options.enableParallelism;\r\n    this._ignoreMissingScript = options.ignoreMissingScript;\r\n    this._isIncrementalBuildAllowed = options.incremental;\r\n    this._commandToRun = options.commandToRun || options.actionName;\r\n    this._ignoreDependencyOrder = options.ignoreDependencyOrder;\r\n    this._allowWarningsInSuccessfulBuild = options.allowWarningsInSuccessfulBuild;\r\n  }\r\n\r\n  public async runAsync(): Promise<void> {\r\n    // TODO: Replace with last-install.flag when \"rush link\" and \"rush unlink\" are deprecated\r\n    const lastLinkFlag: LastLinkFlag = LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration);\r\n    if (!lastLinkFlag.isValid()) {\r\n      const useWorkspaces: boolean =\r\n        this.rushConfiguration.pnpmOptions && this.rushConfiguration.pnpmOptions.useWorkspaces;\r\n      if (useWorkspaces) {\r\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush install\" or \"rush update\"?`);\r\n      } else {\r\n        throw new Error(`Link flag invalid.${os.EOL}Did you run \"rush link\"?`);\r\n      }\r\n    }\r\n\r\n    this._doBeforeTask();\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    const isQuietMode: boolean = !this._verboseParameter.value;\r\n\r\n    // if this is parallelizable, then use the value from the flag (undefined or a number),\r\n    // if parallelism is not enabled, then restrict to 1 core\r\n    const parallelism: string | undefined = this._enableParallelism ? this._parallelismParameter!.value : '1';\r\n\r\n    // Collect all custom parameter values\r\n    const customParameterValues: string[] = [];\r\n    for (const customParameter of this.customParameters) {\r\n      customParameter.appendToArgList(customParameterValues);\r\n    }\r\n\r\n    const changedProjectsOnly: boolean = this._isIncrementalBuildAllowed && this._changedProjectsOnly.value;\r\n\r\n    const terminal: Terminal = new Terminal(new ConsoleTerminalProvider());\r\n    const buildCacheConfiguration:\r\n      | BuildCacheConfiguration\r\n      | undefined = await BuildCacheConfiguration.loadFromDefaultPathAsync(terminal, this.rushConfiguration);\r\n\r\n    const taskSelector: TaskSelector = new TaskSelector({\r\n      rushConfiguration: this.rushConfiguration,\r\n      buildCacheConfiguration,\r\n      toProjects: this.mergeProjectsWithVersionPolicy(this._toFlag, this._toVersionPolicy),\r\n      fromProjects: this.mergeProjectsWithVersionPolicy(this._fromFlag, this._fromVersionPolicy),\r\n      commandToRun: this._commandToRun,\r\n      customParameterValues,\r\n      isQuietMode: isQuietMode,\r\n      isIncrementalBuildAllowed: this._isIncrementalBuildAllowed,\r\n      ignoreMissingScript: this._ignoreMissingScript,\r\n      ignoreDependencyOrder: this._ignoreDependencyOrder,\r\n      packageDepsFilename: Utilities.getPackageDepsFilenameForCommand(this._commandToRun)\r\n    });\r\n\r\n    // Register all tasks with the task collection\r\n    const taskCollection: TaskCollection = taskSelector.registerTasks();\r\n\r\n    const taskRunner: TaskRunner = new TaskRunner(taskCollection.getOrderedTasks(), {\r\n      quietMode: isQuietMode,\r\n      parallelism: parallelism,\r\n      changedProjectsOnly: changedProjectsOnly,\r\n      allowWarningsInSuccessfulBuild: this._allowWarningsInSuccessfulBuild\r\n    });\r\n\r\n    try {\r\n      await taskRunner.executeAsync();\r\n\r\n      stopwatch.stop();\r\n      console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));\r\n\r\n      this._doAfterTask(stopwatch, true);\r\n    } catch (error) {\r\n      stopwatch.stop();\r\n\r\n      if (error instanceof AlreadyReportedError) {\r\n        console.log(`rush ${this.actionName} (${stopwatch.toString()})`);\r\n      } else {\r\n        if (error && error.message) {\r\n          if (this.parser.isDebug) {\r\n            console.log('Error: ' + error.stack);\r\n          } else {\r\n            console.log('Error: ' + error.message);\r\n          }\r\n        }\r\n\r\n        console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\r\n      }\r\n\r\n      this._doAfterTask(stopwatch, false);\r\n      throw new AlreadyReportedError();\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    if (this._enableParallelism) {\r\n      this._parallelismParameter = this.defineStringParameter({\r\n        parameterLongName: '--parallelism',\r\n        parameterShortName: '-p',\r\n        argumentName: 'COUNT',\r\n        environmentVariable: EnvironmentVariableNames.RUSH_PARALLELISM,\r\n        description:\r\n          'Specifies the maximum number of concurrent processes to launch during a build.' +\r\n          ' The COUNT should be a positive integer or else the word \"max\" to specify a count that is equal to' +\r\n          ' the number of CPU cores. If this parameter is omitted, then the default value depends on the' +\r\n          ' operating system and number of CPU cores.'\r\n      });\r\n    }\r\n    this._toFlag = this.defineStringListParameter({\r\n      parameterLongName: '--to',\r\n      parameterShortName: '-t',\r\n      argumentName: 'PROJECT1',\r\n      description:\r\n        'Run command in the specified project and all of its dependencies. \".\" can be used as shorthand ' +\r\n        'to specify the project in the current working directory.',\r\n      completions: this._getProjectNames.bind(this)\r\n    });\r\n    this._fromVersionPolicy = this.defineStringListParameter({\r\n      parameterLongName: '--from-version-policy',\r\n      argumentName: 'VERSION_POLICY_NAME',\r\n      description:\r\n        'Run command in all projects with the specified version policy ' +\r\n        'and all projects that directly or indirectly depend on projects with the specified version policy'\r\n    });\r\n    this._toVersionPolicy = this.defineStringListParameter({\r\n      parameterLongName: '--to-version-policy',\r\n      argumentName: 'VERSION_POLICY_NAME',\r\n      description:\r\n        'Run command in all projects with the specified version policy and all of their dependencies'\r\n    });\r\n    this._fromFlag = this.defineStringListParameter({\r\n      parameterLongName: '--from',\r\n      parameterShortName: '-f',\r\n      argumentName: 'PROJECT2',\r\n      description:\r\n        'Run command in the specified project and all projects that directly or indirectly depend on the ' +\r\n        'specified project. \".\" can be used as shorthand to specify the project in the current working directory.',\r\n      completions: this._getProjectNames.bind(this)\r\n    });\r\n    this._verboseParameter = this.defineFlagParameter({\r\n      parameterLongName: '--verbose',\r\n      parameterShortName: '-v',\r\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\r\n    });\r\n    if (this._isIncrementalBuildAllowed) {\r\n      this._changedProjectsOnly = this.defineFlagParameter({\r\n        parameterLongName: '--changed-projects-only',\r\n        parameterShortName: '-o',\r\n        description:\r\n          'If specified, the incremental build will only rebuild projects that have changed, ' +\r\n          'but not any projects that directly or indirectly depend on the changed package.'\r\n      });\r\n    }\r\n    this._ignoreHooksParameter = this.defineFlagParameter({\r\n      parameterLongName: '--ignore-hooks',\r\n      description: `Skips execution of the \"eventHooks\" scripts defined in rush.json. Make sure you know what you are skipping.`\r\n    });\r\n\r\n    this.defineScriptParameters();\r\n  }\r\n\r\n  private async _getProjectNames(): Promise<string[]> {\r\n    const unscopedNamesMap: Map<string, number> = new Map<string, number>();\r\n\r\n    const scopedNames: string[] = [];\r\n\r\n    const projectJsons: IRushConfigurationProjectJson[] = [\r\n      ...this.rushConfiguration.rushConfigurationJson.projects\r\n    ];\r\n\r\n    for (const projectJson of projectJsons) {\r\n      scopedNames.push(projectJson.packageName);\r\n      const unscopedName: string = PackageName.getUnscopedName(projectJson.packageName);\r\n      let count: number = 0;\r\n      if (unscopedNamesMap.has(unscopedName)) {\r\n        count = unscopedNamesMap.get(unscopedName)!;\r\n      }\r\n      unscopedNamesMap.set(unscopedName, count + 1);\r\n    }\r\n\r\n    const unscopedNames: string[] = [];\r\n\r\n    for (const unscopedName of unscopedNamesMap.keys()) {\r\n      const unscopedNameCount: number = unscopedNamesMap.get(unscopedName)!;\r\n      // don't suggest ambiguous unscoped names\r\n      if (unscopedNameCount === 1 && !scopedNames.includes(unscopedName)) {\r\n        unscopedNames.push(unscopedName);\r\n      }\r\n    }\r\n\r\n    return unscopedNames.sort().concat(scopedNames.sort());\r\n  }\r\n\r\n  private _doBeforeTask(): void {\r\n    if (\r\n      this.actionName !== RushConstants.buildCommandName &&\r\n      this.actionName !== RushConstants.rebuildCommandName\r\n    ) {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n\r\n    SetupChecks.validate(this.rushConfiguration);\r\n\r\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\r\n  }\r\n\r\n  private _doAfterTask(stopwatch: Stopwatch, success: boolean): void {\r\n    if (\r\n      this.actionName !== RushConstants.buildCommandName &&\r\n      this.actionName !== RushConstants.rebuildCommandName\r\n    ) {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n    this._collectTelemetry(stopwatch, success);\r\n    this.parser.flushTelemetry();\r\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug, this._ignoreHooksParameter.value);\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\r\n    const extraData: { [key: string]: string } = {\r\n      command_to: (this._toFlag.values.length > 0).toString(),\r\n      command_from: (this._fromFlag.values.length > 0).toString()\r\n    };\r\n\r\n    for (const customParameter of this.customParameters) {\r\n      switch (customParameter.kind) {\r\n        case CommandLineParameterKind.Flag:\r\n        case CommandLineParameterKind.Choice:\r\n        case CommandLineParameterKind.String:\r\n        case CommandLineParameterKind.Integer:\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          extraData[customParameter.longName] = JSON.stringify((customParameter as any).value);\r\n          break;\r\n        default:\r\n          extraData[customParameter.longName] = '?';\r\n      }\r\n    }\r\n\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: this.actionName,\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}