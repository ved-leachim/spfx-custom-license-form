{"version":3,"file":"InitAutoinstallerAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InitAutoinstallerAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,oDAA4B;AAG5B,oEAA+F;AAE/F,qDAAkD;AAElD,6DAA0D;AAE1D,MAAa,uBAAwB,SAAQ,+BAAc;IAGzD,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,oBAAoB;YAChC,OAAO,EAAE,iCAAiC;YAC1C,aAAa,EACX,6FAA6F;gBAC7F,kGAAkG;gBAClG,mFAAmF;YACrF,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACtC,iBAAiB,EAAE,QAAQ;YAC3B,YAAY,EAAE,oBAAoB;YAClC,QAAQ,EAAE,IAAI;YACd,WAAW,EACT,0GAA0G;SAC7G,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,iBAAiB,GAAW,IAAI,CAAC,KAAK,CAAC,KAAM,CAAC;QAEpD,MAAM,aAAa,GAAkB,IAAI,6BAAa,CAAC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAElG,IAAI,8BAAU,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;YACnD,mCAAmC;YACnC,IAAI,8BAAU,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClE,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;aACtF;SACF;QAED,MAAM,WAAW,GAAiB;YAChC,IAAI,EAAE,iBAAiB;YACvB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,IAAI;YACb,YAAY,EAAE,EAAE;SACjB,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,gBAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,aAAa,CAAC,eAAe,CAAC,CAAC;QAEhF,4BAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,eAAe,EAAE;YACxD,kBAAkB,EAAE,IAAI;YACxB,iBAAiB,sBAAuB;SACzC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,uEAAuE,CAAC,CAAC;IACvF,CAAC;CACF;AArDD,0DAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\n\r\nimport { CommandLineStringParameter } from '@rushstack/ts-command-line';\r\nimport { FileSystem, NewlineKind, IPackageJson, JsonFile } from '@rushstack/node-core-library';\r\n\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { Autoinstaller } from '../../logic/Autoinstaller';\r\n\r\nexport class InitAutoinstallerAction extends BaseRushAction {\r\n  private _name!: CommandLineStringParameter;\r\n\r\n  public constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'init-autoinstaller',\r\n      summary: 'Initializes a new autoinstaller',\r\n      documentation:\r\n        'Use this command to initialize a new autoinstaller folder.  Autoinstallers provide a way to' +\r\n        ' manage a set of related dependencies that are used for scripting scenarios outside of the usual' +\r\n        ' \"rush install\" context.  See the command-line.json documentation for an example.',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._name = this.defineStringParameter({\r\n      parameterLongName: '--name',\r\n      argumentName: 'AUTOINSTALLER_NAME',\r\n      required: true,\r\n      description:\r\n        'Specifies the name of the autoinstaller folder, which must conform to the naming rules for NPM packages.'\r\n    });\r\n  }\r\n\r\n  protected async runAsync(): Promise<void> {\r\n    const autoinstallerName: string = this._name.value!;\r\n\r\n    const autoinstaller: Autoinstaller = new Autoinstaller(autoinstallerName, this.rushConfiguration);\r\n\r\n    if (FileSystem.exists(autoinstaller.folderFullPath)) {\r\n      // It's okay if the folder is empty\r\n      if (FileSystem.readFolder(autoinstaller.folderFullPath).length > 0) {\r\n        throw new Error('The target folder already exists: ' + autoinstaller.folderFullPath);\r\n      }\r\n    }\r\n\r\n    const packageJson: IPackageJson = {\r\n      name: autoinstallerName,\r\n      version: '1.0.0',\r\n      private: true,\r\n      dependencies: {}\r\n    };\r\n\r\n    console.log(colors.green('Creating package: ') + autoinstaller.packageJsonPath);\r\n\r\n    JsonFile.save(packageJson, autoinstaller.packageJsonPath, {\r\n      ensureFolderExists: true,\r\n      newlineConversion: NewlineKind.OsDefault\r\n    });\r\n\r\n    console.log('\\nFile successfully written. Add your dependencies before committing.');\r\n  }\r\n}\r\n"]}