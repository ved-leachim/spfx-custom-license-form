"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRushAction = exports.BaseConfiglessRushAction = void 0;
const colors_1 = __importDefault(require("colors"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const ts_command_line_1 = require("@rushstack/ts-command-line");
const node_core_library_1 = require("@rushstack/node-core-library");
const EventHooksManager_1 = require("../../logic/EventHooksManager");
const Utilities_1 = require("../../utilities/Utilities");
/**
 * The base class for a few specialized Rush command-line actions that
 * can be used without a rush.json configuration.
 */
class BaseConfiglessRushAction extends ts_command_line_1.CommandLineAction {
    constructor(options) {
        super(options);
        this._parser = options.parser;
        this._safeForSimultaneousRushProcesses = !!options.safeForSimultaneousRushProcesses;
    }
    get rushConfiguration() {
        return this._parser.rushConfiguration;
    }
    get rushGlobalFolder() {
        return this._parser.rushGlobalFolder;
    }
    get parser() {
        return this._parser;
    }
    onExecute() {
        this._ensureEnvironment();
        if (this.rushConfiguration) {
            if (!this._safeForSimultaneousRushProcesses) {
                if (!node_core_library_1.LockFile.tryAcquire(this.rushConfiguration.commonTempFolder, 'rush')) {
                    console.log(colors_1.default.red(`Another rush command is already running in this repository.`));
                    process.exit(1);
                }
            }
        }
        if (!Utilities_1.Utilities.shouldRestrictConsoleOutput()) {
            console.log(`Starting "rush ${this.actionName}"${os.EOL}`);
        }
        return this.runAsync();
    }
    _ensureEnvironment() {
        if (this.rushConfiguration) {
            // eslint-disable-next-line dot-notation
            let environmentPath = process.env['PATH'];
            environmentPath =
                path.join(this.rushConfiguration.commonTempFolder, 'node_modules', '.bin') +
                    path.delimiter +
                    environmentPath;
            // eslint-disable-next-line dot-notation
            process.env['PATH'] = environmentPath;
        }
    }
}
exports.BaseConfiglessRushAction = BaseConfiglessRushAction;
/**
 * The base class that most Rush command-line actions should extend.
 */
class BaseRushAction extends BaseConfiglessRushAction {
    get eventHooksManager() {
        if (!this._eventHooksManager) {
            this._eventHooksManager = new EventHooksManager_1.EventHooksManager(this.rushConfiguration);
        }
        return this._eventHooksManager;
    }
    get rushConfiguration() {
        return super.rushConfiguration;
    }
    onExecute() {
        if (!this.rushConfiguration) {
            throw Utilities_1.Utilities.getRushConfigNotFoundError();
        }
        return super.onExecute();
    }
    mergeProjectsWithVersionPolicy(projectsParameters, versionPoliciesParameters) {
        const packageJsonLookup = new node_core_library_1.PackageJsonLookup();
        const projects = [];
        for (const projectParameter of projectsParameters.values) {
            if (projectParameter === '.') {
                const packageJson = packageJsonLookup.tryLoadPackageJsonFor(process.cwd());
                if (packageJson) {
                    const project = this.rushConfiguration.getProjectByName(packageJson.name);
                    if (project) {
                        projects.push(project);
                    }
                    else {
                        console.log(colors_1.default.red('Rush is not currently running in a project directory specified in rush.json. ' +
                            `The "." value for the ${projectsParameters.longName} parameter is not allowed.`));
                        throw new node_core_library_1.AlreadyReportedError();
                    }
                }
                else {
                    console.log(colors_1.default.red('Rush is not currently running in a project directory. ' +
                        `The "." value for the ${projectsParameters.longName} parameter is not allowed.`));
                    throw new node_core_library_1.AlreadyReportedError();
                }
            }
            else {
                const project = this.rushConfiguration.findProjectByShorthandName(projectParameter);
                if (!project) {
                    console.log(colors_1.default.red(`The project '${projectParameter}' does not exist in rush.json.`));
                    throw new node_core_library_1.AlreadyReportedError();
                }
                projects.push(project);
            }
        }
        if (versionPoliciesParameters.values && versionPoliciesParameters.values.length > 0) {
            this.rushConfiguration.projects.forEach((project) => {
                const matches = versionPoliciesParameters.values.some((policyName) => {
                    return project.versionPolicyName === policyName;
                });
                if (matches) {
                    projects.push(project);
                }
            });
        }
        return projects;
    }
}
exports.BaseRushAction = BaseRushAction;
//# sourceMappingURL=BaseRushAction.js.map