{"version":3,"file":"BaseRushAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BaseRushAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  CommandLineAction,\r\n  ICommandLineActionOptions,\r\n  CommandLineStringListParameter\r\n} from '@rushstack/ts-command-line';\r\nimport {\r\n  LockFile,\r\n  PackageJsonLookup,\r\n  IPackageJson,\r\n  AlreadyReportedError\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { EventHooksManager } from '../../logic/EventHooksManager';\r\nimport { RushCommandLineParser } from './../RushCommandLineParser';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\r\n\r\nexport interface IBaseRushActionOptions extends ICommandLineActionOptions {\r\n  /**\r\n   * By default, Rush operations acquire a lock file which prevents multiple commands from executing simultaneously\r\n   * in the same repo folder.  (For example, it would be a mistake to run \"rush install\" and \"rush build\" at the\r\n   * same time.)  If your command makes sense to run concurrently with other operations,\r\n   * set safeForSimultaneousRushProcesses=true to disable this protection.  In particular, this is needed for\r\n   * custom scripts that invoke other Rush commands.\r\n   */\r\n  safeForSimultaneousRushProcesses?: boolean;\r\n\r\n  /**\r\n   * The rush parser.\r\n   */\r\n  parser: RushCommandLineParser;\r\n}\r\n\r\n/**\r\n * The base class for a few specialized Rush command-line actions that\r\n * can be used without a rush.json configuration.\r\n */\r\nexport abstract class BaseConfiglessRushAction extends CommandLineAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _safeForSimultaneousRushProcesses: boolean;\r\n\r\n  protected get rushConfiguration(): RushConfiguration | undefined {\r\n    return this._parser.rushConfiguration;\r\n  }\r\n\r\n  protected get rushGlobalFolder(): RushGlobalFolder {\r\n    return this._parser.rushGlobalFolder;\r\n  }\r\n\r\n  protected get parser(): RushCommandLineParser {\r\n    return this._parser;\r\n  }\r\n\r\n  public constructor(options: IBaseRushActionOptions) {\r\n    super(options);\r\n\r\n    this._parser = options.parser;\r\n    this._safeForSimultaneousRushProcesses = !!options.safeForSimultaneousRushProcesses;\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    this._ensureEnvironment();\r\n\r\n    if (this.rushConfiguration) {\r\n      if (!this._safeForSimultaneousRushProcesses) {\r\n        if (!LockFile.tryAcquire(this.rushConfiguration.commonTempFolder, 'rush')) {\r\n          console.log(colors.red(`Another rush command is already running in this repository.`));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!Utilities.shouldRestrictConsoleOutput()) {\r\n      console.log(`Starting \"rush ${this.actionName}\"${os.EOL}`);\r\n    }\r\n    return this.runAsync();\r\n  }\r\n\r\n  /**\r\n   * All Rush actions need to implement this method. This method runs after\r\n   * environment has been set up by the base class.\r\n   */\r\n  protected abstract runAsync(): Promise<void>;\r\n\r\n  private _ensureEnvironment(): void {\r\n    if (this.rushConfiguration) {\r\n      // eslint-disable-next-line dot-notation\r\n      let environmentPath: string | undefined = process.env['PATH'];\r\n      environmentPath =\r\n        path.join(this.rushConfiguration.commonTempFolder, 'node_modules', '.bin') +\r\n        path.delimiter +\r\n        environmentPath;\r\n      // eslint-disable-next-line dot-notation\r\n      process.env['PATH'] = environmentPath;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The base class that most Rush command-line actions should extend.\r\n */\r\nexport abstract class BaseRushAction extends BaseConfiglessRushAction {\r\n  private _eventHooksManager: EventHooksManager | undefined;\r\n\r\n  protected get eventHooksManager(): EventHooksManager {\r\n    if (!this._eventHooksManager) {\r\n      this._eventHooksManager = new EventHooksManager(this.rushConfiguration);\r\n    }\r\n\r\n    return this._eventHooksManager;\r\n  }\r\n\r\n  protected get rushConfiguration(): RushConfiguration {\r\n    return super.rushConfiguration!;\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    if (!this.rushConfiguration) {\r\n      throw Utilities.getRushConfigNotFoundError();\r\n    }\r\n\r\n    return super.onExecute();\r\n  }\r\n\r\n  protected mergeProjectsWithVersionPolicy(\r\n    projectsParameters: CommandLineStringListParameter,\r\n    versionPoliciesParameters: CommandLineStringListParameter\r\n  ): RushConfigurationProject[] {\r\n    const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n\r\n    const projects: RushConfigurationProject[] = [];\r\n    for (const projectParameter of projectsParameters.values) {\r\n      if (projectParameter === '.') {\r\n        const packageJson: IPackageJson | undefined = packageJsonLookup.tryLoadPackageJsonFor(process.cwd());\r\n        if (packageJson) {\r\n          const project: RushConfigurationProject | undefined = this.rushConfiguration.getProjectByName(\r\n            packageJson.name\r\n          );\r\n          if (project) {\r\n            projects.push(project);\r\n          } else {\r\n            console.log(\r\n              colors.red(\r\n                'Rush is not currently running in a project directory specified in rush.json. ' +\r\n                  `The \".\" value for the ${projectsParameters.longName} parameter is not allowed.`\r\n              )\r\n            );\r\n            throw new AlreadyReportedError();\r\n          }\r\n        } else {\r\n          console.log(\r\n            colors.red(\r\n              'Rush is not currently running in a project directory. ' +\r\n                `The \".\" value for the ${projectsParameters.longName} parameter is not allowed.`\r\n            )\r\n          );\r\n          throw new AlreadyReportedError();\r\n        }\r\n      } else {\r\n        const project:\r\n          | RushConfigurationProject\r\n          | undefined = this.rushConfiguration.findProjectByShorthandName(projectParameter);\r\n        if (!project) {\r\n          console.log(colors.red(`The project '${projectParameter}' does not exist in rush.json.`));\r\n          throw new AlreadyReportedError();\r\n        }\r\n\r\n        projects.push(project);\r\n      }\r\n    }\r\n\r\n    if (versionPoliciesParameters.values && versionPoliciesParameters.values.length > 0) {\r\n      this.rushConfiguration.projects.forEach((project) => {\r\n        const matches: boolean = versionPoliciesParameters.values.some((policyName) => {\r\n          return project.versionPolicyName === policyName;\r\n        });\r\n        if (matches) {\r\n          projects.push(project);\r\n        }\r\n      });\r\n    }\r\n\r\n    return projects;\r\n  }\r\n}\r\n"]}