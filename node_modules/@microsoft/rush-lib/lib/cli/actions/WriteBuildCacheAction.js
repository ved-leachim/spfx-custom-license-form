"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteBuildCacheAction = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const BaseRushAction_1 = require("./BaseRushAction");
const BuildCacheConfiguration_1 = require("../../api/BuildCacheConfiguration");
const ProjectBuilder_1 = require("../../logic/taskRunner/ProjectBuilder");
const PackageChangeAnalyzer_1 = require("../../logic/PackageChangeAnalyzer");
const Utilities_1 = require("../../utilities/Utilities");
const TaskSelector_1 = require("../../logic/TaskSelector");
class WriteBuildCacheAction extends BaseRushAction_1.BaseRushAction {
    constructor(parser) {
        super({
            actionName: 'write-build-cache',
            summary: 'Writes the current state of the current project to the cache.',
            documentation: '(EXPERIMENTAL) If the build cache is configured, when this command is run in the folder of ' +
                'a project, write the current state of the project to the cache.',
            safeForSimultaneousRushProcesses: true,
            parser
        });
    }
    onDefineParameters() {
        this._command = this.defineStringParameter({
            parameterLongName: '--command',
            parameterShortName: '-c',
            required: true,
            argumentName: 'COMMAND',
            description: '(Required) The command run in the current project that produced the current project state.'
        });
    }
    async runAsync() {
        const project = this.rushConfiguration.tryGetProjectForPath(process.cwd());
        if (!project) {
            throw new Error(`The "rush ${this.actionName}" command must be invoked under a project` +
                ` folder that is registered in rush.json.`);
        }
        const terminal = new node_core_library_1.Terminal(new node_core_library_1.ConsoleTerminalProvider());
        const buildCacheConfiguration = await BuildCacheConfiguration_1.BuildCacheConfiguration.loadFromDefaultPathAsync(terminal, this.rushConfiguration);
        if (!buildCacheConfiguration) {
            const buildCacheConfigurationFilePath = BuildCacheConfiguration_1.BuildCacheConfiguration.getBuildCacheConfigFilePath(this.rushConfiguration);
            terminal.writeErrorLine(`The a build cache has not been configured. Configure it by creating a ` +
                `"${buildCacheConfigurationFilePath}" file.`);
            throw new node_core_library_1.AlreadyReportedError();
        }
        const command = this._command.value;
        const commandToRun = TaskSelector_1.TaskSelector.getScriptToRun(project, command, []);
        const packageChangeAnalyzer = new PackageChangeAnalyzer_1.PackageChangeAnalyzer(this.rushConfiguration);
        const projectBuilder = new ProjectBuilder_1.ProjectBuilder({
            rushProject: project,
            rushConfiguration: this.rushConfiguration,
            buildCacheConfiguration,
            commandToRun: commandToRun || '',
            isIncrementalBuildAllowed: false,
            packageChangeAnalyzer,
            packageDepsFilename: Utilities_1.Utilities.getPackageDepsFilenameForCommand(command)
        });
        const trackedFiles = Array.from(packageChangeAnalyzer.getPackageDeps(project.packageName).keys());
        const cacheWriteSuccess = await projectBuilder.tryWriteCacheEntryAsync(terminal, trackedFiles);
        if (cacheWriteSuccess === undefined) {
            // We already projectBuilder already reported that the project doesn't support caching
            throw new node_core_library_1.AlreadyReportedError();
        }
        else if (cacheWriteSuccess === false) {
            terminal.writeErrorLine('Writing cache entry failed.');
        }
    }
}
exports.WriteBuildCacheAction = WriteBuildCacheAction;
//# sourceMappingURL=WriteBuildCacheAction.js.map