{"version":3,"file":"WriteBuildCacheAction.js","sourceRoot":"","sources":["../../../src/cli/actions/WriteBuildCacheAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAuG;AAIvG,qDAAkD;AAGlD,+EAA4E;AAC5E,0EAAuE;AACvE,6EAA0E;AAC1E,yDAAsD;AACtD,2DAAwD;AAExD,MAAa,qBAAsB,SAAQ,+BAAc;IAGvD,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,mBAAmB;YAC/B,OAAO,EAAE,+DAA+D;YACxE,aAAa,EACX,6FAA6F;gBAC7F,iEAAiE;YACnE,gCAAgC,EAAE,IAAI;YACtC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB;QACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACzC,iBAAiB,EAAE,WAAW;YAC9B,kBAAkB,EAAE,IAAI;YACxB,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE,SAAS;YACvB,WAAW,EACT,4FAA4F;SAC/F,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,MAAM,OAAO,GAAyC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAC/F,OAAO,CAAC,GAAG,EAAE,CACd,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CACb,aAAa,IAAI,CAAC,UAAU,2CAA2C;gBACrE,0CAA0C,CAC7C,CAAC;SACH;QAED,MAAM,QAAQ,GAAa,IAAI,4BAAQ,CAAC,IAAI,2CAAuB,EAAE,CAAC,CAAC;QACvE,MAAM,uBAAuB,GAEb,MAAM,iDAAuB,CAAC,wBAAwB,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACzG,IAAI,CAAC,uBAAuB,EAAE;YAC5B,MAAM,+BAA+B,GAAW,iDAAuB,CAAC,2BAA2B,CACjG,IAAI,CAAC,iBAAiB,CACvB,CAAC;YACF,QAAQ,CAAC,cAAc,CACrB,wEAAwE;gBACtE,IAAI,+BAA+B,SAAS,CAC/C,CAAC;YACF,MAAM,IAAI,wCAAoB,EAAE,CAAC;SAClC;QAED,MAAM,OAAO,GAAW,IAAI,CAAC,QAAQ,CAAC,KAAM,CAAC;QAC7C,MAAM,YAAY,GAAuB,2BAAY,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;QAE3F,MAAM,qBAAqB,GAA0B,IAAI,6CAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACvG,MAAM,cAAc,GAAmB,IAAI,+BAAc,CAAC;YACxD,WAAW,EAAE,OAAO;YACpB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,uBAAuB;YACvB,YAAY,EAAE,YAAY,IAAI,EAAE;YAChC,yBAAyB,EAAE,KAAK;YAChC,qBAAqB;YACrB,mBAAmB,EAAE,qBAAS,CAAC,gCAAgC,CAAC,OAAO,CAAC;SACzE,CAAC,CAAC;QAEH,MAAM,YAAY,GAAa,KAAK,CAAC,IAAI,CACvC,qBAAqB,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAE,CAAC,IAAI,EAAE,CAClE,CAAC;QACF,MAAM,iBAAiB,GAAwB,MAAM,cAAc,CAAC,uBAAuB,CACzF,QAAQ,EACR,YAAY,CACb,CAAC;QACF,IAAI,iBAAiB,KAAK,SAAS,EAAE;YACnC,sFAAsF;YACtF,MAAM,IAAI,wCAAoB,EAAE,CAAC;SAClC;aAAM,IAAI,iBAAiB,KAAK,KAAK,EAAE;YACtC,QAAQ,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC;SACxD;IACH,CAAC;CACF;AAjFD,sDAiFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { AlreadyReportedError, ConsoleTerminalProvider, Terminal } from '@rushstack/node-core-library';\r\nimport { CommandLineStringParameter } from '@rushstack/ts-command-line';\r\n\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\n\r\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\r\nimport { ProjectBuilder } from '../../logic/taskRunner/ProjectBuilder';\r\nimport { PackageChangeAnalyzer } from '../../logic/PackageChangeAnalyzer';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { TaskSelector } from '../../logic/TaskSelector';\r\n\r\nexport class WriteBuildCacheAction extends BaseRushAction {\r\n  private _command!: CommandLineStringParameter;\r\n\r\n  public constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'write-build-cache',\r\n      summary: 'Writes the current state of the current project to the cache.',\r\n      documentation:\r\n        '(EXPERIMENTAL) If the build cache is configured, when this command is run in the folder of ' +\r\n        'a project, write the current state of the project to the cache.',\r\n      safeForSimultaneousRushProcesses: true,\r\n      parser\r\n    });\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    this._command = this.defineStringParameter({\r\n      parameterLongName: '--command',\r\n      parameterShortName: '-c',\r\n      required: true,\r\n      argumentName: 'COMMAND',\r\n      description:\r\n        '(Required) The command run in the current project that produced the current project state.'\r\n    });\r\n  }\r\n\r\n  public async runAsync(): Promise<void> {\r\n    const project: RushConfigurationProject | undefined = this.rushConfiguration.tryGetProjectForPath(\r\n      process.cwd()\r\n    );\r\n\r\n    if (!project) {\r\n      throw new Error(\r\n        `The \"rush ${this.actionName}\" command must be invoked under a project` +\r\n          ` folder that is registered in rush.json.`\r\n      );\r\n    }\r\n\r\n    const terminal: Terminal = new Terminal(new ConsoleTerminalProvider());\r\n    const buildCacheConfiguration:\r\n      | BuildCacheConfiguration\r\n      | undefined = await BuildCacheConfiguration.loadFromDefaultPathAsync(terminal, this.rushConfiguration);\r\n    if (!buildCacheConfiguration) {\r\n      const buildCacheConfigurationFilePath: string = BuildCacheConfiguration.getBuildCacheConfigFilePath(\r\n        this.rushConfiguration\r\n      );\r\n      terminal.writeErrorLine(\r\n        `The a build cache has not been configured. Configure it by creating a ` +\r\n          `\"${buildCacheConfigurationFilePath}\" file.`\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    const command: string = this._command.value!;\r\n    const commandToRun: string | undefined = TaskSelector.getScriptToRun(project, command, []);\r\n\r\n    const packageChangeAnalyzer: PackageChangeAnalyzer = new PackageChangeAnalyzer(this.rushConfiguration);\r\n    const projectBuilder: ProjectBuilder = new ProjectBuilder({\r\n      rushProject: project,\r\n      rushConfiguration: this.rushConfiguration,\r\n      buildCacheConfiguration,\r\n      commandToRun: commandToRun || '',\r\n      isIncrementalBuildAllowed: false,\r\n      packageChangeAnalyzer,\r\n      packageDepsFilename: Utilities.getPackageDepsFilenameForCommand(command)\r\n    });\r\n\r\n    const trackedFiles: string[] = Array.from(\r\n      packageChangeAnalyzer.getPackageDeps(project.packageName)!.keys()\r\n    );\r\n    const cacheWriteSuccess: boolean | undefined = await projectBuilder.tryWriteCacheEntryAsync(\r\n      terminal,\r\n      trackedFiles\r\n    );\r\n    if (cacheWriteSuccess === undefined) {\r\n      // We already projectBuilder already reported that the project doesn't support caching\r\n      throw new AlreadyReportedError();\r\n    } else if (cacheWriteSuccess === false) {\r\n      terminal.writeErrorLine('Writing cache entry failed.');\r\n    }\r\n  }\r\n}\r\n"]}