{"version":3,"file":"DeployAction.js","sourceRoot":"","sources":["../../../src/cli/actions/DeployAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAsD;AAGtD,qDAAkD;AAIlD,MAAM,mBAAmB,GAA8B,0BAAM,CAAC,IAAI,CAChE,kCAAkC,EAClC,OAAO,CACR,CAAC;AAEF,MAAa,YAAa,SAAQ,+BAAc;IAO9C,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,QAAQ;YACpB,OAAO,EACL,mFAAmF;gBACnF,qBAAqB;YACvB,aAAa,EACX,uFAAuF;gBACvF,qGAAqG;gBACrG,oGAAoG;gBACpG,0DAA0D;YAC5D,MAAM;YAEN,+FAA+F;YAC/F,+BAA+B;YAC/B,gCAAgC,EAAE,IAAI;SACvC,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACzC,iBAAiB,EAAE,WAAW;YAC9B,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,cAAc;YAC5B,WAAW,EACT,mFAAmF;gBACnF,kEAAkE;SACrE,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC1C,iBAAiB,EAAE,YAAY;YAC/B,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,eAAe;YAC7B,WAAW,EACT,4FAA4F;gBAC5F,6GAA6G;gBAC7G,8GAA8G;SACjH,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACzC,iBAAiB,EAAE,aAAa;YAChC,WAAW,EACT,2FAA2F;gBAC3F,kEAAkE;SACrE,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC9C,iBAAiB,EAAE,iBAAiB;YACpC,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,MAAM;YACpB,mBAAmB,EAAE,2BAA2B;YAChD,WAAW,EACT,oFAAoF;gBACpF,uDAAuD;gBACvD,yDAAyD;SAC5D,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACnD,iBAAiB,EAAE,kBAAkB;YACrC,YAAY,EAAE,cAAc;YAC5B,WAAW,EACT,qEAAqE;gBACrE,uEAAuE;gBACvE,2FAA2F;gBAC3F,wDAAwD;SAC3D,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,aAAa,GAAqC,IAAI,mBAAmB,CAAC,aAAa,CAC3F,IAAI,CAAC,iBAAiB,CACvB,CAAC;QACF,MAAM,aAAa,CAAC,WAAW,CAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,EACnB,IAAI,CAAC,SAAS,CAAC,KAAK,EACpB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EACxB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAC9B,CAAC;IACJ,CAAC;CACF;AAvFD,oCAuFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Import } from '@rushstack/node-core-library';\r\nimport { CommandLineFlagParameter, CommandLineStringParameter } from '@rushstack/ts-command-line';\r\n\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\n\r\nimport type * as deployManagerTypes from '../../logic/deploy/DeployManager';\r\nconst deployManagerModule: typeof deployManagerTypes = Import.lazy(\r\n  '../../logic/deploy/DeployManager',\r\n  require\r\n);\r\n\r\nexport class DeployAction extends BaseRushAction {\r\n  private _scenario!: CommandLineStringParameter;\r\n  private _project!: CommandLineStringParameter;\r\n  private _overwrite!: CommandLineFlagParameter;\r\n  private _targetFolder!: CommandLineStringParameter;\r\n  private _createArchivePath!: CommandLineStringParameter;\r\n\r\n  public constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'deploy',\r\n      summary:\r\n        'Prepares a deployment by copying a subset of Rush projects and their dependencies' +\r\n        ' to a target folder',\r\n      documentation:\r\n        'After building the repo, \"rush deploy\" can be used to prepare a deployment by copying' +\r\n        ' a subset of Rush projects and their dependencies to a target folder, which can then be uploaded to' +\r\n        ' a production server.  The \"rush deploy\" behavior is specified by a scenario config file that must' +\r\n        ' be created first, using the \"rush init-deploy\" command.',\r\n      parser,\r\n\r\n      // It is okay to invoke multiple instances of \"rush deploy\" simultaneously, if they are writing\r\n      // to different target folders.\r\n      safeForSimultaneousRushProcesses: true\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._project = this.defineStringParameter({\r\n      parameterLongName: '--project',\r\n      parameterShortName: '-p',\r\n      argumentName: 'PROJECT_NAME',\r\n      description:\r\n        'Specifies the name of the main Rush project to be deployed. It must appear in the' +\r\n        ' \"deploymentProjectNames\" setting in the deployment config file.'\r\n    });\r\n\r\n    this._scenario = this.defineStringParameter({\r\n      parameterLongName: '--scenario',\r\n      parameterShortName: '-s',\r\n      argumentName: 'SCENARIO_NAME',\r\n      description:\r\n        'By default, the deployment configuration is specified in \"common/config/rush/deploy.json\".' +\r\n        ' You can use \"--scenario\" to specify an alternate name. The name must be lowercase and separated by dashes.' +\r\n        ' For example, if SCENARIO_NAME is \"web\", then the config file would be \"common/config/rush/deploy-web.json\".'\r\n    });\r\n\r\n    this._overwrite = this.defineFlagParameter({\r\n      parameterLongName: '--overwrite',\r\n      description:\r\n        'By default, deployment will fail if the target folder is not empty.  SPECIFYING THIS FLAG' +\r\n        ' WILL RECURSIVELY DELETE EXISTING CONTENTS OF THE TARGET FOLDER.'\r\n    });\r\n\r\n    this._targetFolder = this.defineStringParameter({\r\n      parameterLongName: '--target-folder',\r\n      parameterShortName: '-t',\r\n      argumentName: 'PATH',\r\n      environmentVariable: 'RUSH_DEPLOY_TARGET_FOLDER',\r\n      description:\r\n        'By default, files are deployed to the \"common/deploy\" folder inside the Rush repo.' +\r\n        ' Use this parameter to specify a different location. ' +\r\n        ' WARNING: USE CAUTION WHEN COMBINING WITH \"--overwrite\"'\r\n    });\r\n\r\n    this._createArchivePath = this.defineStringParameter({\r\n      parameterLongName: '--create-archive',\r\n      argumentName: 'ARCHIVE_PATH',\r\n      description:\r\n        'If specified, after the deployment has been prepared, \"rush deploy\"' +\r\n        ' will create an archive containing the contents of the target folder.' +\r\n        ' The newly created archive file will be placed according to the designated path, relative' +\r\n        ' to the target folder. Supported file extensions: .zip'\r\n    });\r\n  }\r\n\r\n  protected async runAsync(): Promise<void> {\r\n    const deployManager: deployManagerTypes.DeployManager = new deployManagerModule.DeployManager(\r\n      this.rushConfiguration\r\n    );\r\n    await deployManager.deployAsync(\r\n      this._project.value,\r\n      this._scenario.value,\r\n      !!this._overwrite.value,\r\n      this._targetFolder.value,\r\n      this._createArchivePath.value\r\n    );\r\n  }\r\n}\r\n"]}