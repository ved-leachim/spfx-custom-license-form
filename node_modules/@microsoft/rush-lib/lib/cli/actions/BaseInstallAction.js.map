{"version":3,"file":"BaseInstallAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BaseInstallAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { Import } from '@rushstack/node-core-library';\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineIntegerParameter,\r\n  CommandLineStringParameter\r\n} from '@rushstack/ts-command-line';\r\n\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { Event } from '../../api/EventHooks';\r\nimport { BaseInstallManager, IInstallManagerOptions } from '../../logic/base/BaseInstallManager';\r\nimport { PurgeManager } from '../../logic/PurgeManager';\r\nimport { SetupChecks } from '../../logic/SetupChecks';\r\nimport { StandardScriptUpdater } from '../../logic/StandardScriptUpdater';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\r\nimport { Variants } from '../../api/Variants';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\n\r\nconst installManagerFactoryModule: typeof import('../../logic/InstallManagerFactory') = Import.lazy(\r\n  '../../logic/InstallManagerFactory',\r\n  require\r\n);\r\n\r\n/**\r\n * This is the common base class for InstallAction and UpdateAction.\r\n */\r\nexport abstract class BaseInstallAction extends BaseRushAction {\r\n  protected _variant!: CommandLineStringParameter;\r\n  protected _purgeParameter!: CommandLineFlagParameter;\r\n  protected _bypassPolicyParameter!: CommandLineFlagParameter;\r\n  protected _noLinkParameter!: CommandLineFlagParameter;\r\n  protected _networkConcurrencyParameter!: CommandLineIntegerParameter;\r\n  protected _debugPackageManagerParameter!: CommandLineFlagParameter;\r\n  protected _maxInstallAttempts!: CommandLineIntegerParameter;\r\n  protected _ignoreHooksParameter!: CommandLineFlagParameter;\r\n\r\n  protected onDefineParameters(): void {\r\n    this._purgeParameter = this.defineFlagParameter({\r\n      parameterLongName: '--purge',\r\n      parameterShortName: '-p',\r\n      description: 'Perform \"rush purge\" before starting the installation'\r\n    });\r\n    this._bypassPolicyParameter = this.defineFlagParameter({\r\n      parameterLongName: '--bypass-policy',\r\n      description: 'Overrides enforcement of the \"gitPolicy\" rules from rush.json (use honorably!)'\r\n    });\r\n    this._noLinkParameter = this.defineFlagParameter({\r\n      parameterLongName: '--no-link',\r\n      description:\r\n        'If \"--no-link\" is specified, then project symlinks will NOT be created' +\r\n        ' after the installation completes.  You will need to run \"rush link\" manually.' +\r\n        ' This flag is useful for automated builds that want to report stages individually' +\r\n        ' or perform extra operations in between the two stages. This flag is not supported' +\r\n        ' when using workspaces.'\r\n    });\r\n    this._networkConcurrencyParameter = this.defineIntegerParameter({\r\n      parameterLongName: '--network-concurrency',\r\n      argumentName: 'COUNT',\r\n      description:\r\n        'If specified, limits the maximum number of concurrent network requests.' +\r\n        '  This is useful when troubleshooting network failures.'\r\n    });\r\n    this._debugPackageManagerParameter = this.defineFlagParameter({\r\n      parameterLongName: '--debug-package-manager',\r\n      description:\r\n        'Activates verbose logging for the package manager. You will probably want to pipe' +\r\n        ' the output of Rush to a file when using this command.'\r\n    });\r\n    this._maxInstallAttempts = this.defineIntegerParameter({\r\n      parameterLongName: '--max-install-attempts',\r\n      argumentName: 'NUMBER',\r\n      description: `Overrides the default maximum number of install attempts.`,\r\n      defaultValue: RushConstants.defaultMaxInstallAttempts\r\n    });\r\n    this._ignoreHooksParameter = this.defineFlagParameter({\r\n      parameterLongName: '--ignore-hooks',\r\n      description: `Skips execution of the \"eventHooks\" scripts defined in rush.json. Make sure you know what you are skipping.`\r\n    });\r\n    this._variant = this.defineStringParameter(Variants.VARIANT_PARAMETER);\r\n  }\r\n\r\n  protected abstract buildInstallOptions(): IInstallManagerOptions;\r\n\r\n  protected async runAsync(): Promise<void> {\r\n    VersionMismatchFinder.ensureConsistentVersions(this.rushConfiguration, {\r\n      variant: this._variant.value\r\n    });\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    SetupChecks.validate(this.rushConfiguration);\r\n    let warnAboutScriptUpdate: boolean = false;\r\n    if (this.actionName === 'update') {\r\n      warnAboutScriptUpdate = StandardScriptUpdater.update(this.rushConfiguration);\r\n    } else {\r\n      StandardScriptUpdater.validate(this.rushConfiguration);\r\n    }\r\n\r\n    this.eventHooksManager.handle(\r\n      Event.preRushInstall,\r\n      this.parser.isDebug,\r\n      this._ignoreHooksParameter.value\r\n    );\r\n\r\n    const purgeManager: PurgeManager = new PurgeManager(this.rushConfiguration, this.rushGlobalFolder);\r\n\r\n    if (this._purgeParameter.value!) {\r\n      console.log('The --purge flag was specified, so performing \"rush purge\"');\r\n      purgeManager.purgeNormal();\r\n      console.log('');\r\n    }\r\n\r\n    if (this._networkConcurrencyParameter.value) {\r\n      if (this.rushConfiguration.packageManager !== 'pnpm') {\r\n        throw new Error(\r\n          `The \"${this._networkConcurrencyParameter.longName}\" parameter is` +\r\n            ` only supported when using the PNPM package manager.`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Because the 'defaultValue' option on the _maxInstallAttempts parameter is set,\r\n    // it is safe to assume that the value is not null\r\n    if (this._maxInstallAttempts.value! < 1) {\r\n      throw new Error(`The value of \"${this._maxInstallAttempts.longName}\" must be positive and nonzero.`);\r\n    }\r\n\r\n    const installManagerOptions: IInstallManagerOptions = this.buildInstallOptions();\r\n\r\n    const installManager: BaseInstallManager = installManagerFactoryModule.InstallManagerFactory.getInstallManager(\r\n      this.rushConfiguration,\r\n      this.rushGlobalFolder,\r\n      purgeManager,\r\n      installManagerOptions\r\n    );\r\n\r\n    let installSuccessful: boolean = true;\r\n    try {\r\n      await installManager.doInstall();\r\n\r\n      this.eventHooksManager.handle(\r\n        Event.postRushInstall,\r\n        this.parser.isDebug,\r\n        this._ignoreHooksParameter.value\r\n      );\r\n\r\n      if (warnAboutScriptUpdate) {\r\n        console.log(\r\n          os.EOL +\r\n            colors.yellow(\r\n              'Rush refreshed some files in the \"common/scripts\" folder.' +\r\n                '  Please commit this change to Git.'\r\n            )\r\n        );\r\n      }\r\n\r\n      console.log(\r\n        os.EOL + colors.green(`Rush ${this.actionName} finished successfully. (${stopwatch.toString()})`)\r\n      );\r\n    } catch (error) {\r\n      installSuccessful = false;\r\n      throw error;\r\n    } finally {\r\n      purgeManager.deleteAll();\r\n      stopwatch.stop();\r\n\r\n      this._collectTelemetry(stopwatch, installManagerOptions, installSuccessful);\r\n    }\r\n  }\r\n\r\n  private _collectTelemetry(\r\n    stopwatch: Stopwatch,\r\n    installManagerOptions: IInstallManagerOptions,\r\n    success: boolean\r\n  ): void {\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: 'install',\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData: {\r\n          mode: this.actionName,\r\n          clean: (!!this._purgeParameter.value).toString(),\r\n          full: installManagerOptions.fullUpgrade.toString()\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}