{"version":3,"file":"PurgeAction.js","sourceRoot":"","sources":["../../../src/cli/actions/PurgeAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,oDAA4B;AAC5B,uCAAyB;AAIzB,qDAAkD;AAElD,yDAAsD;AACtD,2DAAwD;AACxD,6DAA0D;AAE1D,MAAa,WAAY,SAAQ,+BAAc;IAG7C,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,OAAO;YACnB,OAAO,EACL,mGAAmG;YACrG,aAAa,EACX,sFAAsF;gBACtF,iFAAiF;YACnF,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC/C,iBAAiB,EAAE,UAAU;YAC7B,WAAW,EACT,oFAAoF;gBACpF,2FAA2F;gBAC3F,uGAAuG;SAC1G,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,SAAS,GAAc,qBAAS,CAAC,KAAK,EAAE,CAAC;QAE/C,MAAM,aAAa,GAAkB,IAAI,6BAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/E,MAAM,YAAY,GAAiB,IAAI,2BAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAEnG,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAM,EAAE;YAChC,YAAY,CAAC,WAAW,EAAE,CAAC;SAC5B;aAAM;YACL,YAAY,CAAC,WAAW,EAAE,CAAC;SAC5B;QAED,YAAY,CAAC,SAAS,EAAE,CAAC;QAEzB,OAAO,CAAC,GAAG,CACT,EAAE,CAAC,GAAG;YACJ,gBAAM,CAAC,KAAK,CACV,sEAAsE,SAAS,CAAC,QAAQ,EAAE,GAAG,CAC9F,CACJ,CAAC;IACJ,CAAC;CACF;AAhDD,kCAgDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\r\n\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { PurgeManager } from '../../logic/PurgeManager';\r\nimport { UnlinkManager } from '../../logic/UnlinkManager';\r\n\r\nexport class PurgeAction extends BaseRushAction {\r\n  private _unsafeParameter!: CommandLineFlagParameter;\r\n\r\n  public constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'purge',\r\n      summary:\r\n        'For diagnostic purposes, use this command to delete caches and other temporary files used by Rush',\r\n      documentation:\r\n        'The \"rush purge\" command is used to delete temporary files created by Rush.  This is' +\r\n        ' useful if you are having problems and suspect that cache files may be corrupt.',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._unsafeParameter = this.defineFlagParameter({\r\n      parameterLongName: '--unsafe',\r\n      description:\r\n        '(UNSAFE!) Also delete shared files such as the package manager instances stored in' +\r\n        ' the \".rush\" folder in the user\\'s home directory.  This is a more aggressive fix that is' +\r\n        ' NOT SAFE to run in a live environment because it will cause other concurrent Rush processes to fail.'\r\n    });\r\n  }\r\n\r\n  protected async runAsync(): Promise<void> {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    const unlinkManager: UnlinkManager = new UnlinkManager(this.rushConfiguration);\r\n    const purgeManager: PurgeManager = new PurgeManager(this.rushConfiguration, this.rushGlobalFolder);\r\n\r\n    unlinkManager.unlink(/*force:*/ true);\r\n\r\n    if (this._unsafeParameter.value!) {\r\n      purgeManager.purgeUnsafe();\r\n    } else {\r\n      purgeManager.purgeNormal();\r\n    }\r\n\r\n    purgeManager.deleteAll();\r\n\r\n    console.log(\r\n      os.EOL +\r\n        colors.green(\r\n          `Rush purge started successfully and will complete asynchronously. (${stopwatch.toString()})`\r\n        )\r\n    );\r\n  }\r\n}\r\n"]}