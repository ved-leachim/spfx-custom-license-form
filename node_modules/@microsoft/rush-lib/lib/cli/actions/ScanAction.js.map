{"version":3,"file":"ScanAction.js","sourceRoot":"","sources":["../../../src/cli/actions/ScanAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as path from 'path';\r\nimport builtinPackageNames from 'builtin-modules';\r\n\r\nimport { Import, FileSystem } from '@rushstack/node-core-library';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { BaseConfiglessRushAction } from './BaseRushAction';\r\n\r\nconst glob: typeof import('glob') = Import.lazy('glob', require);\r\n\r\nexport class ScanAction extends BaseConfiglessRushAction {\r\n  public constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'scan',\r\n      summary:\r\n        'When migrating projects into a Rush repo, this command is helpful for detecting' +\r\n        ' undeclared dependencies.',\r\n      documentation:\r\n        `The Node.js module system allows a project to import NPM packages without explicitly` +\r\n        ` declaring them as dependencies in the package.json file.  Such \"phantom dependencies\"` +\r\n        ` can cause problems.  Rush and PNPM use symlinks specifically to protect against phantom dependencies.` +\r\n        ` These protections may cause runtime errors for existing projects when they are first migrated into` +\r\n        ` a Rush monorepo.  The \"rush scan\" command is a handy tool for fixing these errors. It scans the \"./src\"` +\r\n        ` and \"./lib\" folders for import syntaxes such as \"import __ from '__'\", \"require('__')\",` +\r\n        ` and \"System.import('__').  It prints a report of the referenced packages.  This heuristic is` +\r\n        ` not perfect, but it can save a lot of time when migrating projects.`,\r\n      safeForSimultaneousRushProcesses: true,\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    // abstract\r\n  }\r\n\r\n  protected async runAsync(): Promise<void> {\r\n    const packageJsonFilename: string = path.resolve('./package.json');\r\n\r\n    if (!FileSystem.exists(packageJsonFilename)) {\r\n      throw new Error('You must run \"rush scan\" in a project folder containing a package.json file.');\r\n    }\r\n\r\n    const requireRegExps: RegExp[] = [\r\n      // Example: require('something')\r\n      /\\brequire\\s*\\(\\s*[']([^']+\\s*)[']\\)/,\r\n      /\\brequire\\s*\\(\\s*[\"]([^\"]+)[\"]\\s*\\)/,\r\n\r\n      // Example: require.ensure('something')\r\n      /\\brequire.ensure\\s*\\(\\s*[']([^']+\\s*)[']\\)/,\r\n      /\\brequire.ensure\\s*\\(\\s*[\"]([^\"]+)[\"]\\s*\\)/,\r\n\r\n      // Example: require.resolve('something')\r\n      /\\brequire.resolve\\s*\\(\\s*[']([^']+\\s*)[']\\)/,\r\n      /\\brequire.resolve\\s*\\(\\s*[\"]([^\"]+)[\"]\\s*\\)/,\r\n\r\n      // Example: System.import('something')\r\n      /\\bSystem.import\\s*\\(\\s*[']([^']+\\s*)[']\\)/,\r\n      /\\bSystem.import\\s*\\(\\s*[\"]([^\"]+)[\"]\\s*\\)/,\r\n\r\n      // Example:\r\n      //\r\n      // import {\r\n      //   A, B\r\n      // } from 'something';\r\n      /\\bfrom\\s*[']([^']+)[']/,\r\n      /\\bfrom\\s*[\"]([^\"]+)[\"]/,\r\n\r\n      // Example:  import 'something';\r\n      /\\bimport\\s*[']([^']+)[']\\s*\\;/,\r\n      /\\bimport\\s*[\"]([^\"]+)[\"]\\s*\\;/,\r\n\r\n      // Example:\r\n      // /// <reference types=\"something\" />\r\n      /\\/\\/\\/\\s*<\\s*reference\\s+types\\s*=\\s*[\"]([^\"]+)[\"]\\s*\\/>/\r\n    ];\r\n\r\n    // Example: \"my-package/lad/dee/dah\" --> \"my-package\"\r\n    // Example: \"@ms/my-package\" --> \"@ms/my-package\"\r\n    const packageRegExp: RegExp = /^((@[a-z\\-0-9!_]+\\/)?[a-z\\-0-9!_]+)\\/?/;\r\n\r\n    const requireMatches: Set<string> = new Set<string>();\r\n\r\n    for (const filename of glob.sync('{./*.{ts,js,tsx,jsx},./{src,lib}/**/*.{ts,js,tsx,jsx}}')) {\r\n      try {\r\n        const contents: string = FileSystem.readFile(filename);\r\n        const lines: string[] = contents.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          for (const requireRegExp of requireRegExps) {\r\n            const requireRegExpResult: RegExpExecArray | null = requireRegExp.exec(line);\r\n            if (requireRegExpResult) {\r\n              requireMatches.add(requireRegExpResult[1]);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(colors.bold('Skipping file due to error: ' + filename));\r\n      }\r\n    }\r\n\r\n    const packageMatches: Set<string> = new Set<string>();\r\n\r\n    requireMatches.forEach((requireMatch: string) => {\r\n      const packageRegExpResult: RegExpExecArray | null = packageRegExp.exec(requireMatch);\r\n      if (packageRegExpResult) {\r\n        packageMatches.add(packageRegExpResult[1]);\r\n      }\r\n    });\r\n\r\n    const packageNames: string[] = [];\r\n\r\n    packageMatches.forEach((packageName: string) => {\r\n      packageNames.push(packageName);\r\n    });\r\n\r\n    packageNames.sort();\r\n\r\n    console.log('Detected dependencies:');\r\n    for (const packageName of packageNames) {\r\n      if (builtinPackageNames.indexOf(packageName) < 0) {\r\n        console.log('  ' + packageName);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}