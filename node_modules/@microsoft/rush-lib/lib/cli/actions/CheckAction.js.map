{"version":3,"file":"CheckAction.js","sourceRoot":"","sources":["../../../src/cli/actions/CheckAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;AAE3D,oDAA4B;AAI5B,qDAAkD;AAClD,6FAA0F;AAC1F,iDAA8C;AAE9C,MAAa,WAAY,SAAQ,+BAAc;IAI7C,YAAmB,MAA6B;QAC9C,KAAK,CAAC;YACJ,UAAU,EAAE,OAAO;YACnB,OAAO,EACL,6FAA6F;gBAC7F,oCAAoC;YACtC,aAAa,EACX,wFAAwF;gBACxF,yCAAyC;YAC3C,gCAAgC,EAAE,IAAI;YACtC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,mBAAQ,CAAC,iBAAiB,CAAC,CAAC;QACvE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACxC,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,2DAA2D;SACzE,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,QAAQ;QACtB,MAAM,OAAO,GAAuB,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC;QAEnF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,OAAO,EAAE;YACnC,OAAO,CAAC,GAAG,CACT,gBAAM,CAAC,MAAM,CACX,YAAY,OAAO,oFAAoF;gBACrG,8BAA8B,OAAO,sCAAsC,CAC9E,CACF,CAAC;SACH;QAED,6CAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACtD,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;YAC5B,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;SAClC,CAAC,CAAC;IACL,CAAC;CACF;AA3CD,kCA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport { CommandLineStringParameter, CommandLineFlagParameter } from '@rushstack/ts-command-line';\r\n\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\r\nimport { Variants } from '../../api/Variants';\r\n\r\nexport class CheckAction extends BaseRushAction {\r\n  private _variant!: CommandLineStringParameter;\r\n  private _jsonFlag!: CommandLineFlagParameter;\r\n\r\n  public constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'check',\r\n      summary:\r\n        \"Checks each project's package.json files and ensures that all dependencies are of the same \" +\r\n        'version throughout the repository.',\r\n      documentation:\r\n        \"Checks each project's package.json files and ensures that all dependencies are of the \" +\r\n        'same version throughout the repository.',\r\n      safeForSimultaneousRushProcesses: true,\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._variant = this.defineStringParameter(Variants.VARIANT_PARAMETER);\r\n    this._jsonFlag = this.defineFlagParameter({\r\n      parameterLongName: '--json',\r\n      description: 'If this flag is specified, output will be in JSON format.'\r\n    });\r\n  }\r\n\r\n  protected async runAsync(): Promise<void> {\r\n    const variant: string | undefined = this.rushConfiguration.currentInstalledVariant;\r\n\r\n    if (!this._variant.value && variant) {\r\n      console.log(\r\n        colors.yellow(\r\n          `Variant '${variant}' has been installed, but 'rush check' is currently checking the default variant. ` +\r\n            `Use 'rush check --variant '${variant}' to check the current installation.`\r\n        )\r\n      );\r\n    }\r\n\r\n    VersionMismatchFinder.rushCheck(this.rushConfiguration, {\r\n      variant: this._variant.value,\r\n      printAsJson: this._jsonFlag.value\r\n    });\r\n  }\r\n}\r\n"]}