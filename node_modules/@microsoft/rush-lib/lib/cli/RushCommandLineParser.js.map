{"version":3,"file":"RushCommandLineParser.js","sourceRoot":"","sources":["../../src/cli/RushCommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport { CommandLineParser, CommandLineFlagParameter, CommandLineAction } from '@rushstack/ts-command-line';\r\nimport { InternalError, AlreadyReportedError } from '@rushstack/node-core-library';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { CommandLineConfiguration } from '../api/CommandLineConfiguration';\r\nimport { CommandJson } from '../api/CommandLineJson';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { BaseScriptAction } from '../cli/scriptActions/BaseScriptAction';\r\n\r\nimport { AddAction } from './actions/AddAction';\r\nimport { ChangeAction } from './actions/ChangeAction';\r\nimport { CheckAction } from './actions/CheckAction';\r\nimport { DeployAction } from './actions/DeployAction';\r\nimport { InitAction } from './actions/InitAction';\r\nimport { InitAutoinstallerAction } from './actions/InitAutoinstallerAction';\r\nimport { InitDeployAction } from './actions/InitDeployAction';\r\nimport { InstallAction } from './actions/InstallAction';\r\nimport { LinkAction } from './actions/LinkAction';\r\nimport { ListAction } from './actions/ListAction';\r\nimport { PublishAction } from './actions/PublishAction';\r\nimport { PurgeAction } from './actions/PurgeAction';\r\nimport { ScanAction } from './actions/ScanAction';\r\nimport { UnlinkAction } from './actions/UnlinkAction';\r\nimport { UpdateAction } from './actions/UpdateAction';\r\nimport { UpdateAutoinstallerAction } from './actions/UpdateAutoinstallerAction';\r\nimport { VersionAction } from './actions/VersionAction';\r\nimport { UpdateCloudCredentialsAction } from './actions/UpdateCloudCredentialsAction';\r\nimport { WriteBuildCacheAction } from './actions/WriteBuildCacheAction';\r\n\r\nimport { BulkScriptAction } from './scriptActions/BulkScriptAction';\r\nimport { GlobalScriptAction } from './scriptActions/GlobalScriptAction';\r\n\r\nimport { Telemetry } from '../logic/Telemetry';\r\nimport { RushGlobalFolder } from '../api/RushGlobalFolder';\r\nimport { NodeJsCompatibility } from '../logic/NodeJsCompatibility';\r\n\r\n/**\r\n * Options for `RushCommandLineParser`.\r\n */\r\nexport interface IRushCommandLineParserOptions {\r\n  cwd: string; // Defaults to `cwd`\r\n  alreadyReportedNodeTooNewError: boolean;\r\n}\r\n\r\nexport class RushCommandLineParser extends CommandLineParser {\r\n  public telemetry: Telemetry | undefined;\r\n  public rushGlobalFolder!: RushGlobalFolder;\r\n  public rushConfiguration!: RushConfiguration;\r\n\r\n  private _debugParameter!: CommandLineFlagParameter;\r\n  private _rushOptions: IRushCommandLineParserOptions;\r\n\r\n  public constructor(options?: Partial<IRushCommandLineParserOptions>) {\r\n    super({\r\n      toolFilename: 'rush',\r\n      toolDescription:\r\n        'Rush makes life easier for JavaScript developers who develop, build, and publish' +\r\n        ' many packages from a central Git repo.  It is designed to handle very large repositories' +\r\n        ' supporting many projects and people.  Rush provides policies, protections, and customizations' +\r\n        ' that help coordinate teams and safely onboard new contributors.  Rush also generates change logs' +\r\n        ' and automates package publishing.  It can manage decoupled subsets of projects with different' +\r\n        ' release and versioning strategies.  A full API is included to facilitate integration with other' +\r\n        ' automation tools.  If you are looking for a proven turnkey solution for monorepo management,' +\r\n        ' Rush is for you.',\r\n      enableTabCompletionAction: true\r\n    });\r\n\r\n    this._rushOptions = this._normalizeOptions(options || {});\r\n\r\n    try {\r\n      const rushJsonFilename: string | undefined = RushConfiguration.tryFindRushJsonLocation({\r\n        startingFolder: this._rushOptions.cwd,\r\n        showVerbose: !Utilities.shouldRestrictConsoleOutput()\r\n      });\r\n      if (rushJsonFilename) {\r\n        this.rushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\r\n      }\r\n    } catch (error) {\r\n      this._reportErrorAndSetExitCode(error);\r\n    }\r\n\r\n    NodeJsCompatibility.warnAboutCompatibilityIssues({\r\n      isRushLib: true,\r\n      alreadyReportedNodeTooNewError: this._rushOptions.alreadyReportedNodeTooNewError,\r\n      rushConfiguration: this.rushConfiguration\r\n    });\r\n\r\n    this._populateActions();\r\n  }\r\n\r\n  public get isDebug(): boolean {\r\n    return this._debugParameter.value;\r\n  }\r\n\r\n  public flushTelemetry(): void {\r\n    if (this.telemetry) {\r\n      this.telemetry.flush();\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._debugParameter = this.defineFlagParameter({\r\n      parameterLongName: '--debug',\r\n      parameterShortName: '-d',\r\n      description: 'Show the full call stack if an error occurs while executing the tool'\r\n    });\r\n  }\r\n\r\n  protected async onExecute(): Promise<void> {\r\n    // Defensively set the exit code to 1 so if Rush crashes for whatever reason, we'll have a nonzero exit code.\r\n    // For example, Node.js currently has the inexcusable design of terminating with zero exit code when\r\n    // there is an uncaught promise exception.  This will supposedly be fixed in Node.js 9.\r\n    // Ideally we should do this for all the Rush actions, but \"rush build\" is the most critical one\r\n    // -- if it falsely appears to succeed, we could merge bad PRs, publish empty packages, etc.\r\n    process.exitCode = 1;\r\n\r\n    if (this._debugParameter.value) {\r\n      InternalError.breakInDebugger = true;\r\n    }\r\n\r\n    try {\r\n      await this._wrapOnExecuteAsync();\r\n      // If we make it here, everything went fine, so reset the exit code back to 0\r\n      process.exitCode = 0;\r\n    } catch (error) {\r\n      this._reportErrorAndSetExitCode(error);\r\n    }\r\n  }\r\n\r\n  private _normalizeOptions(options: Partial<IRushCommandLineParserOptions>): IRushCommandLineParserOptions {\r\n    return {\r\n      cwd: options.cwd || process.cwd(),\r\n      alreadyReportedNodeTooNewError: options.alreadyReportedNodeTooNewError || false\r\n    };\r\n  }\r\n\r\n  private async _wrapOnExecuteAsync(): Promise<void> {\r\n    if (this.rushConfiguration) {\r\n      this.telemetry = new Telemetry(this.rushConfiguration);\r\n    }\r\n\r\n    await super.onExecute();\r\n    if (this.telemetry) {\r\n      this.flushTelemetry();\r\n    }\r\n  }\r\n\r\n  private _populateActions(): void {\r\n    try {\r\n      this.rushGlobalFolder = new RushGlobalFolder();\r\n\r\n      this.addAction(new AddAction(this));\r\n      this.addAction(new ChangeAction(this));\r\n      this.addAction(new CheckAction(this));\r\n      this.addAction(new DeployAction(this));\r\n      this.addAction(new InitAction(this));\r\n      this.addAction(new InitAutoinstallerAction(this));\r\n      this.addAction(new InitDeployAction(this));\r\n      this.addAction(new InstallAction(this));\r\n      this.addAction(new LinkAction(this));\r\n      this.addAction(new ListAction(this));\r\n      this.addAction(new PublishAction(this));\r\n      this.addAction(new PurgeAction(this));\r\n      this.addAction(new ScanAction(this));\r\n      this.addAction(new UnlinkAction(this));\r\n      this.addAction(new UpdateAction(this));\r\n      this.addAction(new UpdateAutoinstallerAction(this));\r\n      this.addAction(new VersionAction(this));\r\n      this.addAction(new UpdateCloudCredentialsAction(this));\r\n\r\n      if (this.rushConfiguration?.experimentsConfiguration.configuration.buildCache) {\r\n        this.addAction(new WriteBuildCacheAction(this));\r\n      }\r\n\r\n      this._populateScriptActions();\r\n    } catch (error) {\r\n      this._reportErrorAndSetExitCode(error);\r\n    }\r\n  }\r\n\r\n  private _populateScriptActions(): void {\r\n    let commandLineConfiguration: CommandLineConfiguration | undefined = undefined;\r\n\r\n    // If there is not a rush.json file, we still want \"build\" and \"rebuild\" to appear in the\r\n    // command-line help\r\n    if (this.rushConfiguration) {\r\n      const commandLineConfigFile: string = path.join(\r\n        this.rushConfiguration.commonRushConfigFolder,\r\n        RushConstants.commandLineFilename\r\n      );\r\n\r\n      commandLineConfiguration = CommandLineConfiguration.loadFromFileOrDefault(commandLineConfigFile);\r\n    }\r\n\r\n    // Build actions from the command line configuration supersede default build actions.\r\n    this._addCommandLineConfigActions(commandLineConfiguration);\r\n    this._addDefaultBuildActions(commandLineConfiguration);\r\n    this._validateCommandLineConfigParameterAssociations(commandLineConfiguration);\r\n  }\r\n\r\n  private _addDefaultBuildActions(commandLineConfiguration?: CommandLineConfiguration): void {\r\n    if (!this.tryGetAction(RushConstants.buildCommandName)) {\r\n      this._addCommandLineConfigAction(\r\n        commandLineConfiguration,\r\n        CommandLineConfiguration.defaultBuildCommandJson\r\n      );\r\n    }\r\n\r\n    if (!this.tryGetAction(RushConstants.rebuildCommandName)) {\r\n      this._addCommandLineConfigAction(\r\n        commandLineConfiguration,\r\n        CommandLineConfiguration.defaultRebuildCommandJson,\r\n        RushConstants.buildCommandName\r\n      );\r\n    }\r\n  }\r\n\r\n  private _addCommandLineConfigActions(commandLineConfiguration?: CommandLineConfiguration): void {\r\n    if (!commandLineConfiguration) {\r\n      return;\r\n    }\r\n\r\n    // Register each custom command\r\n    for (const command of commandLineConfiguration.commands) {\r\n      this._addCommandLineConfigAction(commandLineConfiguration, command);\r\n    }\r\n  }\r\n\r\n  private _addCommandLineConfigAction(\r\n    commandLineConfiguration: CommandLineConfiguration | undefined,\r\n    command: CommandJson,\r\n    commandToRun?: string\r\n  ): void {\r\n    if (this.tryGetAction(command.name)) {\r\n      throw new Error(\r\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\"` +\r\n          ` using a name that already exists`\r\n      );\r\n    }\r\n\r\n    this._validateCommandLineConfigCommand(command);\r\n\r\n    switch (command.commandKind) {\r\n      case RushConstants.bulkCommandKind:\r\n        this.addAction(\r\n          new BulkScriptAction({\r\n            actionName: command.name,\r\n\r\n            // By default, the \"rebuild\" action runs the \"build\" script. However, if the command-line.json file\r\n            // overrides \"rebuild,\" the \"rebuild\" script should be run.\r\n            commandToRun: commandToRun,\r\n\r\n            summary: command.summary,\r\n            documentation: command.description || command.summary,\r\n            safeForSimultaneousRushProcesses: command.safeForSimultaneousRushProcesses,\r\n\r\n            parser: this,\r\n            commandLineConfiguration: commandLineConfiguration,\r\n\r\n            enableParallelism: command.enableParallelism,\r\n            ignoreMissingScript: command.ignoreMissingScript || false,\r\n            ignoreDependencyOrder: command.ignoreDependencyOrder || false,\r\n            incremental: command.incremental || false,\r\n            allowWarningsInSuccessfulBuild: !!command.allowWarningsInSuccessfulBuild\r\n          })\r\n        );\r\n        break;\r\n\r\n      case RushConstants.globalCommandKind:\r\n        this.addAction(\r\n          new GlobalScriptAction({\r\n            actionName: command.name,\r\n            summary: command.summary,\r\n            documentation: command.description || command.summary,\r\n            safeForSimultaneousRushProcesses: command.safeForSimultaneousRushProcesses,\r\n\r\n            parser: this,\r\n            commandLineConfiguration: commandLineConfiguration,\r\n\r\n            shellCommand: command.shellCommand,\r\n\r\n            autoinstallerName: command.autoinstallerName\r\n          })\r\n        );\r\n        break;\r\n      default:\r\n        throw new Error(\r\n          `${RushConstants.commandLineFilename} defines a command \"${command!.name}\"` +\r\n            ` using an unsupported command kind \"${command!.commandKind}\"`\r\n        );\r\n    }\r\n  }\r\n\r\n  private _validateCommandLineConfigParameterAssociations(\r\n    commandLineConfiguration?: CommandLineConfiguration\r\n  ): void {\r\n    if (!commandLineConfiguration) {\r\n      return;\r\n    }\r\n\r\n    // Check for any invalid associations\r\n    for (const parameter of commandLineConfiguration.parameters) {\r\n      for (const associatedCommand of parameter.associatedCommands) {\r\n        const action: CommandLineAction | undefined = this.tryGetAction(associatedCommand);\r\n        if (!action) {\r\n          throw new Error(\r\n            `${RushConstants.commandLineFilename} defines a parameter \"${parameter.longName}\"` +\r\n              ` that is associated with a nonexistent command \"${associatedCommand}\"`\r\n          );\r\n        }\r\n        if (!(action instanceof BaseScriptAction)) {\r\n          throw new Error(\r\n            `${RushConstants.commandLineFilename} defines a parameter \"${parameter.longName}\"` +\r\n              ` that is associated with a command \"${associatedCommand}\", but that command does not` +\r\n              ` support custom parameters`\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _validateCommandLineConfigCommand(command: CommandJson): void {\r\n    // There are some restrictions on the 'build' and 'rebuild' commands.\r\n    if (\r\n      command.name !== RushConstants.buildCommandName &&\r\n      command.name !== RushConstants.rebuildCommandName\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (command.commandKind === RushConstants.globalCommandKind) {\r\n      throw new Error(\r\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\" using ` +\r\n          `the command kind \"${RushConstants.globalCommandKind}\". This command can only be designated as a command ` +\r\n          `kind \"${RushConstants.bulkCommandKind}\".`\r\n      );\r\n    }\r\n    if (command.safeForSimultaneousRushProcesses) {\r\n      throw new Error(\r\n        `${RushConstants.commandLineFilename} defines a command \"${command.name}\" using ` +\r\n          `\"safeForSimultaneousRushProcesses=true\". This configuration is not supported for \"${command.name}\".`\r\n      );\r\n    }\r\n  }\r\n\r\n  private _reportErrorAndSetExitCode(error: Error): void {\r\n    if (!(error instanceof AlreadyReportedError)) {\r\n      const prefix: string = 'ERROR: ';\r\n      console.error(os.EOL + colors.red(Utilities.wrapWords(prefix + error.message)));\r\n    }\r\n\r\n    if (this._debugParameter.value) {\r\n      // If catchSyncErrors() called this, then show a call stack similar to what Node.js\r\n      // would show for an uncaught error\r\n      console.error(os.EOL + error.stack);\r\n    }\r\n\r\n    this.flushTelemetry();\r\n\r\n    // Ideally we want to eliminate all calls to process.exit() from our code, and replace them\r\n    // with normal control flow that properly cleans up its data structures.\r\n    // For this particular call, we have a problem that the RushCommandLineParser constructor\r\n    // performs nontrivial work that can throw an exception.  Either the Rush class would need\r\n    // to handle reporting for those exceptions, or else _populateActions() should be moved\r\n    // to a RushCommandLineParser lifecycle stage that can handle it.\r\n    if (process.exitCode !== undefined) {\r\n      process.exit(process.exitCode);\r\n    } else {\r\n      process.exit(1);\r\n    }\r\n  }\r\n}\r\n"]}