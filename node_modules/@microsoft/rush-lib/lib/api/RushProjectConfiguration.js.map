{"version":3,"file":"RushProjectConfiguration.js","sourceRoot":"","sources":["../../src/api/RushProjectConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,kEAAiF;AACjF,wDAAmD;AAGnD,0DAAuD;AAcvD;;;;;GAKG;AACH,MAAa,wBAAwB;IAsBnC,YAAoB,OAAiC,EAAE,qBAAuC;QAC5F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,wBAAwB,GAAG,qBAAqB,CAAC,wBAAwB,CAAC;IACjF,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,sBAAsB,CACxC,OAAiC,EACjC,QAAkB;QAElB,MAAM,SAAS,GAAc,MAAM,uBAAS,CAAC,yBAAyB,CAAC;YACrE,iBAAiB,EAAE,OAAO,CAAC,aAAa;SACzC,CAAC,CAAC;QAEH,MAAM,eAAe,GAEL,MAAM,IAAI,CAAC,mCAAmC,CAAC,uCAAuC,CACpG,QAAQ,EACR,OAAO,CAAC,aAAa,EACrB,SAAS,CACV,CAAC;QAEF,IAAI,eAAe,EAAE;YACnB,wBAAwB,CAAC,sBAAsB,CAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;YACpF,OAAO,IAAI,wBAAwB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;SAC/D;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAEO,MAAM,CAAC,sBAAsB,CACnC,OAAiC,EACjC,eAAiC,EACjC,QAAkB;QAElB,MAAM,kBAAkB,GAAa,EAAE,CAAC;QACxC,KAAK,MAAM,mBAAmB,IAAI,eAAe,CAAC,wBAAwB,EAAE;YAC1E,IAAI,mBAAmB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACvC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;aAC9C;SACF;QAED,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,QAAQ,CAAC,cAAc,CACrB,8CAA8C,OAAO,CAAC,WAAW,gBAAgB;gBAC/E,oFAAoF;gBACpF,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;SACH;IACH,CAAC;;AA1EH,4DA2EC;AA1EgB,4DAAmC,GAE9C,IAAI,oCAAiB,CAAmB;IAC1C,uBAAuB,EAAE,UAAU,6BAAa,CAAC,yBAAyB,EAAE;IAC5E,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,0BAA0B,CAAC;IACpF,mBAAmB,EAAE;QACnB,wBAAwB,EAAE;YACxB,eAAe,EAAE,kCAAe,CAAC,MAAM;SACxC;KACF;CACF,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal } from '@rushstack/node-core-library';\r\nimport { ConfigurationFile, InheritanceType } from '@rushstack/heft-config-file';\r\nimport { RigConfig } from '@rushstack/rig-package';\r\n\r\nimport { RushConfigurationProject } from './RushConfigurationProject';\r\nimport { RushConstants } from '../logic/RushConstants';\r\n\r\n/**\r\n * Describes the file structure for the \"<project root>/config/rush-project.json\" config file.\r\n */\r\ninterface IRushProjectJson {\r\n  /**\r\n   * A list of folder names under the project root that should be cached.\r\n   *\r\n   * These folders should not be tracked by git.\r\n   */\r\n  projectOutputFolderNames: string[];\r\n}\r\n\r\n/**\r\n * Use this class to load the \"config/rush-project.json\" config file.\r\n *\r\n * This file provides project-specific configuration options.\r\n * @public\r\n */\r\nexport class RushProjectConfiguration {\r\n  private static _projectBuildCacheConfigurationFile: ConfigurationFile<\r\n    IRushProjectJson\r\n  > = new ConfigurationFile<IRushProjectJson>({\r\n    projectRelativeFilePath: `config/${RushConstants.rushProjectConfigFilename}`,\r\n    jsonSchemaPath: path.resolve(__dirname, '..', 'schemas', 'rush-project.schema.json'),\r\n    propertyInheritance: {\r\n      projectOutputFolderNames: {\r\n        inheritanceType: InheritanceType.append\r\n      }\r\n    }\r\n  });\r\n\r\n  public readonly project: RushConfigurationProject;\r\n\r\n  /**\r\n   * A list of folder names under the project root that should be cached.\r\n   *\r\n   * These folders should not be tracked by git.\r\n   */\r\n  public readonly projectOutputFolderNames: string[];\r\n\r\n  private constructor(project: RushConfigurationProject, projectBuildCacheJson: IRushProjectJson) {\r\n    this.project = project;\r\n\r\n    this.projectOutputFolderNames = projectBuildCacheJson.projectOutputFolderNames;\r\n  }\r\n\r\n  /**\r\n   * Loads the rush-project.json data for the specified project.\r\n   */\r\n  public static async tryLoadForProjectAsync(\r\n    project: RushConfigurationProject,\r\n    terminal: Terminal\r\n  ): Promise<RushProjectConfiguration | undefined> {\r\n    const rigConfig: RigConfig = await RigConfig.loadForProjectFolderAsync({\r\n      projectFolderPath: project.projectFolder\r\n    });\r\n\r\n    const rushProjectJson:\r\n      | IRushProjectJson\r\n      | undefined = await this._projectBuildCacheConfigurationFile.tryLoadConfigurationFileForProjectAsync(\r\n      terminal,\r\n      project.projectFolder,\r\n      rigConfig\r\n    );\r\n\r\n    if (rushProjectJson) {\r\n      RushProjectConfiguration._validateConfiguration(project, rushProjectJson, terminal);\r\n      return new RushProjectConfiguration(project, rushProjectJson);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private static _validateConfiguration(\r\n    project: RushConfigurationProject,\r\n    rushProjectJson: IRushProjectJson,\r\n    terminal: Terminal\r\n  ): void {\r\n    const invalidFolderNames: string[] = [];\r\n    for (const projectOutputFolder of rushProjectJson.projectOutputFolderNames) {\r\n      if (projectOutputFolder.match(/[\\/\\\\]/)) {\r\n        invalidFolderNames.push(projectOutputFolder);\r\n      }\r\n    }\r\n\r\n    if (invalidFolderNames.length > 0) {\r\n      terminal.writeErrorLine(\r\n        `Invalid project configuration for project \"${project.packageName}\". Entries in ` +\r\n          '\"projectOutputFolderNames\" must not contain slashes and the following entries do: ' +\r\n          invalidFolderNames.join(', ')\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}