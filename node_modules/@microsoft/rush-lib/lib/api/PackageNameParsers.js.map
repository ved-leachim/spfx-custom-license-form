{"version":3,"file":"PackageNameParsers.js","sourceRoot":"","sources":["../../src/api/PackageNameParsers.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAiE;AAEjE,MAAa,kBAAkB;;AAA/B,gDAmBC;AAlBC;;GAEG;AACW,8BAAW,GAAsB,IAAI,qCAAiB,CAAC,EAAE,CAAC,CAAC;AAEzE;;;GAGG;AACW,iCAAc,GAAsB,IAAI,qCAAiB,CAAC;IACtE,cAAc,EAAE,IAAI;CACrB,CAAC,CAAC;AAEH;;;GAGG;AACW,6BAAU,GAAsB,kBAAkB,CAAC,cAAc,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { PackageNameParser } from '@rushstack/node-core-library';\r\n\r\nexport class PackageNameParsers {\r\n  /**\r\n   * This is the default for `RushConfiguration.packageNameParser`.\r\n   */\r\n  public static rushDefault: PackageNameParser = new PackageNameParser({});\r\n\r\n  /**\r\n   * This is the `RushConfiguration.packageNameParser` used when `allowMostlyStandardPackageNames = true`\r\n   * in rush.json.\r\n   */\r\n  public static mostlyStandard: PackageNameParser = new PackageNameParser({\r\n    allowUpperCase: true\r\n  });\r\n\r\n  /**\r\n   * Use this in contexts where we don't have easy access to `RushConfiguration.packageNameParser`\r\n   * AND the package name was already validated at some earlier stage.\r\n   */\r\n  public static permissive: PackageNameParser = PackageNameParsers.mostlyStandard;\r\n}\r\n"]}