{"version":3,"file":"CommandLineConfiguration.js","sourceRoot":"","sources":["../../src/api/CommandLineConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport { JsonFile, JsonSchema, FileSystem } from '@rushstack/node-core-library';\r\n\r\nimport { RushConstants } from '../logic/RushConstants';\r\n\r\nimport { CommandJson, ICommandLineJson, ParameterJson } from './CommandLineJson';\r\n\r\n/**\r\n * Custom Commands and Options for the Rush Command Line\r\n */\r\nexport class CommandLineConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/command-line.schema.json')\r\n  );\r\n\r\n  public readonly commands: CommandJson[] = [];\r\n  public readonly parameters: ParameterJson[] = [];\r\n\r\n  public static readonly defaultBuildCommandJson: CommandJson = {\r\n    commandKind: RushConstants.bulkCommandKind,\r\n    name: RushConstants.buildCommandName,\r\n    summary: \"Build all projects that haven't been built, or have changed since they were last built.\",\r\n    description:\r\n      'This command is similar to \"rush rebuild\", except that \"rush build\" performs' +\r\n      ' an incremental build. In other words, it only builds projects whose source files have changed' +\r\n      ' since the last successful build. The analysis requires a Git working tree, and only considers' +\r\n      ' source files that are tracked by Git and whose path is under the project folder. (For more details' +\r\n      ' about this algorithm, see the documentation for the \"package-deps-hash\" NPM package.) The incremental' +\r\n      ' build state is tracked in a per-project folder called \".rush/temp\" which should NOT be added to Git. The' +\r\n      ' build command is tracked by the \"arguments\" field in the \"package-deps_build.json\" file contained' +\r\n      ' therein; a full rebuild is forced whenever the command has changed (e.g. \"--production\" or not).',\r\n    enableParallelism: true,\r\n    ignoreMissingScript: false,\r\n    ignoreDependencyOrder: false,\r\n    incremental: true,\r\n    allowWarningsInSuccessfulBuild: false,\r\n    safeForSimultaneousRushProcesses: false\r\n  };\r\n\r\n  public static readonly defaultRebuildCommandJson: CommandJson = {\r\n    commandKind: RushConstants.bulkCommandKind,\r\n    name: RushConstants.rebuildCommandName,\r\n    summary: 'Clean and rebuild the entire set of projects',\r\n    description:\r\n      'This command assumes that the package.json file for each project contains' +\r\n      ' a \"scripts\" entry for \"npm run build\" that performs a full clean build.' +\r\n      ' Rush invokes this script to build each project that is registered in rush.json.' +\r\n      ' Projects are built in parallel where possible, but always respecting the dependency' +\r\n      ' graph for locally linked projects.  The number of simultaneous processes will be' +\r\n      ' based on the number of machine cores unless overridden by the --parallelism flag.' +\r\n      ' (For an incremental build, see \"rush build\" instead of \"rush rebuild\".)',\r\n    enableParallelism: true,\r\n    ignoreMissingScript: false,\r\n    ignoreDependencyOrder: false,\r\n    incremental: false,\r\n    allowWarningsInSuccessfulBuild: false,\r\n    safeForSimultaneousRushProcesses: false\r\n  };\r\n\r\n  /**\r\n   * Use CommandLineConfiguration.loadFromFile()\r\n   */\r\n  private constructor(commandLineJson: ICommandLineJson | undefined) {\r\n    if (commandLineJson) {\r\n      if (commandLineJson.commands) {\r\n        for (const command of commandLineJson.commands) {\r\n          this.commands.push(command);\r\n        }\r\n      }\r\n\r\n      if (commandLineJson.parameters) {\r\n        for (const parameter of commandLineJson.parameters) {\r\n          this.parameters.push(parameter);\r\n\r\n          // Do some basic validation\r\n          switch (parameter.parameterKind) {\r\n            case 'choice':\r\n              const alternativeNames: string[] = parameter.alternatives.map((x) => x.name);\r\n\r\n              if (parameter.defaultValue && alternativeNames.indexOf(parameter.defaultValue) < 0) {\r\n                throw new Error(\r\n                  `In ${RushConstants.commandLineFilename}, the parameter \"${parameter.longName}\",` +\r\n                    ` specifies a default value \"${parameter.defaultValue}\"` +\r\n                    ` which is not one of the defined alternatives: \"${alternativeNames.toString()}\"`\r\n                );\r\n              }\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads the configuration from the specified file and applies any omitted default build\r\n   * settings.  If the file does not exist, then an empty default instance is returned.\r\n   * If the file contains errors, then an exception is thrown.\r\n   */\r\n  public static loadFromFileOrDefault(jsonFilename: string): CommandLineConfiguration {\r\n    let commandLineJson: ICommandLineJson | undefined = undefined;\r\n    if (FileSystem.exists(jsonFilename)) {\r\n      commandLineJson = JsonFile.load(jsonFilename);\r\n\r\n      // merge commands specified in command-line.json and default (re)build settings\r\n      // Ensure both build commands are included and preserve any other commands specified\r\n      if (commandLineJson && commandLineJson.commands) {\r\n        for (let i: number = 0; i < commandLineJson.commands.length; i++) {\r\n          const command: CommandJson = commandLineJson.commands[i];\r\n\r\n          // Determine if we have a set of default parameters\r\n          let commandDefaultDefinition: CommandJson | {} = {};\r\n          switch (command.commandKind) {\r\n            case RushConstants.bulkCommandKind: {\r\n              switch (command.name) {\r\n                case RushConstants.buildCommandName: {\r\n                  commandDefaultDefinition = CommandLineConfiguration.defaultBuildCommandJson;\r\n                  break;\r\n                }\r\n\r\n                case RushConstants.rebuildCommandName: {\r\n                  commandDefaultDefinition = CommandLineConfiguration.defaultRebuildCommandJson;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n          }\r\n\r\n          // Merge the default parameters into the repo-specified parameters\r\n          commandLineJson.commands[i] = {\r\n            ...commandDefaultDefinition,\r\n            ...command\r\n          };\r\n        }\r\n\r\n        CommandLineConfiguration._jsonSchema.validateObject(commandLineJson, jsonFilename);\r\n      }\r\n    }\r\n\r\n    return new CommandLineConfiguration(commandLineJson);\r\n  }\r\n}\r\n"]}