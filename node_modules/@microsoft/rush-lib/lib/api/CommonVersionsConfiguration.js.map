{"version":3,"file":"CommonVersionsConfiguration.js","sourceRoot":"","sources":["../../src/api/CommonVersionsConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport crypto from 'crypto';\r\nimport * as path from 'path';\r\nimport {\r\n  JsonFile,\r\n  JsonSchema,\r\n  MapExtensions,\r\n  ProtectableMap,\r\n  FileSystem,\r\n  Sort\r\n} from '@rushstack/node-core-library';\r\nimport { PackageNameParsers } from './PackageNameParsers';\r\nimport { JsonSchemaUrls } from '../logic/JsonSchemaUrls';\r\n\r\n/**\r\n * Part of the ICommonVersionsJson structure.\r\n */\r\nexport declare interface ICommonVersionsJsonVersionMap {\r\n  /**\r\n   * The key is the name of a dependency.  The value is a Semantic Versioning (SemVer)\r\n   * range specifier.\r\n   */\r\n  [dependencyName: string]: string;\r\n}\r\n\r\n/**\r\n * Part of the ICommonVersionsJson structure.\r\n */\r\nexport declare interface ICommonVersionsJsonVersionsMap {\r\n  /**\r\n   * The key is the name of a dependency.  The value is a list of Semantic Versioning (SemVer)\r\n   * range specifiers.\r\n   */\r\n  [dependencyName: string]: string[];\r\n}\r\n\r\n/**\r\n * Describes the file structure for the \"common/config/rush/common-versions.json\" config file.\r\n */\r\ninterface ICommonVersionsJson {\r\n  $schema?: string;\r\n\r\n  preferredVersions?: ICommonVersionsJsonVersionMap;\r\n\r\n  implicitlyPreferredVersions?: boolean;\r\n\r\n  xstitchPreferredVersions?: ICommonVersionsJsonVersionMap;\r\n\r\n  allowedAlternativeVersions?: ICommonVersionsJsonVersionsMap;\r\n}\r\n\r\n/**\r\n * Use this class to load and save the \"common/config/rush/common-versions.json\" config file.\r\n * This config file stores dependency version information that affects all projects in the repo.\r\n * @public\r\n */\r\nexport class CommonVersionsConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/common-versions.schema.json')\r\n  );\r\n\r\n  private _filePath: string;\r\n  private _preferredVersions: ProtectableMap<string, string>;\r\n  private _implicitlyPreferredVersions: boolean | undefined;\r\n  private _xstitchPreferredVersions: ProtectableMap<string, string>;\r\n  private _allowedAlternativeVersions: ProtectableMap<string, string[]>;\r\n  private _modified: boolean = false;\r\n\r\n  private constructor(commonVersionsJson: ICommonVersionsJson | undefined, filePath: string) {\r\n    this._preferredVersions = new ProtectableMap<string, string>({\r\n      onSet: this._onSetPreferredVersions.bind(this)\r\n    });\r\n\r\n    if (commonVersionsJson && commonVersionsJson.implicitlyPreferredVersions !== undefined) {\r\n      this._implicitlyPreferredVersions = commonVersionsJson.implicitlyPreferredVersions;\r\n    } else {\r\n      this._implicitlyPreferredVersions = undefined;\r\n    }\r\n\r\n    this._xstitchPreferredVersions = new ProtectableMap<string, string>({\r\n      onSet: this._onSetPreferredVersions.bind(this)\r\n    });\r\n\r\n    this._allowedAlternativeVersions = new ProtectableMap<string, string[]>({\r\n      onSet: this._onSetAllowedAlternativeVersions.bind(this)\r\n    });\r\n\r\n    if (commonVersionsJson) {\r\n      try {\r\n        CommonVersionsConfiguration._deserializeTable(\r\n          this.preferredVersions,\r\n          commonVersionsJson.preferredVersions\r\n        );\r\n        CommonVersionsConfiguration._deserializeTable(\r\n          this.xstitchPreferredVersions,\r\n          commonVersionsJson.xstitchPreferredVersions\r\n        );\r\n        CommonVersionsConfiguration._deserializeTable(\r\n          this.allowedAlternativeVersions,\r\n          commonVersionsJson.allowedAlternativeVersions\r\n        );\r\n      } catch (e) {\r\n        throw new Error(`Error loading \"${path.basename(filePath)}\": ${e.message}`);\r\n      }\r\n    }\r\n    this._filePath = filePath;\r\n  }\r\n\r\n  /**\r\n   * Loads the common-versions.json data from the specified file path.\r\n   * If the file has not been created yet, then an empty object is returned.\r\n   */\r\n  public static loadFromFile(jsonFilename: string): CommonVersionsConfiguration {\r\n    let commonVersionsJson: ICommonVersionsJson | undefined = undefined;\r\n\r\n    if (FileSystem.exists(jsonFilename)) {\r\n      commonVersionsJson = JsonFile.loadAndValidate(jsonFilename, CommonVersionsConfiguration._jsonSchema);\r\n    }\r\n\r\n    return new CommonVersionsConfiguration(commonVersionsJson, jsonFilename);\r\n  }\r\n\r\n  private static _deserializeTable<TValue>(\r\n    map: Map<string, TValue>,\r\n    object: { [key: string]: TValue } | undefined\r\n  ): void {\r\n    if (object) {\r\n      for (const [key, value] of Object.entries(object)) {\r\n        map.set(key, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _serializeTable<TValue>(map: Map<string, TValue>): { [key: string]: TValue } {\r\n    const table: { [key: string]: TValue } = {};\r\n\r\n    const keys: string[] = [...map.keys()];\r\n    keys.sort();\r\n    for (const key of keys) {\r\n      table[key] = map.get(key)!;\r\n    }\r\n\r\n    return table;\r\n  }\r\n\r\n  /**\r\n   * Get the absolute file path of the common-versions.json file.\r\n   */\r\n  public get filePath(): string {\r\n    return this._filePath;\r\n  }\r\n\r\n  /**\r\n   * Get a sha1 hash of the preferred versions.\r\n   */\r\n  public getPreferredVersionsHash(): string {\r\n    // Sort so that the hash is stable\r\n    const orderedPreferredVersions: Map<string, string> = new Map<string, string>(\r\n      this._preferredVersions.protectedView\r\n    );\r\n    Sort.sortMapKeys(orderedPreferredVersions);\r\n\r\n    // JSON.stringify does not support maps, so we need to convert to an object first\r\n    const preferredVersionsObj: { [dependency: string]: string } = MapExtensions.toObject(\r\n      orderedPreferredVersions\r\n    );\r\n    return crypto.createHash('sha1').update(JSON.stringify(preferredVersionsObj)).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * Writes the \"common-versions.json\" file to disk, using the filename that was passed to loadFromFile().\r\n   */\r\n  public save(): boolean {\r\n    if (this._modified) {\r\n      JsonFile.save(this._serialize(), this._filePath, { updateExistingFile: true });\r\n      this._modified = false;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * A table that specifies a \"preferred version\" for a given NPM package.  This feature is typically used\r\n   * to hold back an indirect dependency to a specific older version, or to reduce duplication of indirect dependencies.\r\n   *\r\n   * @remarks\r\n   * The \"preferredVersions\" value can be any SemVer range specifier (e.g. `~1.2.3`).  Rush injects these values into\r\n   * the \"dependencies\" field of the top-level common/temp/package.json, which influences how the package manager\r\n   * will calculate versions.  The specific effect depends on your package manager.  Generally it will have no\r\n   * effect on an incompatible or already constrained SemVer range.  If you are using PNPM, similar effects can be\r\n   * achieved using the pnpmfile.js hook.  See the Rush documentation for more details.\r\n   *\r\n   * After modifying this field, it's recommended to run `rush update --full` so that the package manager\r\n   * will recalculate all version selections.\r\n   */\r\n  public get preferredVersions(): Map<string, string> {\r\n    return this._preferredVersions.protectedView;\r\n  }\r\n\r\n  /**\r\n   * When set to true, for all projects in the repo, all dependencies will be automatically added as preferredVersions,\r\n   * except in cases where different projects specify different version ranges for a given dependency.  For older\r\n   * package managers, this tended to reduce duplication of indirect dependencies.  However, it can sometimes cause\r\n   * trouble for indirect dependencies with incompatible peerDependencies ranges.\r\n   *\r\n   * If the value is `undefined`, then the default value is `true`.\r\n   */\r\n  public get implicitlyPreferredVersions(): boolean | undefined {\r\n    return this._implicitlyPreferredVersions;\r\n  }\r\n\r\n  /**\r\n   * A table of specifies preferred versions maintained by the XStitch tool.\r\n   *\r\n   * @remarks\r\n   * This property has the same behavior as the \"preferredVersions\" property, except these entries\r\n   * are automatically managed by the XStitch tool.  It is an error for the same dependency name\r\n   * to appear in both tables.\r\n   */\r\n  public get xstitchPreferredVersions(): Map<string, string> {\r\n    return this._xstitchPreferredVersions.protectedView;\r\n  }\r\n\r\n  /**\r\n   * A table that stores, for a given dependency, a list of SemVer ranges that will be accepted\r\n   * by \"rush check\" in addition to the normal version range.\r\n   *\r\n   * @remarks\r\n   * The \"rush check\" command can be used to enforce that every project in the repo\r\n   * must specify the same SemVer range for a given dependency.  However, sometimes\r\n   * exceptions are needed.  The allowedAlternativeVersions table allows you to list\r\n   * other SemVer ranges that will be accepted by \"rush check\" for a given dependency.\r\n   * Note that the normal version range (as inferred by looking at all projects in the repo)\r\n   * should NOT be included in this list.\r\n   */\r\n  public get allowedAlternativeVersions(): Map<string, ReadonlyArray<string>> {\r\n    return this._allowedAlternativeVersions.protectedView;\r\n  }\r\n\r\n  /**\r\n   * Returns the union of preferredVersions and xstitchPreferredVersions.\r\n   */\r\n  public getAllPreferredVersions(): Map<string, string> {\r\n    const allPreferredVersions: Map<string, string> = new Map<string, string>();\r\n    MapExtensions.mergeFromMap(allPreferredVersions, this.preferredVersions);\r\n    MapExtensions.mergeFromMap(allPreferredVersions, this.xstitchPreferredVersions);\r\n    return allPreferredVersions;\r\n  }\r\n\r\n  private _onSetPreferredVersions(\r\n    source: ProtectableMap<string, string>,\r\n    key: string,\r\n    value: string\r\n  ): string {\r\n    PackageNameParsers.permissive.validate(key);\r\n\r\n    if (source === this._preferredVersions) {\r\n      if (this._xstitchPreferredVersions.has(key)) {\r\n        throw new Error(\r\n          `The package \"${key}\" cannot be added to preferredVersions because it was already` +\r\n            ` added to xstitchPreferredVersions`\r\n        );\r\n      }\r\n    } else {\r\n      if (this._preferredVersions.has(key)) {\r\n        throw new Error(\r\n          `The package \"${key}\" cannot be added to xstitchPreferredVersions because it was already` +\r\n            ` added to preferredVersions`\r\n        );\r\n      }\r\n    }\r\n\r\n    this._modified = true;\r\n\r\n    return value;\r\n  }\r\n\r\n  private _onSetAllowedAlternativeVersions(\r\n    source: ProtectableMap<string, string[]>,\r\n    key: string,\r\n    value: string[]\r\n  ): string[] {\r\n    PackageNameParsers.permissive.validate(key);\r\n\r\n    this._modified = true;\r\n\r\n    return value;\r\n  }\r\n\r\n  private _serialize(): ICommonVersionsJson {\r\n    const result: ICommonVersionsJson = {\r\n      $schema: JsonSchemaUrls.commonVersions\r\n    };\r\n\r\n    if (this._preferredVersions.size) {\r\n      result.preferredVersions = CommonVersionsConfiguration._serializeTable(this.preferredVersions);\r\n    }\r\n\r\n    if (this._xstitchPreferredVersions.size) {\r\n      result.xstitchPreferredVersions = CommonVersionsConfiguration._serializeTable(\r\n        this.xstitchPreferredVersions\r\n      );\r\n    }\r\n\r\n    if (this._allowedAlternativeVersions.size) {\r\n      result.allowedAlternativeVersions = CommonVersionsConfiguration._serializeTable(\r\n        this.allowedAlternativeVersions\r\n      ) as ICommonVersionsJsonVersionsMap;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n"]}