"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildCacheConfiguration = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const AzureStorageBuildCacheProvider_1 = require("../logic/buildCache/AzureStorageBuildCacheProvider");
const FileSystemBuildCacheProvider_1 = require("../logic/buildCache/FileSystemBuildCacheProvider");
const RushConstants_1 = require("../logic/RushConstants");
const RushUserConfiguration_1 = require("./RushUserConfiguration");
const CacheEntryId_1 = require("../logic/buildCache/CacheEntryId");
/**
 * Use this class to load and save the "common/config/rush/build-cache.json" config file.
 * This file provides configuration options for cached project build output.
 * @public
 */
class BuildCacheConfiguration {
    constructor(options) {
        this.getCacheEntryId = options.getCacheEntryId;
        this.localCacheProvider = new FileSystemBuildCacheProvider_1.FileSystemBuildCacheProvider({
            rushUserConfiguration: options.rushUserConfiguration,
            rushConfiguration: options.rushConfiguration
        });
        const { buildCacheJson } = options;
        switch (buildCacheJson.cacheProvider) {
            case 'local-only': {
                // Don't configure a cloud cache provider
                break;
            }
            case 'azure-blob-storage': {
                const azureStorageBuildCacheJson = buildCacheJson;
                const azureStorageConfigurationJson = azureStorageBuildCacheJson.azureBlobStorageConfiguration;
                this.cloudCacheProvider = new AzureStorageBuildCacheProvider_1.AzureStorageBuildCacheProvider({
                    storageAccountName: azureStorageConfigurationJson.storageAccountName,
                    storageContainerName: azureStorageConfigurationJson.storageContainerName,
                    azureEnvironment: azureStorageConfigurationJson.azureEnvironment,
                    blobPrefix: azureStorageConfigurationJson.blobPrefix,
                    isCacheWriteAllowed: !!azureStorageConfigurationJson.isCacheWriteAllowed
                });
                break;
            }
            default: {
                throw new Error(`Unexpected cache provider: ${buildCacheJson.cacheProvider}`);
            }
        }
    }
    /**
     * Loads the build-cache.json data from the repo's default file path (/common/config/rush/build-cache.json).
     * If the file has not been created yet, then undefined is returned.
     */
    static async loadFromDefaultPathAsync(terminal, rushConfiguration) {
        const jsonFilePath = BuildCacheConfiguration.getBuildCacheConfigFilePath(rushConfiguration);
        if (node_core_library_1.FileSystem.exists(jsonFilePath)) {
            const buildCacheJson = await node_core_library_1.JsonFile.loadAndValidateAsync(jsonFilePath, BuildCacheConfiguration._jsonSchema);
            const rushUserConfiguration = await RushUserConfiguration_1.RushUserConfiguration.initializeAsync();
            let getCacheEntryId;
            try {
                getCacheEntryId = CacheEntryId_1.CacheEntryId.parsePattern(buildCacheJson.cacheEntryNamePattern);
            }
            catch (e) {
                terminal.writeErrorLine(`Error parsing cache entry name pattern "${buildCacheJson.cacheEntryNamePattern}": ${e}`);
                throw new node_core_library_1.AlreadyReportedError();
            }
            return new BuildCacheConfiguration({
                buildCacheJson,
                getCacheEntryId,
                rushConfiguration,
                rushUserConfiguration
            });
        }
        else {
            return undefined;
        }
    }
    static getBuildCacheConfigFilePath(rushConfiguration) {
        return path.resolve(rushConfiguration.commonRushConfigFolder, RushConstants_1.RushConstants.buildCacheFilename);
    }
}
exports.BuildCacheConfiguration = BuildCacheConfiguration;
BuildCacheConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, '..', 'schemas', 'build-cache.schema.json'));
//# sourceMappingURL=BuildCacheConfiguration.js.map