{"version":3,"file":"RushUserConfiguration.js","sourceRoot":"","sources":["../../src/api/RushUserConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,oEAAgF;AAChF,2CAA6B;AAE7B,sDAAmD;AACnD,0DAAuD;AAMvD;;;;GAIG;AACH,MAAa,qBAAqB;IAUhC,YAAoB,yBAA4D;QAC9E,IAAI,CAAC,gBAAgB,GAAG,yBAAyB,aAAzB,yBAAyB,uBAAzB,yBAAyB,CAAE,gBAAgB,CAAC;QACpE,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YACpE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;IACH,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,eAAe;QACjC,MAAM,kBAAkB,GAAW,qBAAqB,CAAC,qBAAqB,EAAE,CAAC;QACjF,MAAM,wBAAwB,GAAW,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;QACxF,IAAI,oBAAuD,CAAC;QAC5D,IAAI;YACF,oBAAoB,GAAG,MAAM,4BAAQ,CAAC,oBAAoB,CACxD,wBAAwB,EACxB,qBAAqB,CAAC,OAAO,CAC9B,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,8BAAU,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;gBAClC,MAAM,CAAC,CAAC;aACT;SACF;QAED,OAAO,IAAI,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,qBAAqB;QACjC,MAAM,cAAc,GAAW,qBAAS,CAAC,aAAa,EAAE,CAAC;QACzD,MAAM,wBAAwB,GAAW,IAAI,CAAC,IAAI,CAChD,cAAc,EACd,6BAAa,CAAC,+BAA+B,CAC9C,CAAC;QACF,OAAO,wBAAwB,CAAC;IAClC,CAAC;;AA1CH,sDA2CC;AA1CgB,6BAAO,GAAe,8BAAU,CAAC,QAAQ,CACtD,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,gCAAgC,CAAC,CAC3E,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { FileSystem, JsonFile, JsonSchema } from '@rushstack/node-core-library';\r\nimport * as path from 'path';\r\n\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { RushConstants } from '../logic/RushConstants';\r\n\r\ninterface IRushUserSettingsJson {\r\n  buildCacheFolder?: string;\r\n}\r\n\r\n/**\r\n * Rush per-user configuration data.\r\n *\r\n * @beta\r\n */\r\nexport class RushUserConfiguration {\r\n  private static _schema: JsonSchema = JsonSchema.fromFile(\r\n    path.resolve(__dirname, '..', 'schemas', 'rush-user-settings.schema.json')\r\n  );\r\n\r\n  /**\r\n   * If provided, store build cache in the specified folder. Must be an absolute path.\r\n   */\r\n  public readonly buildCacheFolder: string | undefined;\r\n\r\n  private constructor(rushUserConfigurationJson: IRushUserSettingsJson | undefined) {\r\n    this.buildCacheFolder = rushUserConfigurationJson?.buildCacheFolder;\r\n    if (this.buildCacheFolder && !path.isAbsolute(this.buildCacheFolder)) {\r\n      throw new Error('buildCacheFolder must be an absolute path');\r\n    }\r\n  }\r\n\r\n  public static async initializeAsync(): Promise<RushUserConfiguration> {\r\n    const rushUserFolderPath: string = RushUserConfiguration.getRushUserFolderPath();\r\n    const rushUserSettingsFilePath: string = path.join(rushUserFolderPath, 'settings.json');\r\n    let rushUserSettingsJson: IRushUserSettingsJson | undefined;\r\n    try {\r\n      rushUserSettingsJson = await JsonFile.loadAndValidateAsync(\r\n        rushUserSettingsFilePath,\r\n        RushUserConfiguration._schema\r\n      );\r\n    } catch (e) {\r\n      if (!FileSystem.isNotExistError(e)) {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    return new RushUserConfiguration(rushUserSettingsJson);\r\n  }\r\n\r\n  public static getRushUserFolderPath(): string {\r\n    const homeFolderPath: string = Utilities.getHomeFolder();\r\n    const rushUserSettingsFilePath: string = path.join(\r\n      homeFolderPath,\r\n      RushConstants.rushUserConfigurationFolderName\r\n    );\r\n    return rushUserSettingsFilePath;\r\n  }\r\n}\r\n"]}