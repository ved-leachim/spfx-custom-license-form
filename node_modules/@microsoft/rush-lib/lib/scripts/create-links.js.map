{"version":3,"file":"create-links.js","sourceRoot":"","sources":["../../src/scripts/create-links.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See the @microsoft/rush package's LICENSE file for license information.\r\n\r\n// THIS SCRIPT IS GENERATED BY THE \"rush deploy\" COMMAND.\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { /* type */ IDeployMetadataJson } from '../logic/deploy/DeployManager';\r\nimport { /* type */ IFileSystemCreateLinkOptions } from '@rushstack/node-core-library';\r\n\r\n// API borrowed from @rushstack/node-core-library, since this script avoids using any\r\n// NPM dependencies.\r\nclass FileSystem {\r\n  public static createSymbolicLinkJunction(options: IFileSystemCreateLinkOptions): void {\r\n    fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'junction');\r\n  }\r\n\r\n  public static createSymbolicLinkFile(options: IFileSystemCreateLinkOptions): void {\r\n    fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'file');\r\n  }\r\n\r\n  public static createSymbolicLinkFolder(options: IFileSystemCreateLinkOptions): void {\r\n    fs.symlinkSync(options.linkTargetPath, options.newLinkPath, 'dir');\r\n  }\r\n\r\n  public static createHardLink(options: IFileSystemCreateLinkOptions): void {\r\n    fs.linkSync(options.linkTargetPath, options.newLinkPath);\r\n  }\r\n}\r\n\r\nfunction ensureFolder(folderPath: string): void {\r\n  if (!folderPath) {\r\n    return;\r\n  }\r\n  if (fs.existsSync(folderPath)) {\r\n    return;\r\n  }\r\n  const parentPath: string = path.dirname(folderPath);\r\n  if (parentPath && parentPath !== folderPath) {\r\n    ensureFolder(parentPath);\r\n  }\r\n  fs.mkdirSync(folderPath);\r\n}\r\n\r\nfunction removeLinks(targetRootFolder: string, deployMetadataObject: IDeployMetadataJson): void {\r\n  for (const linkInfo of deployMetadataObject.links) {\r\n    // Link to the relative path for symlinks\r\n    const newLinkPath: string = path.join(targetRootFolder, linkInfo.linkPath);\r\n    if (fs.existsSync(newLinkPath)) {\r\n      fs.unlinkSync(newLinkPath);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createLinks(targetRootFolder: string, deployMetadataObject: IDeployMetadataJson): void {\r\n  for (const linkInfo of deployMetadataObject.links) {\r\n    // Link to the relative path for symlinks\r\n    const newLinkPath: string = path.join(targetRootFolder, linkInfo.linkPath);\r\n    const linkTargetPath: string = path.join(targetRootFolder, linkInfo.targetPath);\r\n\r\n    // Make sure the containing folder exists\r\n    ensureFolder(path.dirname(newLinkPath));\r\n\r\n    // NOTE: This logic is based on NpmLinkManager._createSymlink()\r\n    if (process.platform === 'win32') {\r\n      if (linkInfo.kind === 'folderLink') {\r\n        // For directories, we use a Windows \"junction\".  On Unix, this produces a regular symlink.\r\n        FileSystem.createSymbolicLinkJunction({ newLinkPath, linkTargetPath });\r\n      } else {\r\n        // For files, we use a Windows \"hard link\", because creating a symbolic link requires\r\n        // administrator permission.\r\n\r\n        // NOTE: We cannot use the relative path for hard links\r\n        FileSystem.createHardLink({ newLinkPath, linkTargetPath });\r\n      }\r\n    } else {\r\n      // However hard links seem to cause build failures on Mac, so for all other operating systems\r\n      // we use symbolic links for this case.\r\n      if (linkInfo.kind === 'folderLink') {\r\n        FileSystem.createSymbolicLinkFolder({ newLinkPath, linkTargetPath });\r\n      } else {\r\n        FileSystem.createSymbolicLinkFile({ newLinkPath, linkTargetPath });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction showUsage(): void {\r\n  console.log('Usage:');\r\n  console.log('  node create-links.js create');\r\n  console.log('  node create-links.js remove');\r\n\r\n  console.log('\\nCreates or removes the symlinks for a deployment folder created by \"rush deploy\".');\r\n  console.log('The link information is read from \"deploy-metadata.json\" in the same folder.');\r\n}\r\n\r\nfunction main(): boolean {\r\n  // Example: [ \"node.exe\", \"create-links.js\", \"\"create\" ]\r\n  const args: string[] = process.argv.slice(2);\r\n\r\n  if (args.length !== 1 || (args[0] !== 'create' && args[0] !== 'remove')) {\r\n    showUsage();\r\n    return false;\r\n  }\r\n\r\n  const targetRootFolder: string = __dirname;\r\n  const deployMetadataPath: string = path.join(targetRootFolder, 'deploy-metadata.json');\r\n\r\n  if (!fs.existsSync(deployMetadataPath)) {\r\n    throw new Error('Input file not found: ' + deployMetadataPath);\r\n  }\r\n\r\n  const deployMetadataJson: string = fs.readFileSync(deployMetadataPath).toString();\r\n  const deployMetadataObject: IDeployMetadataJson = JSON.parse(deployMetadataJson);\r\n\r\n  if (args[0] === 'create') {\r\n    console.log(`\\nCreating links for deployment scenario \"${deployMetadataObject.scenarioName}\"`);\r\n    removeLinks(targetRootFolder, deployMetadataObject);\r\n    createLinks(targetRootFolder, deployMetadataObject);\r\n  } else {\r\n    console.log(`\\nRemoving links for deployment scenario \"${deployMetadataObject.scenarioName}\"`);\r\n    removeLinks(targetRootFolder, deployMetadataObject);\r\n  }\r\n\r\n  console.log('The operation completed successfully.');\r\n  return true;\r\n}\r\n\r\ntry {\r\n  process.exitCode = 1;\r\n  if (main()) {\r\n    process.exitCode = 0;\r\n  }\r\n} catch (error) {\r\n  console.log('ERROR: ' + error);\r\n}\r\n"]}