import { JsonSchema } from '@rushstack/node-core-library';

/**
 * @beta
 */
export declare class ConfigurationFile<TConfigurationFile> {
    private readonly _schema;
    private readonly _jsonPathMetadata;
    private readonly _propertyInheritanceTypes;
    private readonly _configurationFileCache;
    private readonly _packageJsonLookup;
    constructor(jsonSchemaPath: string, options?: IConfigurationFileOptions<TConfigurationFile>);
    constructor(jsonSchema: JsonSchema, options?: IConfigurationFileOptions<TConfigurationFile>);
    loadConfigurationFileAsync(configurationFilePath: string): Promise<TConfigurationFile>;
    /**
     * @internal
     */
    static _formatPathForError: (path: string) => string;
    /**
     * Get the path to the source file that the referenced property was originally
     * loaded from.
     */
    getObjectSourceFilePath<TObject extends object>(obj: TObject): string | undefined;
    /**
     * Get the value of the specified property on the specified object that was originally
     * loaded from a configuration file.
     */
    getPropertyOriginalValue<TParentProperty extends object, TValue>(options: IOriginalValueOptions<TParentProperty>): TValue;
    private _loadConfigurationFileInnerAsync;
    private _annotateProperties;
    private _annotateProperty;
    private _resolvePathProperty;
}

/**
 * @beta
 */
export declare interface IConfigurationFileOptions<TConfigurationFile> {
    /**
     * Use this property to specify how JSON nodes are postprocessed.
     */
    jsonPathMetadata?: IJsonPathsMetadata;
    /**
     * Use this property to control how root-level properties are handled between parent and child
     * configuration files.
     */
    propertyInheritanceTypes?: IPropertyInheritanceTypes<TConfigurationFile>;
}

/**
 * Used to specify how node(s) in a JSON object should be processed after being loaded.
 *
 * @beta
 */
export declare interface IJsonPathMetadata {
    pathResolutionMethod?: PathResolutionMethod;
}

/**
 * Keys in this object are JSONPaths {@link https://jsonpath.com/}, and values are objects
 * that describe how node(s) selected by the JSONPath are processed after loading.
 *
 * @beta
 */
export declare interface IJsonPathsMetadata {
    [jsonPath: string]: IJsonPathMetadata;
}

/**
 * @beta
 */
export declare enum InheritanceType {
    /**
     * Append additional elements after elements from the parent file's property
     */
    append = "append",
    /**
     * Discard elements from the parent file's property
     */
    replace = "replace"
}

/**
 * @beta
 */
export declare interface IOriginalValueOptions<TParentProperty> {
    parentObject: TParentProperty;
    propertyName: keyof TParentProperty;
}

/**
 * @beta
 */
export declare type IPropertyInheritanceTypes<TConfigurationFile> = {
    [propertyName in keyof TConfigurationFile]?: InheritanceType;
};

/**
 * @beta
 */
export declare enum PathResolutionMethod {
    /**
     * Resolve a path relative to the configuration file
     */
    resolvePathRelativeToConfigurationFile = 0,
    /**
     * Resolve a path relative to the root of the project containing the configuration file
     */
    resolvePathRelativeToProjectRoot = 1,
    /**
     * Treat the property as a NodeJS-style require/import reference and resolve using standard
     * NodeJS filesystem resolution
     */
    NodeResolve = 2
}

export { }
