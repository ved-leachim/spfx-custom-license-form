var MANIFESTS_ARRAY = MANIFESTS_ARRAY_PROXY;
/**
 * Get the manifest array.
 */
function getParameterByName(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(window.location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}
export function getManifests() {
    // tslint:disable-line:export-name
    // Clone manifestsArray
    var manifests = JSON.parse(JSON.stringify(MANIFESTS_ARRAY));
    var manifestsFileUrl = __webpack_public_path__;
    var selectedLocale = getParameterByName('market') || getParameterByName('locale');
    if (selectedLocale) {
        selectedLocale = selectedLocale.toLowerCase();
    }
    if (!manifestsFileUrl) {
        console.error("Unable to determine " + MANIFESTS_FILE_NAME + " file URL. Using default base URL. " +
            'This is expected if you are running "gulp serve."');
    }
    for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
        var manifest = manifests_1[_i];
        if (manifestsFileUrl) {
            if (!manifest.loaderConfig.internalModuleBaseUrls ||
                manifest.loaderConfig.internalModuleBaseUrls.length === 0) {
                manifest.loaderConfig.internalModuleBaseUrls = [manifestsFileUrl];
            }
        }
        if (selectedLocale) {
            // tslint:disable-next-line:forin
            for (var scriptResourceName in manifest.loaderConfig.scriptResources) {
                var scriptResource = manifest.loaderConfig.scriptResources[scriptResourceName];
                if (manifest.loaderConfig.scriptResources.hasOwnProperty(scriptResourceName) &&
                    scriptResource.type === 'localizedPath') {
                    // If this is a localized path resource, and a ?locale= or ?market= query parameter has been specified,
                    // only provide that resource
                    var locResource = scriptResource;
                    if (locResource.paths) {
                        for (var localeName in locResource.paths) {
                            if (locResource.paths.hasOwnProperty(localeName) &&
                                localeName.toLowerCase() === selectedLocale) {
                                locResource.defaultPath = locResource.paths[localeName];
                                delete locResource.paths;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    return manifests;
}
//# sourceMappingURL=manifestsFile.js.map