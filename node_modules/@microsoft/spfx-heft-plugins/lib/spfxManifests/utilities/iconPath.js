"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIconPathType = exports.IconPathType = void 0;
/**
 * @internal
 * The type of icon URL defined in a user-created manifest.
 */
var IconPathType;
(function (IconPathType) {
    /**
     * Something that doesn't fit into another category. A warning will be printed.
     */
    IconPathType[IconPathType["Malformed"] = 0] = "Malformed";
    /**
     * An absolute URL. Something that begins with a protocol (i.e. - http://...).
     */
    IconPathType[IconPathType["AbsoluteUrl"] = 1] = "AbsoluteUrl";
    /**
     * A relative URL. Something that begins with an alphanumeric character, but doesn't look like a protocol.
     */
    IconPathType[IconPathType["RelativeUrl"] = 2] = "RelativeUrl";
    /**
     * A relative filesystem path. Something that begins with "./" or "../"
     */
    IconPathType[IconPathType["RelativePath"] = 3] = "RelativePath";
    /**
     * A data:image;... url
     */
    IconPathType[IconPathType["DataUrl"] = 4] = "DataUrl";
})(IconPathType = exports.IconPathType || (exports.IconPathType = {}));
/**
 * @internal
 */
function getIconPathType(iconPath) {
    if (!iconPath) {
        return undefined;
    }
    else if (iconPath.match(/^\.{1,2}\/.+/)) {
        return IconPathType.RelativePath;
    }
    else if (iconPath.match(/^data:image\/.+/)) {
        return IconPathType.DataUrl;
    }
    else if (iconPath.match(/^\w+:\/\/.+/)) {
        return IconPathType.AbsoluteUrl;
    }
    else if (iconPath.match(/^\w+/)) {
        return IconPathType.RelativeUrl;
    }
    else {
        return IconPathType.Malformed;
    }
}
exports.getIconPathType = getIconPathType;
//# sourceMappingURL=iconPath.js.map