"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizedManifestModuleProcessor = void 0;
const normalizeLocaleName_1 = require("../../utilities/normalizeLocaleName");
const DEFAULT_LOCALES = [/default/i, /en-us/i, /en/i];
/**
 * @internal
 */
class LocalizedManifestModuleProcessor {
    // tslint:enable:max-line-length
    static generateLocalizedManifestModule(bundleName, localizedPaths, firstPassLocaleRemapping) {
        const localeNames = Object.keys(localizedPaths);
        if (localeNames.length === 1) {
            return {
                type: 'localizedPath',
                defaultPath: localizedPaths[localeNames[0]]
            };
        }
        else {
            const defaultPath = LocalizedManifestModuleProcessor.findDefaultString(localizedPaths);
            if (!defaultPath) {
                throw new Error(`Unable to find a default localized entry for the "${bundleName}" bundle. Tried to match ` +
                    `${JSON.stringify(DEFAULT_LOCALES)}.`);
            }
            const manifestLocalizedPaths = {};
            for (const [localeName, localizedPath] of Object.entries(localizedPaths)) {
                const normalizedLocaleName = normalizeLocaleName_1.normalizeLocaleName(localeName);
                manifestLocalizedPaths[normalizedLocaleName] = localizedPath;
            }
            if (firstPassLocaleRemapping) {
                LocalizedManifestModuleProcessor.applyLocaleRemapping(manifestLocalizedPaths, firstPassLocaleRemapping);
            }
            LocalizedManifestModuleProcessor.applyLocaleRemapping(manifestLocalizedPaths, LocalizedManifestModuleProcessor.LOCALE_MAPPING);
            // Do this twice because some locales (like en-gb) appear both as values and as keys
            LocalizedManifestModuleProcessor.applyLocaleRemapping(manifestLocalizedPaths, LocalizedManifestModuleProcessor.LOCALE_MAPPING);
            return {
                type: 'localizedPath',
                paths: manifestLocalizedPaths,
                defaultPath: defaultPath
            };
        }
    }
    static findDefaultString(localizedPaths) {
        const localizedPathsEntries = Object.entries(localizedPaths);
        if (localizedPathsEntries.length === 1) {
            return localizedPathsEntries[0][1];
        }
        else {
            for (const defaultLocale of DEFAULT_LOCALES) {
                for (const [localeName, localizedPath] of localizedPathsEntries) {
                    if (defaultLocale.test(localeName)) {
                        return localizedPath;
                    }
                }
            }
            return undefined;
        }
    }
    static applyLocaleRemapping(manifestLocalizedPaths, localeRemapping) {
        for (const [localeName, localizedPath] of Object.entries(manifestLocalizedPaths)) {
            const lowercaseLocaleName = localeName.toLowerCase();
            const localeRemappingArray = localeRemapping.get(lowercaseLocaleName);
            if (localeRemappingArray) {
                for (const alternativeLocaleName of localeRemappingArray) {
                    if (!manifestLocalizedPaths.hasOwnProperty(alternativeLocaleName)) {
                        manifestLocalizedPaths[alternativeLocaleName] = localizedPath;
                    }
                }
            }
        }
    }
}
exports.LocalizedManifestModuleProcessor = LocalizedManifestModuleProcessor;
// tslint:disable:max-line-length
LocalizedManifestModuleProcessor.LOCALE_MAPPING = new Map([
    ['ar-sa', ['ar', 'tzm-Latn', 'ku', 'syr']],
    ['cy-gb', ['cy']],
    ['da-dk', ['fo', 'kl']],
    ['de-de', ['de', 'dsb', 'rm', 'hsb']],
    ['el-gr', ['el']],
    ['en-au', ['en-SG', 'en-HK', 'en-MY', 'en-PH', 'en-TT', 'en-AZ', 'en-BH', 'en-BN', 'en-ID', 'mi']],
    [
        'en-gb',
        [
            'sq',
            'am',
            'hy',
            'mk',
            'bs',
            'my',
            'dz',
            'en-CY',
            'en-EG',
            'en-IL',
            'en-IS',
            'en-JO',
            'en-KE',
            'en-KW',
            'en-MK',
            'en-MT',
            'en-PK',
            'en-QA',
            'en-SA',
            'en-LK',
            'en-AE',
            'en-VN',
            'is',
            'km',
            'kh',
            'mt',
            'fa',
            'gd',
            'sr-Cyrl-BA',
            'sr-Latn-BA',
            'sd',
            'si',
            'so',
            'ti-ET',
            'uz'
        ]
    ],
    [
        'en-in',
        ['as', 'bn-BD', 'bn-IN', 'gu', 'kn', 'kok', 'ml', 'mr', 'ne', 'or', 'pa', 'sa', 'ta', 'te', 'ur']
    ],
    [
        'en-us',
        ['en-GB', 'en-NZ', 'en-IE', 'en-AU', 'bn', 'chr', 'dv', 'div', 'en', 'fil', 'haw', 'iu', 'lo', 'moh']
    ],
    [
        'en-za',
        [
            'af',
            'en-ZW',
            'en-ZM',
            'en-NG',
            'en-OM',
            'ha',
            'ig',
            'xh',
            'zu',
            'rw,',
            'sw',
            'nqo',
            'om',
            'nso',
            'st',
            'tn',
            'sn',
            'ti',
            'ts',
            've',
            'yo'
        ]
    ],
    ['es-es', ['gn', 'quz', 'es', 'ca-ES-valencia']],
    ['fi-fi', ['sms', 'se-FI', 'se-Latn-FI']],
    ['fr-fr', ['gsw', 'br', 'tzm-Tfng', 'co', 'fr', 'ff', 'lb', 'mg', 'oc', 'zgh', 'wo']],
    ['hi-in', ['hi']],
    ['id-id', ['jv']],
    ['it-it', ['it']],
    ['ms-my', ['ms']],
    ['nb-no', ['no', 'nb', 'nn', 'smj-NO', 'smj-Latn-NO', 'se-NO', 'se-Latn-NO', 'sma-Latn', 'sma-NO']],
    ['nl-nl', ['nl', 'fy']],
    ['prs-af', ['gbz', 'ps']],
    ['pt-pt', ['pt']],
    ['ro-ro', ['ro']],
    ['ru-ru', ['ru', 'ba', 'be', 'ky', 'mn', 'sah', 'tg', 'tt', 'tk']],
    ['sk-sk', ['sk']],
    ['sl-si', ['sl']],
    ['sr-cyrl-RS', ['sr-Cyrl']],
    ['sr-latn-RS', ['sr']],
    ['sv-se', ['smj', 'se', 'sv', 'sma-SE', 'sma-Latn-SE']],
    ['th-th', ['th']],
    ['tr-tr', ['tr']],
    ['vi-vn', ['vi']],
    ['zh-cn', ['zh', 'mn-Mong', 'bo', 'ug', 'ii']],
    ['zh-tw', ['zh-HK', 'zh-CHT', 'zh-Hant', 'zh-MO']]
]);
//# sourceMappingURL=LocalizedManifestModuleProcessor.js.map