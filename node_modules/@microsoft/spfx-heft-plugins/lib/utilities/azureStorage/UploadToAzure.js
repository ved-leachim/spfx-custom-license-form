"use strict";
/**
 * file uploadFilesTots
 * Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Uploads a list of files to an Azure Blob Service instance
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadToAzure = void 0;
const RetryUtilities_1 = require("../RetryUtilities");
const node_core_library_1 = require("@rushstack/node-core-library");
const Async_1 = require("../Async");
/**
 * @internal
 */
class UploadToAzure {
    /**
     * Upload file to Azure
     */
    static async uploadFileToAzureAsync(terminal, blobService, containerName, localFilename, serverFilename) {
        serverFilename = serverFilename || localFilename;
        try {
            await node_core_library_1.LegacyAdapters.convertCallbackToPromise(blobService.createBlockBlobFromLocalFile.bind(blobService), containerName, serverFilename, localFilename);
            terminal.writeLine(`Uploaded file: ${serverFilename}`);
            return blobService;
        }
        catch (e) {
            throw new Error(`Unable to upload file: ${serverFilename} from ${localFilename}: ${e}`);
        }
    }
    /**
     * Upload files to Azure
     */
    static async uploadFilesToAzureAsync(terminal, blobService, containerName, files, maxParallelism, maxRetries, retryDelayInMs) {
        terminal.writeLine(`Uploading ${files.length} files to Azure...`);
        await Async_1.Async.forEachLimitAsync(files, maxParallelism, async (file) => {
            await RetryUtilities_1.RetryUtilities.runWithRetriesAsync(() => UploadToAzure.uploadFileToAzureAsync(terminal, blobService, containerName, file.localPath, file.azurePath), maxRetries, retryDelayInMs);
        });
        return blobService;
    }
}
exports.UploadToAzure = UploadToAzure;
UploadToAzure.DEFAULT_AZURE_MAX_PARALLELISM = 20;
UploadToAzure.DEFAULT_AZURE_RETRY_DELAY_MILLISECONDS = 5000;
UploadToAzure.DEFAULT_AZURE_MAX_NUMBER_OF_RETRIES = 10;
//# sourceMappingURL=UploadToAzure.js.map