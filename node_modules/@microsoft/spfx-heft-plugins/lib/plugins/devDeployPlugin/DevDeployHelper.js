"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevDeployHelper = void 0;
const ensureBlobService_1 = require("../../utilities/azureStorage/ensureBlobService");
const ensureContainer_1 = require("../../utilities/azureStorage/ensureContainer");
const UploadToAzure_1 = require("../../utilities/azureStorage/UploadToAzure");
const UrlUtilities_1 = require("../../utilities/UrlUtilities");
/**
 * Helper functions for dev-deploy.
 * @public
 */
class DevDeployHelper {
    static getDefaultDeployConfig() {
        const devDeployConfig = {
            useRush: false,
            accountName: '',
            accessKey: '',
            container: 'files',
            isProd: undefined,
            maxRetries: UploadToAzure_1.UploadToAzure.DEFAULT_AZURE_MAX_NUMBER_OF_RETRIES
        };
        return devDeployConfig;
    }
    static async deployFilesAsync(terminal, deployConfig, deployData, deployPathsFunction) {
        if (deployPathsFunction) {
            await deployPathsFunction(deployData.filesToUpload);
        }
        else {
            const blobService = await ensureBlobService_1.ensureBlobService(deployConfig.accountName, deployConfig.accessKey);
            await ensureContainer_1.ensureContainer(terminal, blobService, deployConfig.container, 
            /* createContainerOptions */ undefined);
            await UploadToAzure_1.UploadToAzure.uploadFilesToAzureAsync(terminal, blobService, deployConfig.container, deployData.filesToUpload.map((fileToUpload) => {
                const azurePath = deployConfig.folderNameInContainer
                    ? UrlUtilities_1.UrlUtilities.joinUrlSegments(deployConfig.folderNameInContainer, fileToUpload.deployPath)
                    : fileToUpload.deployPath;
                return {
                    azurePath,
                    localPath: fileToUpload.localPath
                };
            }), UploadToAzure_1.UploadToAzure.DEFAULT_AZURE_MAX_PARALLELISM, deployConfig.maxRetries || UploadToAzure_1.UploadToAzure.DEFAULT_AZURE_MAX_NUMBER_OF_RETRIES, UploadToAzure_1.UploadToAzure.DEFAULT_AZURE_RETRY_DELAY_MILLISECONDS);
        }
    }
}
exports.DevDeployHelper = DevDeployHelper;
//# sourceMappingURL=DevDeployHelper.js.map