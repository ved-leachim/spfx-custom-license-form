import { IDevDeployOptions, IDevDeployData } from './DevDeployInterfaces';
import { DependencyDiscoveryMode } from '../../spfxManifests/cumulativeManifestProcessor/CumulativeManifestProcessor';
/**
 * Options for sp-client dev-deploy
 * @public
 */
export interface ISpDevDeployOptions extends IDevDeployOptions {
    /**
     * @internal
     */
    _projectDiscoveryMode?: DependencyDiscoveryMode;
}
/**
 * @public
 */
export declare class SpDevDeploy {
    private static readonly debugManifestPath;
    private static __gitRepoInfo;
    private _rushConfig;
    private _packageJsonLookup;
    private _options;
    private _devDeployManifestFileUrl;
    private _devDeployModuleLoaderUrl;
    private _devDeployMetadata;
    private readonly _collisionDetectionMap;
    static getDevDeployContainerDirectoryName(): string;
    private static get _gitRepoInfo();
    private static get _userName();
    /**
     * Escapes non-(alphanumeric/hyphens) with underscores
     */
    private static _escapeNonAlphaNumericChars;
    constructor(options: ISpDevDeployOptions);
    preProcess(): void;
    getFiles(): Promise<IDevDeployData>;
    postProcess(): void;
    private _printCollisionWarnings;
    private _saveDevDeployMetadata;
    private _printDevDeployLink;
    private _getDeployBaseUrl;
    private _getContainerUrl;
    private _getAzureStorageUrl;
    private _processAllPathsInManifest;
    private _disambiguatePath;
    private _getFilesInDirectory;
    /**
     * This function returns a directory name to be used in a directory in the destination, ensuring that the name does
     * not collide with another directory's name. It also ensures that if the specified filesystem path has already
     * been mapped to a destination directory, the same name is used in the destination.
     */
    private _getDestinationDirName;
    private _getManifests;
    private _mergeReferencedProjectLists;
    private _doComponentTypeSpecificFixup;
    private _fixupIconPath;
    private _getRushConfig;
    private _getMetadataDropPath;
    private _doesFilenameAppearToContainHash;
}
//# sourceMappingURL=SpDevDeploy.d.ts.map