"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printDevDeployLink = void 0;
const colors_1 = __importDefault(require("colors"));
const os = __importStar(require("os"));
const DEBUG_MANIFESTS_QUERY_PARAMETER = 'debugManifestsFile';
const TEST_URL_ENVIRONMENT_VARIABLE = 'dev_deploy_url';
/**
 * @public
 * Prints out a link to a page where you can test your changes. Note that loaderUrl and debugManifestFile
 * should both be fully qualified URLs. If the dev_deploy_url environment variable is not set,
 * advice is given on how to set it and the query parameters & hash are printed separately.
 */
// tslint:disable-next-line:export-name
function printDevDeployLink(log, metadata) {
    const queryParameters = new Map();
    queryParameters.set('debug', 'true').set('noredir', 'true');
    if (metadata.loaderUrl) {
        queryParameters.set('loader', metadata.loaderUrl);
    }
    if (metadata.debugManifestUrl) {
        queryParameters.set(DEBUG_MANIFESTS_QUERY_PARAMETER, metadata.debugManifestUrl);
    }
    const deployUrl = process.env[TEST_URL_ENVIRONMENT_VARIABLE];
    if (!deployUrl) {
        _printHelperMessage(log, queryParameters);
    }
    else {
        _printDeployString(log, deployUrl, queryParameters);
    }
}
exports.printDevDeployLink = printDevDeployLink;
function _printHelperMessage(log, queryParameters) {
    const message = `For an improved debugging experience, please set the ` +
        `'${TEST_URL_ENVIRONMENT_VARIABLE}' environment variable to the URL of the page you are` +
        ` testing.`;
    log(colors_1.default.yellow(message));
    log(_getAdvice());
    log(`${colors_1.default.yellow('Debug query parameters:')} "${_concatenateQueryParams(queryParameters)}"`);
}
function _getAdvice() {
    const sampleTestPageUrl = 'https://contoso.sharepoint.com/SitePages/TestPage.aspx';
    const osAdvice = {
        win32: `For example, in Windows:${os.EOL}` +
            colors_1.default.yellow(`set ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`),
        darwin: `For example, in MacOS:${os.EOL}` +
            colors_1.default.yellow(`export ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`),
        default: 'Please consult your operating system documentation for information on setting environment variables'
    };
    return osAdvice[process.platform] || osAdvice.default;
}
function _printDeployString(log, deployUrl, queryParams) {
    const testUrl = deployUrl + _concatenateQueryParams(queryParams);
    log(`${colors_1.default.yellow('Test URL:')} ${testUrl}`);
}
/**
 * Concatenates the query parameters. Note that no URL escaping is performed
 */
function _concatenateQueryParams(queryParameters) {
    if (!queryParameters.size) {
        return '';
    }
    const queryString = [];
    let firstParameter = true;
    queryParameters.forEach((value, key) => {
        queryString.push(`${firstParameter ? '?' : '&'}${key}=${value}`);
        firstParameter = false;
    });
    return queryString.join('');
}
//# sourceMappingURL=DevDeployLinkPrinter.js.map