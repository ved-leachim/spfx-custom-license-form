"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomizeWebpackConfigurationPlugin = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
class CustomizeWebpackConfigurationPlugin {
    constructor() {
        this.pluginName = "customize-spfx-webpack-configuration-plugin" /* CustomizeWebpackConfigPlugin */;
    }
    apply(heftSession, heftConfiguration) {
        heftSession.hooks.build.tap("spfx-webpack-configuration-plugin" /* SpfxWebpackConfigurationPlugin */, (build) => {
            build.hooks.bundle.tap("spfx-webpack-configuration-plugin" /* SpfxWebpackConfigurationPlugin */, (bundleSubstage) => {
                bundleSubstage.hooks.configureWebpack.tapPromise("spfx-webpack-configuration-plugin" /* SpfxWebpackConfigurationPlugin */, async (webpackConfiguration) => {
                    const scopedLogger = heftSession.requestScopedLogger('customize-webpack-configuration-plugin');
                    await this._updateWebpackConfigurationAsync(scopedLogger, heftConfiguration, webpackConfiguration, build.properties);
                    return webpackConfiguration;
                });
            });
        });
    }
    async _updateWebpackConfigurationAsync(scopedLogger, heftConfiguration, webpackConfiguration, buildStageProperties) {
        if (!webpackConfiguration) {
            scopedLogger.emitError(new Error('A webpack configuration must be provided.'));
        }
        else {
            const customizeConfigFilePath = path.join(heftConfiguration.projectConfigFolder, 'spfx-customize-webpack.js');
            const customizeConfigFileExists = await node_core_library_1.FileSystem.existsAsync(customizeConfigFilePath);
            if (customizeConfigFileExists) {
                let scriptExport;
                try {
                    scriptExport = require(customizeConfigFilePath);
                }
                catch (e) {
                    scopedLogger.emitError(new Error(`Error importing webpack customization script "${customizeConfigFilePath}": ${e}`));
                    return;
                }
                const scriptExportNotDefault = scriptExport;
                const scriptExportAsDefault = scriptExport.default;
                if (typeof scriptExport !== 'function' && typeof scriptExportAsDefault !== 'function') {
                    scopedLogger.emitError(new Error('A webpack configuration customization script must export a function ' +
                        'that takes a webpack configuration to tweak.'));
                    return;
                }
                const functionToExecute = scriptExportAsDefault || scriptExportNotDefault;
                try {
                    functionToExecute(webpackConfiguration, buildStageProperties);
                }
                catch (e) {
                    scopedLogger.emitError(new Error(`An error occurred during webpack configuration customization: ${e}`));
                }
            }
        }
    }
}
exports.CustomizeWebpackConfigurationPlugin = CustomizeWebpackConfigurationPlugin;
exports.default = new CustomizeWebpackConfigurationPlugin();
//# sourceMappingURL=CustomizeWebpackConfigurationPlugin.js.map