"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizationTypingsPlugin = void 0;
const path = __importStar(require("path"));
const Async_1 = require("../../utilities/Async");
const localization_plugin_1 = require("@rushstack/localization-plugin");
const node_core_library_1 = require("@rushstack/node-core-library");
const RetryUtilities_1 = require("../../utilities/RetryUtilities");
class LocalizationTypingsPlugin {
    constructor() {
        this.pluginName = "localization-typings-plugin" /* LocalizationTypingsPlugin */;
    }
    /**
     * Generate typings for RESX files before TypeScript compilation.
     */
    apply(heftSession, heftConfiguration) {
        heftSession.hooks.build.tap("localization-typings-plugin" /* LocalizationTypingsPlugin */, (build) => {
            build.hooks.preCompile.tap("localization-typings-plugin" /* LocalizationTypingsPlugin */, (preCompile) => {
                preCompile.hooks.run.tapPromise("localization-typings-plugin" /* LocalizationTypingsPlugin */, async () => {
                    await this._runLocalizationTypingsGenerator(heftSession, heftConfiguration, build.properties.watchMode);
                });
            });
        });
    }
    async _runLocalizationTypingsGenerator(heftSession, heftConfiguration, isWatchMode) {
        const { buildFolder } = heftConfiguration;
        const logger = heftSession.requestScopedLogger('localization-typings-plugin');
        const generatedTsFolderPath = path.join(buildFolder, 'temp', 'resx-ts');
        // VSCode can sometimes keep a lock on this folder, running this with retries works around that.
        await RetryUtilities_1.RetryUtilities.runWithRetriesAsync(async () => await node_core_library_1.FileSystem.ensureEmptyFolderAsync(generatedTsFolderPath), 
        /* maxRetries */ 5, 
        /* retryDelayInMS */ 50);
        const resxTypingsGenerator = new localization_plugin_1.TypingsGenerator({
            srcFolder: path.join(buildFolder, 'src'),
            generatedTsFolder: generatedTsFolderPath,
            terminal: logger.terminal
        });
        await resxTypingsGenerator.generateTypingsAsync();
        if (isWatchMode) {
            Async_1.Async.runWatcherWithErrorHandling(async () => await resxTypingsGenerator.runWatcherAsync(), logger);
        }
    }
}
exports.LocalizationTypingsPlugin = LocalizationTypingsPlugin;
exports.default = new LocalizationTypingsPlugin();
//# sourceMappingURL=LocalizationTypingsPlugin.js.map