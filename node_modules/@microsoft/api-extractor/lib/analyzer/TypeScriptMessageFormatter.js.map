{"version":3,"file":"TypeScriptMessageFormatter.js","sourceRoot":"","sources":["../../src/analyzer/TypeScriptMessageFormatter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAI3D,MAAa,0BAA0B;IACrC;;;OAGG;IACI,MAAM,CAAC,uBAAuB,CAAC,IAAa;QACjD,MAAM,UAAU,GAAkB,IAAI,CAAC,aAAa,EAAE,CAAC;QACvD,MAAM,gBAAgB,GAAwB,UAAU,CAAC,6BAA6B,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxG,OAAO,IAAI,UAAU,CAAC,QAAQ,IAAI,gBAAgB,CAAC,IAAI,GAAG,CAAC;IAC7D,CAAC;CACF;AAVD,gEAUC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nexport class TypeScriptMessageFormatter {\r\n  /**\r\n   * Returns a string such as this, based on the context information in the provided node:\r\n   *   \"[C:\\Folder\\File.ts#123]\"\r\n   */\r\n  public static formatFileAndLineNumber(node: ts.Node): string {\r\n    const sourceFile: ts.SourceFile = node.getSourceFile();\r\n    const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(node.getStart());\r\n    return `[${sourceFile.fileName}#${lineAndCharacter.line}]`;\r\n  }\r\n}\r\n"]}