/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
import { Environment, EnvironmentType, Log, Session, Validate, _SPEventManager, _SPExperiment, _SPFlight, _SPKillSwitch, _WebWorkerProxy } from '@microsoft/sp-core-library';
import { _Diagnostics, _LogHandler, _QosMonitor } from '@microsoft/sp-diagnostics';
import { _PerformanceLogger, _Telemetry } from '@ms/sp-telemetry';
import { DebugManager } from '../debug/DebugManager';
import { DebugStatus } from '../debug/DebugStatus';
import { showBrowserDevToolsWarning } from '../DeveloperTools/BrowserDeveloperToolsWarning/showBrowserDevToolsWarning';
import * as developerToolsLoader from '../DeveloperTools/DeveloperToolsLoader';
import DeveloperTools from '../DeveloperTools/DeveloperToolsProxy';
import LocaleStore from '../stores/LocaleStore';
import ManifestStore from '../stores/ManifestStore';
import { createRootScope } from '../tiny/common/createRootScope';
import { isDangerouslyEnableDebugKSActivated } from '../tiny/common/killSwitches';
import { SPComponentLoader } from '../tiny/componentLoader/SPComponentLoader';
import { RequireLoader } from '../tiny/requireLoader/RequireLoader';
import { OldManifestStoreShim } from '../tiny/store/ManifestStore';
import * as componentConstants from '../utilities/componentConstants';
import { KillSwitches } from '../utilities/KillSwitches';
import ResourceUrlChecker from '../utilities/ResourceUrlChecker';
import SPLoaderFlights from '../utilities/SPLoaderFlights';
import * as strings from './Starter.resx';
// !!! Show the developer tools warning as soon as the page loads !!!
if (!DEBUG && !DEPRECATED_UNIT_TEST) {
    showBrowserDevToolsWarning();
}
var ARIA_DISABLE_TELEMETRY_LOGGING_FLIGHT_ID = 1190;
var DEBUG_FLIGHTS_QUERY_PARAM = 'debugFlights';
var DEBUG_KILLSWITCHES_QUERY_PARAM = 'debugKillSwitches';
var COMPONENT_LOADER_GLOBAL_VARIABLE = '_spComponentLoader';
// QoS constants
var startQosScenarioName = 'SPComponentLoader.start';
/**
 * Bootstrapper for the application
 * @internal
 */
var SPStarter = /** @class */ (function () {
    function SPStarter() {
    }
    /**
     * Sets a map with the bundled components. These components will be added to the component loader
     * during initialization, so they won't need to be loaded afterwards.
     * The map is of the form `componentId: string -> component: Object`
     *
     * @internal
     */
    SPStarter._setBundledComponents = function (bundledComponents) {
        if (!SPStarter._bundledComponents) {
            SPStarter._bundledComponents = bundledComponents;
        }
        else {
            throw new Error('Bundled components can be only set once'); // TODO mpasarin: Localize
        }
    };
    /**
     * Raise the `onSecondFlush` event to resume starting with the full set of preloaded data.
     * This is called by the page scripts to resume loading the framework. Do not call it from your own code.
     *
     * @param preloadedData - Full set of preloaded data for the current session.
     */
    SPStarter.startSecondFlush = function (preloadedData) {
        _PerformanceLogger.setPerformanceProperty('SPStarter.startSecondFlush');
        window[COMPONENT_LOADER_GLOBAL_VARIABLE].registerManifests(preloadedData.manifests);
        _SPEventManager.instance.raiseStickyEvent('onSecondFlush', preloadedData);
    };
    /**
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     * @param preloadedData - Data initialized on the page by the server.
     * @param handleFailure - Error handler function provided by the server to execute if there is SPFx can't be loaded.
     *  It may redirect to an error page or log error data in the console.
     * @param debugData - This parameter is used when the loader initializes a debug loader and
     *  should never be provided by any external callers.
     * @param isFirstFlush - Indicates whether the caller intends to call `startSecondFlush` to finish starting SPFx.
     */
    SPStarter.start = function (preloadedData, handleFailure, debugData, isFirstFlush, isWorkerScope) {
        var _this = this;
        _PerformanceLogger.devMark('SPStarter.start');
        var _a = preloadedData.clientSideApplicationId, clientSideApplicationId = _a === void 0 ? '00000000-0000-0000-0000-000000000000' : _a, spPageContextInfo = preloadedData.spPageContextInfo;
        var correlationId = spPageContextInfo.CorrelationId;
        // Initialize flights and killswitches
        this._initializeFlightsAndKillswitches(spPageContextInfo);
        if (debugData && !isDangerouslyEnableDebugKSActivated()) {
            DebugStatus.dangerouslyEnableDebug();
        }
        var serviceScope = createRootScope(spPageContextInfo);
        ManifestStore.instance = new OldManifestStoreShim(serviceScope, spPageContextInfo.webAbsoluteUrl);
        var spLoader = require('../index');
        ResourceUrlChecker.useSecondaryCdn = SPStarter.useSecondaryCdn;
        var componentLoader = new SPComponentLoader({
            preloadedData: preloadedData,
            serviceScope: serviceScope,
            bundledComponents: SPStarter._getBundledComponents(),
            ctor: RequireLoader,
            debugData: debugData || {},
            useSecondaryCdn: SPStarter.useSecondaryCdn
        });
        var qosMonitor = undefined;
        try {
            // Initialize telemetry
            Log._initialize(new _LogHandler());
            SPStarter._initializeEnvironment(clientSideApplicationId);
            Session._initialize({
                clientSideApplicationId: clientSideApplicationId,
                applicationId: correlationId
            });
            SPStarter._initializeTelemetry(preloadedData);
            _PerformanceLogger.markSpLoaderStart();
            if (!isWorkerScope) {
                // Ensure that Telemetry logs in real time, if not already doing so
                window.setTimeout(function () {
                    SPStarter._logDataInRealTime();
                }, SPStarter._realTimeProcessingWaitTime);
            }
            qosMonitor = new _QosMonitor(startQosScenarioName);
            // Set locale
            LocaleStore.setLocale(spPageContextInfo.currentUICultureName);
            // Initialize the proxies
            componentLoader._initialize(preloadedData, SPStarter._getBundledComponents(), debugData || {});
            spLoader.SPComponentLoader._initialize(componentLoader);
            window[COMPONENT_LOADER_GLOBAL_VARIABLE] = spLoader.SPComponentLoader;
        }
        catch (error) {
            return Promise.reject(error);
        }
        if (isWorkerScope) {
            return Promise.resolve({});
        }
        else if (SPLoaderFlights._isSPWebWorkerEnabled()) {
            var workerProxy = serviceScope.consume(_WebWorkerProxy.serviceKey);
            workerProxy.init(function (markName) { return _PerformanceLogger.setPerformanceProperty(markName); });
        }
        return DebugManager.initialize(componentLoader, debugData)
            .then(function (debugLoadResult) {
            if (debugLoadResult.debugLoader) {
                // If we're loading a debug loader, call "start" on it instead of continuing with the normal initialization
                // flow
                componentLoader._unloadComponents();
                return debugLoadResult.debugLoader.start(preloadedData, handleFailure, debugLoadResult, isFirstFlush);
            }
            // Load the dev tools after the debug loader to reference the right diagnostics component
            DeveloperTools.initialize(developerToolsLoader, serviceScope);
            // Only run the experiment if the tiny loader is running
            if (SPLoaderFlights._isOptimisticPreloadEnabled()) {
                spLoader.SPComponentLoader._preloadComponents();
            }
            if (SPLoaderFlights._isMinimalStartFlightEnabled() && !isFirstFlush) {
                _SPEventManager.instance.raiseStickyEvent('onSecondFlush', preloadedData);
            }
            var status = _SPExperiment.getVariantAndLogExposure(90033 /* PagesClientServerRequestOptimzationExperiment */) === 1;
            _PerformanceLogger.trackExperiment(90033, status ? 'Treatment' : 'Control');
            // Start the application
            return spLoader.SPComponentLoader._startApplication(preloadedData);
        })
            .then(function (application) {
            qosMonitor.writeSuccess();
            // Log telemetry data from buffers to the server
            SPStarter._logDataInRealTime();
            return application;
        })
            .catch(function (error) {
            if (qosMonitor) {
                if (error.message === 'Out of stack space') {
                    qosMonitor.writeExpectedFailure('ConflictingPolyfill', error);
                }
                else {
                    qosMonitor.writeUnexpectedFailure('StartApplication', error);
                }
            }
            SPStarter._logDataInRealTime();
            return _this.handleError(error, strings.loaderUserFriendlyError, _Telemetry.isInitialized ? 'ClientError' : 'ClientErrorBeforeTelemetry', correlationId, preloadedData);
        });
    };
    SPStarter._logDataInRealTime = function () {
        if (!SPStarter._isTelemetryDisabled() && !SPStarter._isTelemetryLoggingInRealTime) {
            _Telemetry.startRealTimeProcessing();
            SPStarter._isTelemetryLoggingInRealTime = true;
        }
    };
    /**
     * Returns the bundled components variable, after checking it exists.
     * If it doesn't exist, it throws an error as SPFx cannot be initialized without it.
     */
    SPStarter._getBundledComponents = function () {
        Validate.isNotNullOrUndefined(SPStarter._bundledComponents, 'bundledComponents');
        return SPStarter._bundledComponents;
    };
    SPStarter._initializeEnvironment = function (clientSideApplicationId) {
        var type;
        /* tslint:disable:no-string-literal */
        if (window.location.hostname === 'localhost' ||
            (window['ENVIRONMENTTYPE'] && window['ENVIRONMENTTYPE'] === 'Local')) {
            /* tslint:enable:no-string-literal */
            type = EnvironmentType.Local;
        }
        else if (clientSideApplicationId === 'eb4b666b-5c29-4dad-9a99-23613f21a2b7') {
            // 'eb4b666b-5c29-4dad-9a99-23613f21a2b7' is the classic page application id.
            type = EnvironmentType.ClassicSharePoint;
        }
        else {
            type = EnvironmentType.SharePoint;
        }
        Environment._initialize({ type: type });
    };
    SPStarter._initializeTelemetry = function (preloadedData) {
        var _a;
        if (SPStarter._isTelemetryDisabled()) {
            return;
        }
        var buildNumber = preloadedData.buildNumber, clientSideApplicationId = preloadedData.clientSideApplicationId, listItemId = preloadedData.listItemId, manifests = preloadedData.manifests, spPageContextInfo = preloadedData.spPageContextInfo;
        var listItemUniqueId = listItemId || ((_a = preloadedData.item) === null || _a === void 0 ? void 0 : _a.UniqueId);
        var aadUserId = spPageContextInfo.aadUserId, completenessUrls = spPageContextInfo.completenessUrls, CorrelationId = spPageContextInfo.CorrelationId, currentUICultureName = spPageContextInfo.currentUICultureName, env = spPageContextInfo.env, experimentData = spPageContextInfo.experimentData, experimentDataLookup = spPageContextInfo.experimentDataLookup, farmLabel = spPageContextInfo.farmLabel, listId = spPageContextInfo.listId, serverTime = spPageContextInfo.serverTime, siteId = spPageContextInfo.siteId, siteSubscriptionId = spPageContextInfo.siteSubscriptionId, systemUserKey = spPageContextInfo.systemUserKey, userLoginName = spPageContextInfo.userLoginName, webId = spPageContextInfo.webId, webTemplate = spPageContextInfo.webTemplate;
        // The first manifest is always the application's manifest.
        _Telemetry.initialize(manifests[0].alias, {
            environment: env,
            farmLabel: farmLabel,
            clientSideApplicationId: clientSideApplicationId || '',
            siteSubscriptionId: siteSubscriptionId,
            buildNumber: buildNumber,
            loginName: userLoginName,
            systemUserKey: systemUserKey,
            currentUICultureName: currentUICultureName,
            correlationId: CorrelationId,
            enableConsoleLog: SPStarter._isConsoleLogEnabled(),
            siteId: siteId,
            webId: webId,
            webTemplateId: webTemplate,
            completenessCallbackEndpoint: this._extractCompletenessCallbackEndpoint(completenessUrls),
            listId: listId,
            listItemUniqueId: listItemUniqueId,
            experimentData: experimentData,
            experimentDataLookup: experimentDataLookup,
            serverTime: serverTime,
            aadUserId: aadUserId
        });
        _Diagnostics.initialize({
            enableConsoleLog: SPStarter._isConsoleLogEnabled(),
            siteId: siteId,
            webId: webId,
            listId: listId,
            listItemUniqueId: listItemId,
            correlationId: CorrelationId
        });
    };
    SPStarter._initializeFlightsAndKillswitches = function (spPageContextInfo) {
        // Initialize flights and killswitches with the data from the server
        _SPFlight.initialize(spPageContextInfo.ExpFeatures);
        _SPKillSwitch.initialize(spPageContextInfo.killSwitches);
        // Initialize debug flights and killswitches from the query params
        var allowDebugQueryParameter = _SPFlight.isDebugFlightEnabled || Environment.type === EnvironmentType.Local;
        if (allowDebugQueryParameter) {
            _SPFlight.setDebugFlights(this._getQueryParamValue(DEBUG_FLIGHTS_QUERY_PARAM));
            _SPKillSwitch.setDebugKillswitches(this._getQueryParamValue(DEBUG_KILLSWITCHES_QUERY_PARAM));
        }
    };
    SPStarter._isQueryParameterTrue = function (name) {
        var parameterValue;
        try {
            parameterValue = this._getQueryParamValue(name) === 'true';
        }
        catch (error) {
            parameterValue = false;
        }
        return parameterValue;
    };
    SPStarter._isConsoleLogEnabled = function () {
        return SPStarter._isQueryParameterTrue('enableConsoleLog');
    };
    SPStarter._isTelemetryDisabled = function () {
        return (SPStarter._isQueryParameterTrue('disableTelemetry') ||
            _SPFlight.isEnabled(ARIA_DISABLE_TELEMETRY_LOGGING_FLIGHT_ID));
    };
    SPStarter.handleError = function (error, userFriendlyMessage, operationName, correlationId, preloadedData) {
        var errorInformation = {
            message: userFriendlyMessage,
            correlationId: correlationId,
            error: error,
            operationName: operationName
        };
        if (this._isRedirectDisabled(preloadedData)) {
            this._consoleErrorHandleFailure(errorInformation);
        }
        else {
            this._errorAspxHandleFailure(errorInformation, preloadedData);
        }
        return Promise.reject(error);
    };
    SPStarter._isRedirectDisabled = function (preloadedData) {
        return (SPStarter._isQueryParameterTrue('noredir') ||
            Environment.type === EnvironmentType.ClassicSharePoint || // Classic pages
            Environment.type === EnvironmentType.Local || // Local workbench
            preloadedData.clientSideApplicationId === componentConstants.listViewHostComponentId); // ListView application
    };
    SPStarter._consoleErrorHandleFailure = function (errorInformation) {
        console.error(errorInformation.message);
        if (errorInformation.correlationId) {
            console.error("Correlation Id: " + errorInformation.correlationId);
        }
        if (errorInformation.operationName) {
            console.error("Operation name: " + errorInformation.operationName);
        }
        if (errorInformation.error) {
            console.error(errorInformation.error.message);
            console.error("CALL STACK: " + errorInformation.error.stack);
        }
    };
    SPStarter._errorAspxHandleFailure = function (errorInformation, preloadedData) {
        var _a;
        window.location.href =
            (!KillSwitches.isErrorAspxUrlFixActivated()
                ? (((_a = preloadedData.spPageContextInfo) === null || _a === void 0 ? void 0 : _a.webAbsoluteUrl) || '') + '/_layouts/15/error.aspx'
                : '_layouts/15/error.aspx') +
                '?ErrorCorrelationId=' +
                encodeURIComponent(errorInformation.correlationId || '') +
                '&ErrorText=' +
                encodeURIComponent(errorInformation.message) +
                '&ErrorDetails=' +
                encodeURIComponent(errorInformation.error ? errorInformation.error.toString() : '') +
                '&Name=' +
                encodeURIComponent(errorInformation.operationName || 'DefaultOperation') +
                '&ErrorCategory=spfx';
    };
    SPStarter._extractCompletenessCallbackEndpoint = function (completenessUrls) {
        if (completenessUrls && completenessUrls.length > 0) {
            return completenessUrls[0] + "/api/collection";
        }
        else {
            return undefined;
        }
    };
    SPStarter._getQueryParamValue = function (name) {
        if (!this._queryParams) {
            this._queryParams = new URLSearchParams(self.location.search);
        }
        if (this._queryParams.has(name)) {
            return this._queryParams.get(name);
        } // else returns undefined
    };
    /**
     * Value indicating if we should load scripts from the secondary CDN.
     */
    SPStarter.useSecondaryCdn = false;
    SPStarter._bundledComponents = undefined;
    SPStarter._isTelemetryLoggingInRealTime = false;
    SPStarter._realTimeProcessingWaitTime = 1 * 1000; // 1 second
    return SPStarter;
}());
export default SPStarter;
//# sourceMappingURL=SPStarter.js.map