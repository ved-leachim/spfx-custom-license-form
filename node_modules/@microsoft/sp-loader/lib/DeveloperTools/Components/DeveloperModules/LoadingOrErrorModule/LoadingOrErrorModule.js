/**
 * @file LoadingOrErrorModule.tsx
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
import { __extends } from "tslib";
import * as React from 'react';
import { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';
import { css } from 'office-ui-fabric-react/lib/Utilities';
import styles from './LoadingOrErrorModule.module.scss';
import * as strings from './LoadingOrErrorModule.resx';
var LoadingOrErrorModule = /** @class */ (function (_super) {
    __extends(LoadingOrErrorModule, _super);
    function LoadingOrErrorModule(props) {
        return _super.call(this, props) || this;
    }
    LoadingOrErrorModule.prototype.componentDidMount = function () {
        var _this = this;
        this.props.tab
            .loadComponent()
            .then(function () {
            _this.forceUpdate();
        })
            .catch(function (error) {
            _this.forceUpdate();
        });
    };
    // tslint:disable-next-line:no-any
    LoadingOrErrorModule.prototype.render = function () {
        var tab = this.props.tab;
        if (tab.isLoading) {
            return (React.createElement("div", { className: styles.loadingModule },
                React.createElement(Spinner, { type: SpinnerType.large, label: strings.developerToolsTabLoadingText })));
        }
        else if (tab.loadError || !tab.component) {
            // tslint:disable-next-line:typedef
            var errorMessage = tab.loadError || strings.developerToolsTabLoadingUnknownError;
            return (React.createElement("div", { className: styles.module },
                React.createElement("div", { "aria-live": 'assertive', className: styles.screenReaderErrorMessage, "data-automation-id": 'error-message' }, errorMessage),
                React.createElement("p", { className: css('ms-TextField-errorMessage', styles.errorText) }, errorMessage)));
        }
        else {
            return React.createElement(tab.component, tab.reactProps);
        }
    };
    return LoadingOrErrorModule;
}(React.Component));
export default LoadingOrErrorModule;
//# sourceMappingURL=LoadingOrErrorModule.js.map