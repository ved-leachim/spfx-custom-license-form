/**
 * @file PerformanceDisplay.tsx
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
import * as React from 'react';
import { _IPerfItem } from '@ms/sp-telemetry';
import { IDeveloperToolsCompPropBase } from '../../../IDeveloperToolsTab';
export interface IPerformanceDisplayState {
    /**
     * Objects that contain the data points that will be displayed
     */
    perfItems: _IPerfItem[];
    /**
     * Integer value representing the total loading time percieved by the user
     */
    eupl: number;
    /**
     * Time taken to load full page
     */
    fullPageLoad: number;
    /**
     * Speed of light is the time taken by framework to load page, ignoring all dependennt component time to render.
     * This number does not mean page has rendered anything, but reflect time cost framework is directly responsible for.
     */
    speedOfLight: number;
    /**
     * Server time taken to generate first response.
     */
    firstFlushDuration?: number;
    /**
     * Total server duration to generate full page response except post flush
     */
    serverDuration?: number;
    /**
     * Post flush data arrival time. It typically includes web part cache (LKG), auth token and news prefetch data.
     */
    postFlush?: number;
    /**
     * Integer value that gives the time in ms that the page started loading, measured from navigation start
     */
    startTime: number;
    /**
     * If an error has occurred, this will be set to a message detailing the nature of the error
     * The value is undefined if no error occured.
     */
    errorMessage?: string;
    /**
     * SharePoint server build version
     */
    spoVersion?: string;
    /***
     * Client build version
     */
    clientBuildVersion?: string;
    /**
     * Correlation id corresponding to the server request.
     */
    correlationId?: string;
    /**
     * Current Tenant CDN status
     */
    CDNStatus?: string;
    /**
     * Time taken to hit at least 1 second of no micro tasks > 50ms
     */
    timeToInteractive: number;
}
export default class PerformanceDisplay extends React.Component<IDeveloperToolsCompPropBase, IPerformanceDisplayState> {
    constructor(props: IDeveloperToolsCompPropBase);
    render(): React.ReactElement<{}>;
}
//# sourceMappingURL=PerformanceDisplay.d.ts.map