/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PerformanceHeader.tsx
 * Sub-component for PerformanceDisplay. This component gives an overview of the performance data
 * that is detailed in the graph.
 */
import * as React from 'react';
import { _IPerfItem } from '@ms/sp-telemetry';
export interface IPerformanceHeaderProps {
    perfItems: _IPerfItem[];
    overallDuration: number;
    fullPageDuration: number;
    speedOfLight?: number;
    firstFlushDuration?: number;
    serverDuration?: number;
    postFlush?: number;
    spoVersion?: string;
    clientBuildVersion?: string;
    correlationId?: string;
    CDNStatus?: string;
    timeToInteractive?: number;
}
export default class PerformanceHeader extends React.Component<IPerformanceHeaderProps, {}> {
    /**
     * Time from navigation start to headStart marker
     */
    private _headStart;
    /**
     * Time to exeute <head></head> section.
     */
    private _headTime;
    /**
     * Time spent by browser waiting for <body></body> section to arrive once <head></head> is done by headEnd time.
     * This wait is dependent on _serverResponse vs _headTime.
     */
    private _serverResponseWait;
    /**
     * Time taken to start the app once head is executed as well _serverResponseWait is over if any.
     * Essentially time between bodyStart to appStart marker.
     *
     */
    private _appStart;
    /**
     * Time taken to render the page on client side.
     */
    private _renderPageDuration;
    /**
     * Time taken to render web parts.
     */
    private _renderWebparts;
    private _hasWebParts;
    constructor(props: IPerformanceHeaderProps);
    render(): React.ReactElement<IPerformanceHeaderProps>;
    /**
     * Calculate overall load times for categories:
     * Server Response
     * App Load
     * Page Render
     * Web Parts Render
     * Total
     */
    private _getPerfTimings;
}
//# sourceMappingURL=PerformanceHeader.d.ts.map