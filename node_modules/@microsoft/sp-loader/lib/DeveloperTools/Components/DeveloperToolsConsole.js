/**
 * @file DeveloperToolsConsole.tsx
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
import { __decorate, __extends } from "tslib";
import * as React from 'react';
import { Pivot, PivotItem, PivotLinkFormat, PivotLinkSize } from 'office-ui-fabric-react/lib/Pivot';
import { IconButton } from 'office-ui-fabric-react/lib/Button';
import { customizable } from 'office-ui-fabric-react/lib/Utilities';
import DeveloperToolsConsoleStore from './../Stores/DeveloperToolsConsoleStore';
import LoadingOrErrorModule from './DeveloperModules/LoadingOrErrorModule/LoadingOrErrorModule';
import styles from './DeveloperToolsConsole.module.scss';
import * as strings from './../DeveloperTools.resx';
var DeveloperToolsConsole = /** @class */ (function (_super) {
    __extends(DeveloperToolsConsole, _super);
    function DeveloperToolsConsole(props) {
        var _this = _super.call(this, props) || this;
        _this._handleCancelClick = function () {
            DeveloperToolsConsoleStore.showHideConsole(false);
        };
        _this._onDrag = function (e) {
            var mouseEvent = e; // tslint:disable-line:no-any
            if (mouseEvent.pageY !== 0) {
                var clientHeight = document.documentElement.clientHeight;
                var height = (clientHeight - mouseEvent.pageY) / clientHeight;
                DeveloperToolsConsoleStore.resizeConsole(height);
            }
        };
        _this._setState = function () {
            _this.setState({
                topPosition: DeveloperToolsConsoleStore.height,
                visible: DeveloperToolsConsoleStore.visible,
                tabs: DeveloperToolsConsoleStore.tabs,
                selectedTabId: DeveloperToolsConsoleStore.selectedTabId
            });
        };
        _this.state = {
            topPosition: DeveloperToolsConsoleStore.height,
            visible: DeveloperToolsConsoleStore.visible,
            tabs: DeveloperToolsConsoleStore.tabs,
            selectedTabId: DeveloperToolsConsoleStore.selectedTabId
        };
        return _this;
    }
    DeveloperToolsConsole.prototype.componentDidMount = function () {
        DeveloperToolsConsoleStore.addListener(this._setState);
    };
    DeveloperToolsConsole.prototype.componentWillUnmount = function () {
        DeveloperToolsConsoleStore.removeListener(this._setState);
    };
    DeveloperToolsConsole.prototype.render = function () {
        var RENDER_NOTHING = null; // tslint:disable-line
        if (this.state.visible) {
            var tabs = this.state.tabs.map(function (tab, id) {
                return (React.createElement(PivotItem, { linkText: tab.title, itemIcon: tab.iconName },
                    React.createElement(LoadingOrErrorModule, { tab: tab })));
            });
            return (React.createElement("div", { className: styles.container, style: { height: this.state.topPosition * 100 + "%" } },
                React.createElement("div", { className: styles.resizeBar, draggable: true, onDrag: this._onDrag }),
                React.createElement("div", { className: styles.toolsArea },
                    React.createElement(Pivot, { linkSize: PivotLinkSize.normal, linkFormat: PivotLinkFormat.links, styles: this._calculatePivotStyles(this.props.theme) }, tabs),
                    React.createElement(IconButton, { className: styles.closeButton, iconProps: { iconName: 'Cancel' }, title: strings.closeDeveloperToolsAriaLabel, ariaLabel: strings.closeDeveloperToolsAriaLabel, onClick: this._handleCancelClick }))));
        }
        else {
            return RENDER_NOTHING;
        }
    };
    DeveloperToolsConsole.prototype._calculatePivotStyles = function (theme) {
        if (theme) {
            var isInverted = theme.isInverted, semanticColors = theme.semanticColors;
            var buttonBackground = semanticColors.buttonBackground, buttonText = semanticColors.buttonText;
            return {
                linkContent: { color: isInverted ? buttonBackground : buttonText }
            };
        }
        else {
            return undefined;
        }
    };
    DeveloperToolsConsole = __decorate([
        customizable('DeveloperToolsConsole', ['theme'])
    ], DeveloperToolsConsole);
    return DeveloperToolsConsole;
}(React.Component));
export default DeveloperToolsConsole;
//# sourceMappingURL=DeveloperToolsConsole.js.map