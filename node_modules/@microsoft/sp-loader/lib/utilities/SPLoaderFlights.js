import { _SPExperiment, _SPFlight } from '@microsoft/sp-core-library';
import { _PerformanceLogger, _SPPerfExperiment, _PerformanceExperiment } from '@ms/sp-telemetry';
/**
 * Class to expose flight checks on sp-loader
 *
 * @internal
 */
var SPLoaderFlights = /** @class */ (function () {
    function SPLoaderFlights() {
    }
    SPLoaderFlights._isSafariAuthPatchEnabled = function () {
        return _SPFlight.isEnabled(687 /*SppplatSafariAuthPatch */);
    };
    SPLoaderFlights._isMinimalStartFlightEnabled = function () {
        var status = _SPExperiment.getVariantAndLogExposure(90051 /* SppplatTwoPhaseRender */) === 1;
        _PerformanceLogger.trackExperiment(90051, status ? 'Treatment' : 'Control');
        return status;
    };
    SPLoaderFlights._isOptimisticPreloadEnabled = function () {
        return _SPPerfExperiment.getVariantAndTrackExperiment(90009) === 1;
    };
    SPLoaderFlights._isSPWebWorkerEnabled = function () {
        return (_SPFlight.isEnabled(60105 /* SPWebWorkerFlight */) ||
            _SPPerfExperiment.getVariantAndTrackExperiment(_PerformanceExperiment.SPWebWorkerExp) === 1);
    };
    return SPLoaderFlights;
}());
export default SPLoaderFlights;
//# sourceMappingURL=SPLoaderFlights.js.map