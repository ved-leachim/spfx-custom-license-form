import { Session } from '@microsoft/sp-core-library';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { SPHttpClient } from '@microsoft/sp-http';
import { PageContext } from '@microsoft/sp-page-context';
import { isDeploymentPoolsFlightEnabled } from '../common/flights';
import { isRejectOnNotFoundManifestsKillSwitchActivated, isLogSuccessOfTryGetManifestsKillSwitchActivated } from '../common/killSwitches';
/**
 * Data provider for manifest fetching with the server.
 */
var ManifestProvider = /** @class */ (function () {
    function ManifestProvider(serviceScope, _webAbsoluteUrl) {
        this._webAbsoluteUrl = _webAbsoluteUrl;
        this._pageContext = serviceScope.consume(PageContext.serviceKey);
        this._httpClient = serviceScope.consume(SPHttpClient.serviceKey);
    }
    /**
     * Make a server request to fetch a collection of component manifests.
     *
     * @param requests - Array of manifests to fetch from the server
     *
     * @returns A promise resolving to an array of component manifests
     */
    ManifestProvider.prototype.fetchManifests = function (requests) {
        var isKSNotActivated = !isRejectOnNotFoundManifestsKillSwitchActivated();
        var logSuccess = !isLogSuccessOfTryGetManifestsKillSwitchActivated();
        var qosMonitor = new _QosMonitor('ManifestProvider.tryGetManifests');
        var extraData = {};
        // tslint:disable-next-line:no-any
        var body = { components: requests };
        if (isDeploymentPoolsFlightEnabled()) {
            body.project = Session.clientSideApplicationId;
        }
        var requestIds;
        if (isKSNotActivated) {
            requestIds = new Set();
            for (var _i = 0, requests_1 = requests; _i < requests_1.length; _i++) {
                var r = requests_1[_i];
                requestIds.add(r.id);
            }
        }
        return this._httpClient
            .post(((this._pageContext.web && this._pageContext.web.absoluteUrl) || this._webAbsoluteUrl) + "/_api/web/GetClientSideComponents", // tslint:disable:max-line-length
        SPHttpClient.configurations.v1, {
            body: JSON.stringify(body)
        })
            .then(function (response) {
            if (!response.ok) {
                throw new Error("ManifestProvider GetClientSideComponents failed with HTTP status " + response.status + " and correlation id " + response.correlationId); // tslint:disable:max-line-length
            }
            else if (logSuccess && response.correlationId) {
                extraData.correlationId = response.correlationId.toString();
            }
            return response.json();
        })
            .then(function (componentResponse) {
            var manifests = [];
            for (var _i = 0, _a = componentResponse.value; _i < _a.length; _i++) {
                var r = _a[_i];
                if (r.Status === 0 && r.Manifest) {
                    var manifest = JSON.parse(r.Manifest);
                    manifests.push(manifest);
                    if (isKSNotActivated) {
                        requestIds.delete(manifest.id);
                    }
                }
            }
            if (isKSNotActivated && requestIds.size) {
                throw new Error('Did not fetch all manifests');
            }
            if (logSuccess) {
                qosMonitor.writeSuccess(extraData);
            }
            return manifests;
        })
            .catch(function (e) {
            _TraceLogger.logErrorData({ source: ManifestProvider._logSource, error: e });
            qosMonitor.writeUnexpectedFailure(undefined, e, (isKSNotActivated && { manifestRequests: requests }) || undefined);
            throw e;
        });
    };
    ManifestProvider._logSource = _LogSource.create('ManifestProvider');
    return ManifestProvider;
}());
export { ManifestProvider };
//# sourceMappingURL=ManifestProvider.js.map