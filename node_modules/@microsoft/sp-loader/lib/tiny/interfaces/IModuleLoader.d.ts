import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { ILoadScriptOptions } from '../../interfaces/ILoadScriptOptions';
import { ServiceScope } from '@microsoft/sp-core-library';
export interface IModuleLoader {
    /**
     * Delete a loaded and/or pending component.
     *
     * @param manifest - Manifest of the component to be deleted.
     */
    delete(manifest: IClientSideComponentManifest): void;
    /**
     * Ensure `module` is present in the module loader and remove any pre-existing module.
     *
     * @param name - Name of the module in the module loader.
     * @param module - Module to ensure.
     */
    ensure(name: string, module: any): void;
    /**
     * Load a component through the module loader.
     *
     * @param moduleName - Name of the module.
     * @param globalName - (Optional) Global name of the module.
     */
    load<T>(moduleName: string, globalName?: string): Promise<T>;
    /**
     * Load an SPFx component through the module loader.
     *
     * @param manifest - Manifest of the component to be loaded
     */
    loadComponent<T>(manifest: IClientSideComponentManifest): Promise<T>;
    /**
     * Load the entry point of an SPFx component.
     *
     * @param manifest - Manifest of the component to be loaded.
     * @param name - (Optional) Name of the component in the module loader.
     * @param globalName
     */
    loadEntryPoint<T>(manifest: IClientSideComponentManifest, name?: string, globalName?: string): Promise<T>;
    /**
     * Load a script through the module loader.
     *
     * @param url - URL of the script to be loaded.
     * @param options - (Optional) Configuration for how the script should be loaded.
     */
    loadScript<T>(url: string, options?: ILoadScriptOptions): Promise<T>;
}
/**
 * Used by `SPComponentLoader` to define the contract for creating an `IModuleLoader` instance.
 */
export interface IModuleLoaderConstructor {
    new (serviceScope: ServiceScope, useSecondaryCdn: boolean): IModuleLoader;
}
//# sourceMappingURL=IModuleLoader.d.ts.map