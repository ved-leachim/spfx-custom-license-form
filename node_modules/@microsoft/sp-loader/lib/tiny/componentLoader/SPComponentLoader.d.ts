import { ServiceScope } from '@microsoft/sp-core-library';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IDebugData } from '../../debug/DebugManager';
import { ILoadScriptOptions } from '../../interfaces/ILoadScriptOptions';
import { IPreloadedData } from '../../interfaces/IPreloadedData';
import { ISPComponentLoader } from '../../interfaces/ISPComponentLoader';
import { IModuleLoaderConstructor } from '../interfaces/IModuleLoader';
export interface ILoaderArgs {
    bundledComponents: {
        [id: string]: Object;
    };
    ctor: IModuleLoaderConstructor;
    debugData: IDebugData;
    preloadedData: IPreloadedData;
    serviceScope: ServiceScope;
    useSecondaryCdn: boolean;
}
/**
 * SPFx component loader.
 *
 * @public
 */
export declare class SPComponentLoader implements ISPComponentLoader {
    private static _headElement;
    private readonly _loader;
    private readonly _serviceScope;
    private readonly _skipThirdPartyCode;
    constructor(loaderArgs: ILoaderArgs);
    /**
     * {@inheritDoc  ISPComponentLoader.loadComponent}
     */
    loadComponent<T>(manifest: IClientSideComponentManifest): Promise<T>;
    /**
     * {@inheritDoc  ISPComponentLoader.loadComponentById}
     *
     * @public
     */
    loadComponentById<T>(id: string, version?: string): Promise<T>;
    /**
     * {@inheritDoc  ISPComponentLoader.loadCss}
     */
    loadCss(url: string): void;
    /**
     * {@inheritDoc  ISPComponentLoader.loadScript}
     */
    loadScript<T>(url: string, options?: ILoadScriptOptions): Promise<T>;
    /**
     * {@inheritdoc ISPComponentLoader._loadDebugManifestsForWorkbench}
     *
     * @internal
     */
    _loadDebugManifestsForWorkbench(manifestsFileUrl: string): Promise<IClientSideComponentManifest[]>;
    /**
     * {@inheritdoc ISPComponentLoader._startApplication}
     *
     * @internal
     */
    _startApplication<T>(preloadedData: IPreloadedData): Promise<T>;
    /**
     * {@inheritdoc ISPComponentLoader._preloadComponents}
     *
     * @internal
     */
    _preloadComponents(): void;
    /**
     * {@inheritdoc ISPComponentLoader._unloadComponents}
     *
     * @internal
     */
    _unloadComponents(): void;
    registerManifests(manifests: IClientSideComponentManifest[]): void;
    requestManifest(id: string, version?: string): Promise<IClientSideComponentManifest>;
    tryGetLoadedComponent<T>(manifest: IClientSideComponentManifest): T | undefined;
    tryGetManifestById(id: string, version?: string): IClientSideComponentManifest | undefined;
    get _manifestReferences(): IClientSideComponentManifest[];
    _initialize(preloadedData: IPreloadedData, bundledComponents: {
        [id: string]: Object;
    }, debugData: IDebugData): void;
}
//# sourceMappingURL=SPComponentLoader.d.ts.map