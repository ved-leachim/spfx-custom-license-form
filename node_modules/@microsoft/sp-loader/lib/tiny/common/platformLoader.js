import { SPComponentLoader } from '../../loader/SPComponentLoader';
import ComponentStore from '../../stores/ComponentStore';
import ManifestStore from '../../stores/ManifestStore';
import { spApplicationBaseComponentId } from '../../utilities/componentConstants';
export function startApplication(preloadedData, serviceScope) {
    return new Promise(function (resolve) {
        updateServiceWorkerState();
        var appBaseManifest = ManifestStore.instance.tryGetManifest(spApplicationBaseComponentId);
        var app;
        if (appBaseManifest) {
            var appBase = ComponentStore.instance.tryGetComponentReference(appBaseManifest.id, appBaseManifest.version);
            if (appBase) {
                app = navigateToApplication(appBase, preloadedData, serviceScope);
            }
        }
        resolve(app);
    })
        .then(function (app) {
        if (!app) {
            return SPComponentLoader.loadComponentById(spApplicationBaseComponentId).then(function (a) { return navigateToApplication(a, preloadedData, serviceScope); });
        }
        return app;
    })
        .catch(function (e) {
        throw e;
    });
}
function updateServiceWorkerState() {
    var _a;
    try {
        if ((_a = window.navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) {
            sessionStorage.setItem('serviceworkerstate', window.navigator.serviceWorker.controller.state.toString());
        }
        else {
            sessionStorage.removeItem('serviceworkerstate');
        }
    }
    catch (e) {
        // catch
    }
}
function navigateToApplication(appBase, preloadedData, serviceScope) {
    return new appBase._Navigator(serviceScope).navigateToApplication(preloadedData);
}
//# sourceMappingURL=platformLoader.js.map