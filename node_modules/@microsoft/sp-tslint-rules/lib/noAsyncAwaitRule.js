"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tsutils_1 = require("tsutils");
const ts = require("typescript");
const Lint = require("tslint");
/**
 * Check for any functions with the `async` modifier. If a function does not have the `async`
 * modifier then we defer to TSC to fail on `await` keywords since `await` has to be used
 * within an `async` context.
 */
// tslint:disable-next-line:export-name
class Rule extends Lint.Rules.AbstractRule {
    apply(source) {
        return this.applyWithFunction(source, noAsyncAwait);
    }
}
exports.Rule = Rule;
Rule.metadata = {
    ruleName: 'no-async-await',
    description: 'Warn when using async/await functions.',
    rationale: 'async/await has overhead when emitting ES5 JavaScript',
    optionsDescription: 'No options available.',
    options: undefined,
    type: 'functionality',
    typescriptOnly: false
};
function noAsyncAwait(context, node) {
    if (!node) {
        ts.forEachChild(context.sourceFile, (n) => noAsyncAwait(context, n));
    }
    else {
        if (tsutils_1.isArrowFunction(node) ||
            tsutils_1.isFunctionDeclaration(node) ||
            tsutils_1.isFunctionExpression(node) ||
            tsutils_1.isMethodDeclaration(node)) {
            checkAndReportIfAsync(context, node);
        }
        ts.forEachChild(node, (n) => noAsyncAwait(context, n));
    }
}
function checkAndReportIfAsync(context, node) {
    if (node.body === undefined && node.type !== undefined) {
        return;
    }
    if (node.modifiers !== undefined &&
        node.modifiers.find((modifier) => modifier.kind === ts.SyntaxKind.AsyncKeyword)) {
        context.addFailureAtNode(node, 'async/await usage is not allowed');
    }
}
//# sourceMappingURL=noAsyncAwaitRule.js.map