"use strict";
/**
 * @file deployToAzure.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Uploads source files to an Azure Blob Storage instance
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAzureStorageUrl = void 0;
const glob = require("glob");
const spfx_heft_plugins_1 = require("@microsoft/spfx-heft-plugins");
const node_core_library_1 = require("@rushstack/node-core-library");
/**
 * Uses glob to expand the file path glob into a list of resolved file paths
 */
function loadSourceFiles(globs, cwd) {
    return new Promise((resolve, reject) => {
        const options = cwd ? { cwd: cwd } : {};
        glob(globs, options, (err, matches) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(matches || []);
            }
        });
    });
}
/**
 * Deploys all the files in a certain directory to a specific Azure Blob Storage instance
 */
function deployToAzure(terminal, config) {
    if (!config.container) {
        return new Promise((complete, reject) => {
            reject(new Error('Config file missing container name!'));
        });
    }
    if (!config.account) {
        return new Promise((complete, reject) => {
            reject(new Error('Config file missing Azure account name!'));
        });
    }
    if (!config.accessKey) {
        return new Promise((complete, reject) => {
            reject(new Error('Config file missing Azure access key!'));
        });
    }
    terminal.writeLine(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);
    return loadSourceFiles(config.uploadPath, config.workingDir).then((files) => {
        return spfx_heft_plugins_1._ensureBlobService(config.account, config.accessKey)
            .then((blobService) => spfx_heft_plugins_1._ensureContainer(terminal, blobService, config.container))
            .then((blobService) => {
            const filesToUpload = files.map((filename) => {
                return {
                    azurePath: filename,
                    localPath: config.workingDir + filename
                };
            });
            return spfx_heft_plugins_1._UploadToAzure.uploadFilesToAzureAsync(terminal, blobService, config.container, filesToUpload, spfx_heft_plugins_1._UploadToAzure.DEFAULT_AZURE_MAX_PARALLELISM, spfx_heft_plugins_1._UploadToAzure.DEFAULT_AZURE_MAX_NUMBER_OF_RETRIES, spfx_heft_plugins_1._UploadToAzure.DEFAULT_AZURE_RETRY_DELAY_MILLISECONDS);
        })
            .then(() => {
            terminal.writeLine(node_core_library_1.Colors.green('Upload complete!\n'));
            terminal.writeLine(`Access your files at: ${getAzureStorageUrl(config.account, config.container)}\n`);
        }, (error) => {
            terminal.writeErrorLine(error.toString());
        });
    });
}
exports.default = deployToAzure;
function getAzureStorageUrl(accountName, containerName) {
    const azureStorageBaseUrl = `https://${accountName}.blob.core.windows.net`;
    if (containerName) {
        const containerUrl = new URL(containerName, azureStorageBaseUrl);
        return containerUrl.toString();
    }
    else {
        return azureStorageBaseUrl;
    }
}
exports.getAzureStorageUrl = getAzureStorageUrl;
//# sourceMappingURL=deployToAzure.js.map