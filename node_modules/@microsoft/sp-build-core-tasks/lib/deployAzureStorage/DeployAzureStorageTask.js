"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployAzureStorageTask = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
const deployToAzure_1 = __importDefault(require("./uploadCDN/deployToAzure"));
const GulpTaskTerminalProvider_1 = require("../utilities/GulpTaskTerminalProvider");
class DeployAzureStorageTask extends gulp_core_build_1.GulpTask {
    constructor() {
        super('deploy-azure-storage', {
            uploadPath: '**/*.*'
        });
    }
    loadSchema() {
        return node_core_library_1.JsonFile.load(path.join(__dirname, 'deploy-azure-storage.schema.json'));
    }
    async executeTask() {
        if (!this.taskConfig.workingDir) {
            this.taskConfig.workingDir = path.join(this.buildConfig.rootPath, 'release', 'assets');
        }
        const terminal = new node_core_library_1.Terminal(new GulpTaskTerminalProvider_1.GulpTaskTerminalProvider(this));
        await deployToAzure_1.default(terminal, this.taskConfig);
    }
}
exports.DeployAzureStorageTask = DeployAzureStorageTask;
//# sourceMappingURL=DeployAzureStorageTask.js.map