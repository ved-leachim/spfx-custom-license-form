/// <reference types="node" />
import * as Gulp from 'gulp';
import { IBuildConfig } from '@microsoft/gulp-core-build';
import ISolution from './packageSolution/models/packageDefinition/ISolution';
import { OdspGulpTask } from '../OdspGulpTask';
export interface IPackageSolutionTaskConfig {
    paths?: {
        /**
         * The packaging root folder. Defaults to './sharepoint'. All other paths are relative to this folder.
         */
        packageDir?: string;
        /**
         * The folder to write the raw package to disk for debugging. Defaults to 'solution/debug'
         */
        debugDir?: string;
        /**
         * The name of the sppkg to create (including extension) Defaults to 'ClientSolution.sppkg'
         */
        zippedPackage?: string;
        /**
         * The folder containing the custom feature xml to import into the package. Defaults to 'feature_xml'.
         * Note that all files in this folder will be included in the SPPKG, however, you must create a .rels
         * file for your custom feature for it to be included in the package manifest.
         */
        featureXmlDir?: string;
        /**
         * The directory containing Sharepoint assets (such as feature elements, element manifests, and upgrade actions),
         * which will be automatically included in the sharepoint package. Defaults to 'assets'.
         */
        sharepointAssetDir?: string;
        /**
         * The directory containing teams assets (such as icons)
         */
        teamsDir?: string;
    };
    /** A mapping of extensions to content types for resources included in the package */
    contentTypes?: {
        [extension: string]: string;
    };
    /**
     * The definition of this solution's package, features, and components
     */
    solution?: ISolution;
}
export declare class PackageSolutionTask extends OdspGulpTask<IPackageSolutionTaskConfig> {
    private _hasPrependedPaths;
    constructor();
    loadSchema(): Object;
    executeTask(gulp: typeof Gulp): NodeJS.ReadWriteStream;
    getCleanMatch(buildConfig: IBuildConfig): string[];
    private _prependBaseToConfigPaths;
}
//# sourceMappingURL=PackageSolutionTask.d.ts.map