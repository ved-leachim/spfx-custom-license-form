"use strict";
/**
 * @file createIcon.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates an package's icon information
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml_1 = __importDefault(require("xml"));
const uuid = __importStar(require("uuid"));
const createRelationshipsXml_1 = __importDefault(require("./createRelationshipsXml"));
const serializationOptions_1 = __importDefault(require("./serializationOptions"));
function createIcon(iconPath) {
    if (!iconPath) {
        return;
    }
    const config = {
        filename: `${iconPath}.config.xml`,
        contents: Buffer.from(xml_1.default({
            AppPartConfig: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/partconfiguration'
                    }
                },
                {
                    Id: uuid.v4()
                }
            ]
        }, serializationOptions_1.default))
    };
    const rels = createRelationshipsXml_1.default(iconPath, [
        {
            type: 'partconfiguration',
            target: `${iconPath}.config.xml`
        }
    ]);
    return {
        path: iconPath,
        config: config,
        relationships: rels
    };
}
exports.default = createIcon;
//# sourceMappingURL=createIcon.js.map