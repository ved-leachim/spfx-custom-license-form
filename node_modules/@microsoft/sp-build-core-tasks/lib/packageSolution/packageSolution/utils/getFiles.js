"use strict";
/**
 * @file getFiles.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Reads relative file paths given a working directory and a glob.
 * Relative paths are generated by removing a certain
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelativeFilePaths = exports.getFiles = void 0;
const colors = require("colors");
const glob = require("glob");
const fs = require("fs");
const path = __importStar(require("path"));
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
/** Loads a directory of files into IFile objects */
function getFiles(cwd, globs, foundMessage = 'Found file: ') {
    return new Promise((complete, reject) => {
        glob(globs, {
            cwd: cwd
        }, (error, files) => {
            if (error) {
                reject(error);
            }
            complete((files || []).map((filename) => {
                gulp_core_build_1.log(foundMessage + filename);
                return {
                    filename: filename,
                    contents: fs.readFileSync(path.join(cwd, filename))
                };
            }));
        });
    });
}
exports.getFiles = getFiles;
/** Reads the list of relative path from a specified folder */
function getRelativeFilePaths(cwd, globs, foundMessage = 'Found file: ') {
    return new Promise((complete, reject) => {
        glob(globs, {
            cwd: cwd
        }, (error, files) => {
            if (error) {
                reject(error);
            }
            complete((files || []).map((filename) => {
                filename = filename;
                gulp_core_build_1.log(colors.cyan(foundMessage + filename));
                return filename;
            }));
        });
    });
}
exports.getRelativeFilePaths = getRelativeFilePaths;
//# sourceMappingURL=getFiles.js.map