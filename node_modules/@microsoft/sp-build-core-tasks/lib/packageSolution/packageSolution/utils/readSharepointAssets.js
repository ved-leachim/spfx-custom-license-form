"use strict";
/**
 * @file readSharepointAssets.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Using the configuration, reads a list of Sharepoint assets of one of 3 types
 * (element manifests, element files, and upgrade actions). Returns an object with a list
 * of IFile files to include in the package.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSharepointAssets = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const colors = require("colors");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
/**
 * Reads a special folder containing SharePoint assets which should automatically be integrated into a feature.
 * You can think of this as a slightly more useful version of readCustomFeatures, which allows for custom features
 * to be created, but is more cumbersome when you want to do something simple like include an upgrade action into
 * the SPPKG.
 */
// tslint:disable-next-line:max-line-length
function readSharepointAssets(assets, featureId) {
    return {
        elementManifests: readAssetFiles(assets.elementManifests, 'Element Manifest', featureId),
        elementFiles: readAssetFiles(assets.elementFiles, 'Element File'),
        upgradeActions: readAssetFiles(assets.upgradeActions, 'Upgrade Action', featureId)
    };
}
exports.readSharepointAssets = readSharepointAssets;
function readAssetFiles(assetFilePaths, assetFileDescription, subdir) {
    return assetFilePaths.map((filepath) => {
        let contents;
        const filename = path.basename(filepath);
        try {
            contents = fs.readFileSync(filepath);
        }
        catch (err) {
            throw new Error(`Could not find ${assetFileDescription}: ${filepath}`);
        }
        gulp_core_build_1.log(colors.cyan(`Found ${assetFileDescription}: ${path.basename(filename)}`));
        return {
            filename: subdir ? path.posix.join(subdir, filename) : filename,
            contents
        };
    });
}
//# sourceMappingURL=readSharepointAssets.js.map