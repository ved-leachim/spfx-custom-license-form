"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureRigTask = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const spfx_heft_plugins_1 = require("@microsoft/spfx-heft-plugins");
const OdspGulpTask_1 = require("./../OdspGulpTask");
const UPGRADE_PARAM_NAME = 'upgrade';
class ConfigureRigTask extends OdspGulpTask_1.OdspGulpTask {
    constructor() {
        super('configure-sp-build-rig');
    }
    async executeTask() {
        const configFilePath = path.join(this.buildConfig.rootPath, 'config', 'config.json');
        const configResult = spfx_heft_plugins_1._readConfigFile(this.logVerbose.bind(this), configFilePath);
        if (configResult.missingFile) {
            this.logWarning('Missing config.json file. If this is a non-web project, consider using a non-web build rig ' +
                'like @microsoft/sp-build-node');
        }
        if (configResult.readError) {
            throw new Error(`Error reading config.json file: ${configResult.readError}`);
        }
        if (!configResult.isLatestVersion) {
            if (this.buildConfig.args[UPGRADE_PARAM_NAME]) {
                spfx_heft_plugins_1._migrateToLatestVersion(this.logWarning.bind(this), configResult.configData);
                node_core_library_1.JsonFile.save(configResult.configData, configFilePath, { prettyFormatting: true });
            }
            else {
                this.logWarning(`This project is using an old config.json file version (${configResult.version}). Run the ` +
                    `build again with the --${UPGRADE_PARAM_NAME} (gulp --${UPGRADE_PARAM_NAME}) flag to ` +
                    'upgrade the config.json file to the latest version.');
            }
        }
        this.properties.configJson = configResult.configData;
    }
}
exports.ConfigureRigTask = ConfigureRigTask;
//# sourceMappingURL=ConfigureRigTask.js.map