"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdspGulpTask = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
class OdspGulpTask extends gulp_core_build_1.GulpTask {
    get properties() {
        if (!this.buildConfig.properties) {
            this.buildConfig.properties = this._getDefaultProperties();
        }
        return this.buildConfig.properties;
    }
    get outputDirectory() {
        if (!this._outputDirectory) {
            this._outputDirectory = path.join(this.buildConfig.rootPath, this.buildConfig.distFolder);
        }
        return this._outputDirectory;
    }
    getManifest(manifestPath) {
        if (!this.properties.manifests) {
            this.properties.manifests = {};
        }
        const manifests = this.properties.manifests;
        if (manifests[manifestPath] === undefined) {
            if (!manifestPath) {
                manifests[manifestPath] = null; // tslint:disable-line:no-null-keyword
            }
            else {
                const fullManifestPath = path.join(this.buildConfig.rootPath, manifestPath);
                manifests[manifestPath] = node_core_library_1.JsonFile.load(fullManifestPath);
            }
        }
        return manifests[manifestPath];
    }
    getPackageVersion() {
        const packageJson = require(path.join(this.buildConfig.rootPath, 'package.json'));
        let version = packageJson.version;
        // Remove pre-release name if any, because pre-release is not handled by SPFx yet.
        const indexOfDelimiter = version.indexOf('-');
        if (indexOfDelimiter > 0) {
            version = version.substr(0, indexOfDelimiter);
        }
        return version;
    }
    get releasePath() {
        return path.join(this.buildConfig.rootPath, 'release');
    }
    _getDefaultProperties() {
        return {};
    }
}
exports.OdspGulpTask = OdspGulpTask;
//# sourceMappingURL=OdspGulpTask.js.map