import { Guid, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _LogSource, _TraceLogger, _QosMonitor } from '@microsoft/sp-diagnostics';
import { _ClientManifestData } from '@microsoft/sp-core-library';
import GraphHttpClientContext from '../graphHttpClient/GraphHttpClientContext';
// Killswitch Guid to disable Adding "SdkVersion" header to the Request.
var SDKVERSION_HEADER_KILLSWITCH = Guid.parse('7eade7ed-629b-4db2-8837-1fde226c59ff');
var QOS_LOG_FAILURE_KILLSWITCH = Guid.parse('065b3863-45bb-44c0-846e-5cd769f06683');
/**
 * Private - this class contains some internal code shared between HttpClient
 * and SPHttpClient.
 */
var HttpClientHelper = /** @class */ (function () {
    function HttpClientHelper() {
    }
    /**
     * Clones the original options and sets the method to the passed in method name.
     */
    HttpClientHelper.overrideHttpMethod = function (options, httpRequestMethod) {
        var modifiedOptions = Object.assign({}, options);
        modifiedOptions.method = httpRequestMethod;
        return modifiedOptions;
    };
    /**
     * All network requests are routed through this method, which calls the
     * underlying IFetchProvider.fetch().
     */
    HttpClientHelper.fetchCore = function (configuration, request, serviceScope, fetchProvider, logSource) {
        var loggingSource = _LogSource.create(logSource);
        try {
            _TraceLogger.logVerbose(loggingSource, request.method + " " + request.url);
        }
        catch (error) {
            // Ignore potential Log errors
        }
        var clientManifestData = serviceScope.consume(_ClientManifestData.serviceKey);
        var qosMonitor;
        var alias;
        var componentId;
        if (_SPKillSwitch.isActivated(QOS_LOG_FAILURE_KILLSWITCH, '10/20/2020', 'Reduce HttpClientHelper.Fetch logging')) {
            qosMonitor = new _QosMonitor(HttpClientHelper.HTTP_CLIENT_CLASS_NAME_FETCH);
        }
        if (clientManifestData.manifest) {
            if (qosMonitor) {
                qosMonitor.extraData = {
                    alias: clientManifestData.manifest.alias,
                    componentId: clientManifestData.manifest.id
                };
            }
            else {
                alias = clientManifestData.manifest.alias;
                componentId = clientManifestData.manifest.id;
            }
            if (!_SPKillSwitch.isActivated(SDKVERSION_HEADER_KILLSWITCH, '10/22/2019', 'RemoveSdkVersionHeader')) {
                // We would like to add the 'SdkVersion' header to all outgoing network requests.
                // We are adding 'SdkVersion' header for Graph and Sharepoint REST calls only.
                // This is because not all services support arbitrary headers.
                // See more here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers
                try {
                    var graphContext = serviceScope.consume(GraphHttpClientContext.serviceKey);
                    var spUrlOrigin = new URL(graphContext.getWebAbsoluteUrl()).origin;
                    var msGraphUrlOrigin = new URL(graphContext.getGraphEndpointUrl()).origin;
                    var requestUrlOrigin = new URL(request.url).origin;
                    if (requestUrlOrigin === spUrlOrigin || requestUrlOrigin === msGraphUrlOrigin) {
                        request.headers.append('Access-Control-Request-Headers', 'SdkVersion');
                        request.headers.append('SdkVersion', 'SPFx/' + clientManifestData.manifest.alias + '/' + clientManifestData.manifest.id);
                    }
                }
                catch (error) {
                    _TraceLogger.logVerbose(loggingSource, 'SdkVersionError: ' + error);
                }
            }
        }
        return fetchProvider
            .fetch(request)
            .then(function (response) {
            if (response.status >= 200 && response.status <= 299) {
                if (qosMonitor) {
                    qosMonitor.writeSuccess({ source: logSource });
                }
            }
            else if (response.status >= 300 && response.status <= 399) {
                if (qosMonitor) {
                    qosMonitor.writeExpectedFailure('Redirection', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
            }
            else {
                qosMonitor = new _QosMonitor(HttpClientHelper.HTTP_CLIENT_CLASS_NAME_FETCH);
                if (alias !== undefined && componentId !== undefined) {
                    qosMonitor.extraData = {
                        alias: alias,
                        componentId: componentId
                    };
                }
            }
            if (qosMonitor) {
                if (response.status >= 400 && response.status <= 499) {
                    qosMonitor.writeExpectedFailure('ClientError', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
                else if (response.status >= 500 && response.status <= 599) {
                    qosMonitor.writeExpectedFailure('ServerError', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
                else {
                    qosMonitor.writeUnexpectedFailure('Unknown', undefined, {
                        source: logSource,
                        responseStatus: response.status
                    });
                }
            }
            return response;
        })
            .catch(function (error) {
            if (!qosMonitor) {
                qosMonitor = new _QosMonitor(HttpClientHelper.HTTP_CLIENT_CLASS_NAME_FETCH);
                if (alias !== undefined && componentId !== undefined) {
                    qosMonitor.extraData = {
                        alias: alias,
                        componentId: componentId
                    };
                }
            }
            if (!_SPKillSwitch.isActivated('05b38c8d-4659-4055-9348-7f15ab35b204'
            /* , '12/02/2020', 'Extra Data'*/
            )) {
                qosMonitor.writeUnexpectedFailure('FetchError', error, {
                    source: logSource,
                    fullError: JSON.stringify(error)
                });
            }
            else {
                qosMonitor.writeUnexpectedFailure('FetchError', error, {
                    source: logSource
                });
            }
            throw error;
        });
    };
    HttpClientHelper.HTTP_CLIENT_CLASS_NAME_FETCH = 'HttpClientHelper.Fetch';
    return HttpClientHelper;
}());
export default HttpClientHelper;
//# sourceMappingURL=HttpClientHelper.js.map