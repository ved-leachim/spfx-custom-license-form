import { SPEvent } from '@microsoft/sp-core-library';
import { IAadTokenProvider, IAadTokenProviderConfiguration } from '../../IAadTokenProvider';
import { IAdalAuthContextManager, ISPOBOFlowParameters } from '../../ITokenProvider';
import { BeforeRedirectEventArgs, TokenAcquisitionEventArgs } from '../../AadTokenProvider';
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @privateRemarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 * @sealed
 */
export declare class DeferredAadTokenProvider implements IAadTokenProvider {
    private static msalTrialRunKillSwitchGuid;
    /**
     * Notifies the developer before a full page redirect occurs.
     * @eventproperty
     */
    readonly onBeforeRedirectEvent: SPEvent<BeforeRedirectEventArgs>;
    /**
     * Manager for loading AuthenticationContext instances
     * @internal
     */
    protected _authContextManager: Promise<IAdalAuthContextManager> | undefined;
    private _firstPartyImplicitTokenProvider;
    private _thirdPartyImplicitTokenProvider;
    private _thirdPartyOboTokenProvider;
    private _firstPartyMsalTokenProvider;
    private _thirdPartyMsalTokenProvider;
    private _tokenAcquisitionEvent;
    private _oboConfiguration;
    private readonly _defaultConfiguration;
    /**
     * @internal
     */
    constructor(tokenAcquisitionEvent: SPEvent<TokenAcquisitionEventArgs>, beforeRedirectEvent: SPEvent<BeforeRedirectEventArgs>, configuration: IAadTokenProviderConfiguration, oboConfiguration?: ISPOBOFlowParameters);
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    getToken(resourceEndpoint: string, useCachedToken?: boolean): Promise<string>;
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     *
     * @internal
     */
    _getTokenInternal(resourceEndpoint: string, configuration: IAadTokenProviderConfiguration, useCachedToken?: boolean): Promise<string>;
    private _getToken;
    /**
     * Notifies the developer when Token Acquisition requires user action.
     * @eventproperty
     */
    get tokenAcquisitionEvent(): SPEvent<TokenAcquisitionEventArgs>;
    /**
     * Check for determining if the MSAL API should be used in the current environment.
     */
    private _shouldUseMsalTokenProvider;
    private _getAdalAuthContextManager;
    private _getAdalTokenProvider;
    private _getMsalTokenProvider;
    private _getImplicitTokenProvider;
    private _getOboTokenProvider;
    private _isFirstParty;
    /**
     * Check for determining if the OBO Token Exchange API should be used in the current environment.
     */
    private _shouldUseOboTokenExchange;
}
//# sourceMappingURL=DeferredAadTokenProvider.d.ts.map