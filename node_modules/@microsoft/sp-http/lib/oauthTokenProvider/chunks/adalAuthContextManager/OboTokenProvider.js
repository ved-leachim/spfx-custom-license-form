import { __assign } from "tslib";
import AadConstants from '../../AadConstants';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import SPHttpClient from '../../../spHttpClient/SPHttpClient';
import { AadErrorHandler } from '../../AadErrorHandler';
import { Guid, _SPKillSwitch } from '@microsoft/sp-core-library';
/**
 * Class that wraps the ADAL's authentication class
 * @internal
 */
var OboTokenProvider = /** @class */ (function () {
    function OboTokenProvider(authContext, tokenParameters) {
        this.servicePrincipalId = authContext.config.clientId;
        this._patchAdalAuthContext(authContext);
        this._authContext = authContext;
        this._serverRelativeUrl = tokenParameters.serverRelativeUrl;
        this._spHttpClient = tokenParameters.spHttpClient;
    }
    OboTokenProvider.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        var acquireAccessTokenQosMonitor = new _QosMonitor('OboTokenProvider.GetToken');
        return this._getAccessToken(resourceEndpoint, useCachedToken)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess();
            return token;
        })
            .catch(function (e) {
            acquireAccessTokenQosMonitor.writeUnexpectedFailure('TokenAcquisitionFailure', e);
            throw e;
        });
    };
    OboTokenProvider.prototype._getAccessToken = function (resourceEndpoint, useCachedToken) {
        var cachedAccessToken = this._tryGetCachedAccessToken(resourceEndpoint);
        if (useCachedToken && cachedAccessToken) {
            return Promise.resolve(cachedAccessToken);
        }
        else {
            return this._fetchAccessToken(resourceEndpoint);
        }
    };
    /**
     * Returns an access token if a valid cached token exists
     */
    OboTokenProvider.prototype._tryGetCachedAccessToken = function (resourceEndpoint) {
        var cachedToken;
        try {
            cachedToken = this._authContext.getCachedToken(resourceEndpoint);
        }
        catch (e) {
            _TraceLogger.logError(OboTokenProvider._logSource, e);
        }
        return cachedToken;
    };
    /**
     * See the following link for details about handling conditional access policies.
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-conditional-access-developer
     */
    OboTokenProvider.prototype._fetchAccessToken = function (resourceEndpoint) {
        var acquireAccessTokenQosMonitor = new _QosMonitor('OboTokenProvider.FetchAccessToken');
        // Attempt to fetch a new access token
        return this._fetchAccessTokenSilent(resourceEndpoint)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess();
            return token;
        })
            .catch(function (e) {
            if (e.message &&
                AadErrorHandler._doesAadErrorCodeExist(e.message, AadConstants.EXPECTED_AAD_ERRORS)) {
                acquireAccessTokenQosMonitor.writeExpectedFailure('TokenAcquisitionFailure', e);
            }
            else {
                acquireAccessTokenQosMonitor.writeUnexpectedFailure('TokenAcquisitionFailure', e);
            }
            throw e;
        });
    };
    /**
     * Wraps the ADAL.js callback code with a promise.
     */
    OboTokenProvider.prototype._fetchAccessTokenSilent = function (resourceEndpoint) {
        var urlToCall = this._serverRelativeUrl + "/_api/Microsoft.SharePoint.Internal" +
            (".ClientSideComponent.Token.AcquireOBOToken?resource='" + resourceEndpoint + "'") +
            ("&clientId='" + this._authContext.config.clientId + "'");
        var requestInfo = {
            headers: {
                'X-HTTP-Method': 'GET',
                'OData-Version': '3.0'
            }
        };
        if (!_SPKillSwitch.isActivated(OboTokenProvider.useHeadersKillSwitchGuid, '1/9/2020', 'Use headers for requesting tokens')) {
            requestInfo.headers = __assign(__assign({}, requestInfo.headers), { ClientId: this._authContext.config.clientId, Resource: resourceEndpoint });
        }
        return this._spHttpClient
            .get(urlToCall, SPHttpClient.configurations.v1, requestInfo)
            .then(function (response) {
            return response.ok ? response.json() : Promise.reject(response.json());
        })
            .then(function (json) {
            return JSON.parse(json.value).AccessToken;
        });
    };
    /**
     * Adal creates an iframe without the sandbox attribute.
     * Adal assumes it's being used as a singleton but this will not work for our scenario.
     */
    OboTokenProvider.prototype._patchAdalAuthContext = function (authContext) {
        Object.getPrototypeOf(authContext)._singletonInstance = undefined;
    };
    OboTokenProvider._logSource = _LogSource.create('OBOTokenProvider');
    OboTokenProvider.useHeadersKillSwitchGuid = Guid.parse('6f64a6ed-dc35-422c-a368-539dd03f9b9b');
    return OboTokenProvider;
}());
export { OboTokenProvider };
//# sourceMappingURL=OboTokenProvider.js.map