import * as AuthenticationContext from 'adal-angular';
import AdalAuthContext from './AdalAuthContext';
import { UrlUtilities } from '@microsoft/sp-core-library';
import { OboTokenProvider } from './OboTokenProvider';
/**
 * Class for managing multiple instances of the authentication context.
 * @internal
 */
var AdalAuthContextManager = /** @class */ (function () {
    function AdalAuthContextManager() {
        /**
         * Handles the loading of Adal.js. It is set to protected so that it can
         * be mocked in a unit test.
         * @internal
         */
        this._loadAdalJsModulePromise = undefined;
        this._authContextDictionary = new Map();
    }
    AdalAuthContextManager.convertTokenParametersToConfig = function (tokenProviderParameters) {
        var extraQueryParameter;
        var loginHint = tokenProviderParameters.userPrincipalName;
        if (loginHint) {
            extraQueryParameter = "login_hint=" + encodeURIComponent(loginHint);
        }
        var instance = UrlUtilities.removeEndSlash(tokenProviderParameters.aadInstanceUrl) + '/';
        return {
            clientId: tokenProviderParameters.servicePrincipalId,
            redirectUri: tokenProviderParameters.redirectUri,
            instance: instance,
            loadFrameTimeout: 10000,
            tenant: tokenProviderParameters.aadTenantId,
            navigateToLoginRequestUrl: false,
            extraQueryParameter: extraQueryParameter
        };
    };
    AdalAuthContextManager.prototype.getOboTokenProvider = function (tokenProviderConfiguration, sharePointOBOProviderConfiguration) {
        return new OboTokenProvider(AuthenticationContext.inject(AdalAuthContextManager.convertTokenParametersToConfig(tokenProviderConfiguration)), sharePointOBOProviderConfiguration);
    };
    // Adal-angular exports include an inject function that takes a AuthenticationContext
    // configuration object and returns a instance of the AuthenticationContext.
    // https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/dev/lib/adal.js
    AdalAuthContextManager.prototype.getAdalTokenProvider = function (tokenProviderConfiguration) {
        // Using the servicePrincipalId as a unique identiifier for Authentication Context objects
        if (!this._authContextDictionary.has(tokenProviderConfiguration.servicePrincipalId)) {
            var authContext = new AdalAuthContext(AuthenticationContext.inject(AdalAuthContextManager.convertTokenParametersToConfig(tokenProviderConfiguration)), tokenProviderConfiguration.aadUserId);
            this._authContextDictionary.set(tokenProviderConfiguration.servicePrincipalId, authContext);
        }
        return this._authContextDictionary.get(tokenProviderConfiguration.servicePrincipalId);
    };
    return AdalAuthContextManager;
}());
export { AdalAuthContextManager };
//# sourceMappingURL=AdalAuthContextManager.js.map