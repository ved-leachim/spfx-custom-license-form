import { IAadTokenProviderExtraData, IAadTokenProviderConfiguration } from '../../IAadTokenProvider';
interface IResourceMetadata {
    uri: string;
    state: string;
    correlationId: string;
}
export interface IFailedTokenResponse {
    errorCode: string;
    errorDescription: string;
    isExpected: boolean;
}
export interface ISuccessfulTokenResponse {
    expiration: string;
    token: string;
}
export declare class TokenRequestManager {
    private readonly _defaultConfiguration;
    private readonly _resourceMap;
    private readonly _tokenRequestDictionary;
    static isSuccessfulResponse(tokenResponse: ISuccessfulTokenResponse | IFailedTokenResponse): tokenResponse is ISuccessfulTokenResponse;
    static isExpectedError(errorMessage: string): boolean;
    private static _createResourceMetadata;
    /**
     * FROM MSAL.JS WindowUtils.monitorWindowForHash
     * @hidden
     * Monitors a window until it loads a url with a hash
     * @ignore
     */
    private static _monitorWindowForHash;
    /**
     * Parses the query string parameters into a key-value pair object.
     * From ADAL.JS
     * @ignore
     */
    private static _deserialize;
    /**
     * Adds the hidden iframe for silent token renewal. This code is a security fix to ADAL.js's iframe
     * rendering code. IE11 doesn't support dynamically setting attributes on an iFrame element, so
     * we must patch the original implementation. Original code is in ADAL.js addAdalFrame.
     * https://github.com/AzureAD/azure-activedirectory-library-for-js/ for source code
     */
    private static _createIframe;
    constructor(configuration: IAadTokenProviderConfiguration);
    getToken(resourceUri: string, useLoginHint: boolean): Promise<ISuccessfulTokenResponse | IFailedTokenResponse>;
    _getToken(resourceUri: string, useLoginHint: boolean, resourceMetadata: IResourceMetadata, attemptCount?: number): Promise<ISuccessfulTokenResponse | IFailedTokenResponse>;
    _generateTelemetryExtraData(resourceUri: string, correlationId: string): IAadTokenProviderExtraData;
    private _handleAuthErrors;
    private _getTokenRequestUrl;
    private _generateTokenRequestPromise;
    private _convertHashtoTokenResponse;
}
export {};
//# sourceMappingURL=TokenRequestManager.d.ts.map