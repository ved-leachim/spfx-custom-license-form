import OAuthUtilityContext from './OAuthUtilityContext';
import { ServiceKey, Validate } from '@microsoft/sp-core-library';
/**
 * This class allows one to obtain OAuth tokens
 *
 * OAuth tokens are used to authenticate the user from the sharepoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @alpha
 */
var OAuthTokenProvider = /** @class */ (function () {
    function OAuthTokenProvider(serviceScope) {
        this._serviceScope = serviceScope;
    }
    // tslint:disable-next-line:no-any
    OAuthTokenProvider.prototype.getOAuthToken = function (resource, webUrl, tokenType) {
        Validate.isNotNullOrUndefined(resource, 'resource');
        Validate.isNonemptyString(resource, 'resource');
        return this._getTokenUtility().then(function (tokenUtility) {
            return tokenUtility.getOAuthToken(resource, webUrl, tokenType);
        });
    };
    /**
     * Clears the token from a given resource from the internal cache. If there is no token
     * cached for the resource the method does nothing.
     *
     * @param resource - resource for which the token should be cleared from the cache
     */
    OAuthTokenProvider.prototype.clearCachedToken = function (resource) {
        Validate.isNotNullOrUndefined(resource, 'resource');
        Validate.isNonemptyString(resource, 'resource');
        this._getTokenUtility()
            .then(function (tokenUtility) { return tokenUtility.clearCachedToken(resource); })
            .catch(function (e) {
            throw e;
        });
    };
    /**
     * Returns the token utility singleton
     */
    OAuthTokenProvider.prototype._getTokenUtility = function () {
        var _this = this;
        if (!this._tokenUtility) {
            this._tokenUtility = import('@ms/sp-client-shared' /* webpackChunkName: 'ms-client-shared' */).then(function (msClientSharedModule) {
                return new msClientSharedModule.OAuthUtility(new OAuthUtilityContext(_this._serviceScope));
            });
        }
        return this._tokenUtility;
    };
    /**
     * The service key for OAuthTokenProvider.
     */
    OAuthTokenProvider.serviceKey = ServiceKey.create('sp-client-shared:OAuthTokenProvider', OAuthTokenProvider);
    return OAuthTokenProvider;
}());
export default OAuthTokenProvider;
//# sourceMappingURL=OAuthTokenProvider.js.map