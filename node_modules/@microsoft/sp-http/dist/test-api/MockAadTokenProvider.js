"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockAadTokenProvider = void 0;
var tslib_1 = require("tslib");
var index_1 = require("../index");
/**
 * This class is useful for modifying the internal ADAL.js implementation of the OAuth2TokenProvider.
 */
var MockAadTokenProvider = /** @class */ (function (_super) {
    tslib_1.__extends(MockAadTokenProvider, _super);
    function MockAadTokenProvider(configuration) {
        var _this = _super.call(this, configuration) || this;
        if (configuration.getTokenImplementation) {
            _this._getTokenImplementation = configuration.getTokenImplementation;
        }
        return _this;
    }
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    MockAadTokenProvider.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        return this._getTokenImplementation
            ? this._getTokenImplementation(resourceEndpoint)
            : _super.prototype.getToken.call(this, resourceEndpoint, false);
    };
    return MockAadTokenProvider;
}(index_1.AadTokenProvider));
exports.MockAadTokenProvider = MockAadTokenProvider;
//# sourceMappingURL=MockAadTokenProvider.js.map